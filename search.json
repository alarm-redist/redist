[{"path":"http://alarm-redist.org/redist/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"GNU General Public License","title":"GNU General Public License","text":"Version 2, June 1991Copyright © 1989, 1991 Free Software Foundation, Inc.,51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA Everyone permitted copy distribute verbatim copies license document, changing allowed.","code":""},{"path":"http://alarm-redist.org/redist/LICENSE.html","id":"preamble","dir":"","previous_headings":"","what":"Preamble","title":"GNU General Public License","text":"licenses software designed take away freedom share change . contrast, GNU General Public License intended guarantee freedom share change free software–make sure software free users. General Public License applies Free Software Foundation’s software program whose authors commit using . (Free Software Foundation software covered GNU Lesser General Public License instead.) can apply programs, . speak free software, referring freedom, price. General Public Licenses designed make sure freedom distribute copies free software (charge service wish), receive source code can get want , can change software use pieces new free programs; know can things. protect rights, need make restrictions forbid anyone deny rights ask surrender rights. restrictions translate certain responsibilities distribute copies software, modify . example, distribute copies program, whether gratis fee, must give recipients rights . must make sure , , receive can get source code. must show terms know rights. protect rights two steps: (1) copyright software, (2) offer license gives legal permission copy, distribute /modify software. Also, author’s protection , want make certain everyone understands warranty free software. software modified someone else passed , want recipients know original, problems introduced others reflect original authors’ reputations. Finally, free program threatened constantly software patents. wish avoid danger redistributors free program individually obtain patent licenses, effect making program proprietary. prevent , made clear patent must licensed everyone’s free use licensed . precise terms conditions copying, distribution modification follow.","code":""},{"path":"http://alarm-redist.org/redist/LICENSE.html","id":"terms-and-conditions-for-copying-distribution-and-modification","dir":"","previous_headings":"","what":"TERMS AND CONDITIONS FOR COPYING, DISTRIBUTION AND MODIFICATION","title":"GNU General Public License","text":"0. License applies program work contains notice placed copyright holder saying may distributed terms General Public License. “Program”, , refers program work, “work based Program” means either Program derivative work copyright law: say, work containing Program portion , either verbatim modifications /translated another language. (Hereinafter, translation included without limitation term “modification”.) licensee addressed “”. Activities copying, distribution modification covered License; outside scope. act running Program restricted, output Program covered contents constitute work based Program (independent made running Program). Whether true depends Program . 1. may copy distribute verbatim copies Program’s source code receive , medium, provided conspicuously appropriately publish copy appropriate copyright notice disclaimer warranty; keep intact notices refer License absence warranty; give recipients Program copy License along Program. may charge fee physical act transferring copy, may option offer warranty protection exchange fee. 2. may modify copy copies Program portion , thus forming work based Program, copy distribute modifications work terms Section 1 , provided also meet conditions: ) must cause modified files carry prominent notices stating changed files date change. b) must cause work distribute publish, whole part contains derived Program part thereof, licensed whole charge third parties terms License. c) modified program normally reads commands interactively run, must cause , started running interactive use ordinary way, print display announcement including appropriate copyright notice notice warranty (else, saying provide warranty) users may redistribute program conditions, telling user view copy License. (Exception: Program interactive normally print announcement, work based Program required print announcement.) requirements apply modified work whole. identifiable sections work derived Program, can reasonably considered independent separate works , License, terms, apply sections distribute separate works. distribute sections part whole work based Program, distribution whole must terms License, whose permissions licensees extend entire whole, thus every part regardless wrote . Thus, intent section claim rights contest rights work written entirely ; rather, intent exercise right control distribution derivative collective works based Program. addition, mere aggregation another work based Program Program (work based Program) volume storage distribution medium bring work scope License. 3. may copy distribute Program (work based , Section 2) object code executable form terms Sections 1 2 provided also one following: ) Accompany complete corresponding machine-readable source code, must distributed terms Sections 1 2 medium customarily used software interchange; , b) Accompany written offer, valid least three years, give third party, charge cost physically performing source distribution, complete machine-readable copy corresponding source code, distributed terms Sections 1 2 medium customarily used software interchange; , c) Accompany information received offer distribute corresponding source code. (alternative allowed noncommercial distribution received program object code executable form offer, accord Subsection b .) source code work means preferred form work making modifications . executable work, complete source code means source code modules contains, plus associated interface definition files, plus scripts used control compilation installation executable. However, special exception, source code distributed need include anything normally distributed (either source binary form) major components (compiler, kernel, ) operating system executable runs, unless component accompanies executable. distribution executable object code made offering access copy designated place, offering equivalent access copy source code place counts distribution source code, even though third parties compelled copy source along object code. 4. may copy, modify, sublicense, distribute Program except expressly provided License. attempt otherwise copy, modify, sublicense distribute Program void, automatically terminate rights License. However, parties received copies, rights, License licenses terminated long parties remain full compliance. 5. required accept License, since signed . However, nothing else grants permission modify distribute Program derivative works. actions prohibited law accept License. Therefore, modifying distributing Program (work based Program), indicate acceptance License , terms conditions copying, distributing modifying Program works based . 6. time redistribute Program (work based Program), recipient automatically receives license original licensor copy, distribute modify Program subject terms conditions. may impose restrictions recipients’ exercise rights granted herein. responsible enforcing compliance third parties License. 7. , consequence court judgment allegation patent infringement reason (limited patent issues), conditions imposed (whether court order, agreement otherwise) contradict conditions License, excuse conditions License. distribute satisfy simultaneously obligations License pertinent obligations, consequence may distribute Program . example, patent license permit royalty-free redistribution Program receive copies directly indirectly , way satisfy License refrain entirely distribution Program. portion section held invalid unenforceable particular circumstance, balance section intended apply section whole intended apply circumstances. purpose section induce infringe patents property right claims contest validity claims; section sole purpose protecting integrity free software distribution system, implemented public license practices. Many people made generous contributions wide range software distributed system reliance consistent application system; author/donor decide willing distribute software system licensee impose choice. section intended make thoroughly clear believed consequence rest License. 8. distribution /use Program restricted certain countries either patents copyrighted interfaces, original copyright holder places Program License may add explicit geographical distribution limitation excluding countries, distribution permitted among countries thus excluded. case, License incorporates limitation written body License. 9. Free Software Foundation may publish revised /new versions General Public License time time. new versions similar spirit present version, may differ detail address new problems concerns. version given distinguishing version number. Program specifies version number License applies “later version”, option following terms conditions either version later version published Free Software Foundation. Program specify version number License, may choose version ever published Free Software Foundation. 10. wish incorporate parts Program free programs whose distribution conditions different, write author ask permission. software copyrighted Free Software Foundation, write Free Software Foundation; sometimes make exceptions . decision guided two goals preserving free status derivatives free software promoting sharing reuse software generally.","code":""},{"path":"http://alarm-redist.org/redist/LICENSE.html","id":"no-warranty","dir":"","previous_headings":"","what":"NO WARRANTY","title":"GNU General Public License","text":"11. PROGRAM LICENSED FREE CHARGE, WARRANTY PROGRAM, EXTENT PERMITTED APPLICABLE LAW. EXCEPT OTHERWISE STATED WRITING COPYRIGHT HOLDERS /PARTIES PROVIDE PROGRAM “” WITHOUT WARRANTY KIND, EITHER EXPRESSED IMPLIED, INCLUDING, LIMITED , IMPLIED WARRANTIES MERCHANTABILITY FITNESS PARTICULAR PURPOSE. ENTIRE RISK QUALITY PERFORMANCE PROGRAM . PROGRAM PROVE DEFECTIVE, ASSUME COST NECESSARY SERVICING, REPAIR CORRECTION. 12. EVENT UNLESS REQUIRED APPLICABLE LAW AGREED WRITING COPYRIGHT HOLDER, PARTY MAY MODIFY /REDISTRIBUTE PROGRAM PERMITTED , LIABLE DAMAGES, INCLUDING GENERAL, SPECIAL, INCIDENTAL CONSEQUENTIAL DAMAGES ARISING USE INABILITY USE PROGRAM (INCLUDING LIMITED LOSS DATA DATA RENDERED INACCURATE LOSSES SUSTAINED THIRD PARTIES FAILURE PROGRAM OPERATE PROGRAMS), EVEN HOLDER PARTY ADVISED POSSIBILITY DAMAGES. END TERMS CONDITIONS","code":""},{"path":"http://alarm-redist.org/redist/LICENSE.html","id":"how-to-apply-these-terms-to-your-new-programs","dir":"","previous_headings":"","what":"How to Apply These Terms to Your New Programs","title":"GNU General Public License","text":"develop new program, want greatest possible use public, best way achieve make free software everyone can redistribute change terms. , attach following notices program. safest attach start source file effectively convey exclusion warranty; file least “copyright” line pointer full notice found. Also add information contact electronic paper mail. program interactive, make output short notice like starts interactive mode: hypothetical commands show w show c show appropriate parts General Public License. course, commands use may called something show w show c; even mouse-clicks menu items–whatever suits program. also get employer (work programmer) school, , sign “copyright disclaimer” program, necessary. sample; alter names: General Public License permit incorporating program proprietary programs. program subroutine library, may consider useful permit linking proprietary applications library. want , use GNU Lesser General Public License instead License.","code":"<one line to give the program's name and a brief idea of what it does.> Copyright (C) <year>  <name of author>  This program is free software; you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation; either version 2 of the License, or (at your option) any later version.  This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details.  You should have received a copy of the GNU General Public License along with this program; if not, write to the Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA. Gnomovision version 69, Copyright (C) year name of author Gnomovision comes with ABSOLUTELY NO WARRANTY; for details type `show w'. This is free software, and you are welcome to redistribute it under certain conditions; type `show c' for details. Yoyodyne, Inc., hereby disclaims all copyright interest in the program `Gnomovision' (which makes passes at compilers) written by James Hacker.  <signature of Ty Coon>, 1 April 1989 Ty Coon, President of Vice"},{"path":"http://alarm-redist.org/redist/articles/common_args.html","id":"adj","dir":"Articles","previous_headings":"","what":"adj","title":"Common Arguments to `redist` Functions","text":"Definition: adjacency list represented list one entry redistricting unit map, entry integer vector adjacent units. Deprecated alternative arguments: adjacency, adj.list, adj.obj, adjlist Example:","code":"# Standard eval -  adj <- redist.adjacency(shp = iowa) # tidy eval -  adj <- get_adj(iowa_map)  head(adj) #> [[1]] #> [1]  1 14 38 60 87 #>  #> [[2]] #> [1]  0 14 68 86 87 #>  #> [[3]] #> [1] 21 95 #>  #> [[4]] #> [1] 25 67 92 #>  #> [[5]] #> [1] 13 14 38 82 #>  #> [[6]] #> [1]  6  9 47 56 85 # Plot it! redist.plot.adj(shp = iowa_map)"},{"path":"http://alarm-redist.org/redist/articles/common_args.html","id":"ndists","dir":"Articles","previous_headings":"","what":"ndists","title":"Common Arguments to `redist` Functions","text":"Definition: number districts plan, positive integer Deprecated alternative arguments: Ndistrict, n_dists Example:","code":"# Standard eval -  ndists <- 4 # tidy eval - stored within redist_map object attr(iowa_map, 'ndists') #> [1] 4"},{"path":"http://alarm-redist.org/redist/articles/common_args.html","id":"nsims","dir":"Articles","previous_headings":"","what":"nsims","title":"Common Arguments to `redist` Functions","text":"Definition: number simulations run. positive integer. Deprecated alternative arguments: nsamp Example:","code":"nsims <- 100"},{"path":"http://alarm-redist.org/redist/articles/common_args.html","id":"pop_tol","dir":"Articles","previous_headings":"","what":"pop_tol","title":"Common Arguments to `redist` Functions","text":"Definition: maximum symmetric deviation perfect population parity allowed. positive numeric. Deprecated alternative arguments: thresh, popcons, pop_constraint Example:","code":"# standard eval -  pop_tol <- 0.01  # tidy eval - stored within redist_map object # - getting get_pop_tol(iowa_map) #> [1] 5.350657e-05 # - setting iowa_map <- set_pop_tol(iowa_map, pop_tol = 0.01)"},{"path":"http://alarm-redist.org/redist/articles/common_args.html","id":"plan","dir":"Articles","previous_headings":"","what":"plan","title":"Common Arguments to `redist` Functions","text":"Definition: one-dimensional array district assignments one redistricting unit, typically numbered 1:ndists, though sometimes 0:(ndists - 1) Deprecated alternative arguments: district_membership Example:","code":"sim <- redist.rsg(adj = adj, total_pop = iowa$pop, ndists = 4, pop_tol = 0.01) #>  #> ====================  #> redist.rsg(): Automated Redistricting Starts #>  #>  #>  4 districts built using 99 precincts in 0.08 seconds...  head(sim$plan) #> [1] 4 4 3 1 4 2"},{"path":"http://alarm-redist.org/redist/articles/common_args.html","id":"plans","dir":"Articles","previous_headings":"","what":"plans","title":"Common Arguments to `redist` Functions","text":"Definition: two-dimensional array district assignments, column plan. Deprecated alternative arguments: partitions, district_membership, districts, cdvec Example:","code":"sims <- redist_smc(map = iowa_map, nsims = 10, silent = TRUE) plans <- get_plans_matrix(sims)"},{"path":"http://alarm-redist.org/redist/articles/common_args.html","id":"init_plan","dir":"Articles","previous_headings":"","what":"init_plan","title":"Common Arguments to `redist` Functions","text":"Definition: initial plan start Markov Chain Monte Carlo chain . integer vector one entry redistricting unit. Deprecated alternative arguments: initcds Example:","code":"# standard eval -  init_plan <- iowa$cd_2010  # tidy eval - stored within redist_map object get_existing(iowa_map) #>  [1] 3 3 1 2 4 1 1 4 1 1 4 4 4 4 3 2 4 4 4 2 4 1 2 4 3 2 2 1 2 4 1 4 1 4 4 3 4 4 #> [39] 3 4 4 4 4 2 1 4 4 1 1 2 2 2 1 2 4 2 1 2 2 4 3 2 2 1 3 1 4 2 3 2 4 4 3 4 4 4 #> [77] 3 3 1 3 4 2 4 4 4 1 3 3 2 2 3 2 2 4 4 1 4 1 4"},{"path":"http://alarm-redist.org/redist/articles/common_args.html","id":"total_pop","dir":"Articles","previous_headings":"","what":"total_pop","title":"Common Arguments to `redist` Functions","text":"Definition: vector non-negative integer entries one per redistricting unit. entries reflect total population within unit. Deprecated alternative arguments: pop, population, popvec, fullpop, fullpopvec Example:","code":"# standard eval total_pop <- iowa$pop  # tidy eval - a column within the redist_map object tracked by attributes iowa_map[[attr(iowa_map, 'pop_col')]] #>  [1]   7682   4029  14330  12887   6119  26076 131090  26306  24276  20958 #> [11]  20260  14867   9670  20816  13956  18499  44151  12072  12439   9286 #> [21]  16667  18129  49116  17096  66135   8753   8457  17764  40325  16667 #> [31]  93653  10302  20880  16303  10680   7441   9336  12453  10954  15673 #> [41]  11341  17534  14928  20145   9566   9815   7089  16355  19848  36842 #> [51]  16843 130882  20638  10511  15543  35862 211226  11387   8898  11581 #> [61]  15679  22381  33309  40648  15059  10776   9243   7970  10740  42745 #> [71]  14398   6462  15932   9421  24986   7310 430640  93158  18914   5131 #> [81]  10350 165224  12167  33704  89542  17767   6317  12534   7570  35625 #> [91]  46225  21704   6403  38013  10866  21056 102172   7598  13229"},{"path":"http://alarm-redist.org/redist/articles/common_args.html","id":"group_pop","dir":"Articles","previous_headings":"","what":"group_pop","title":"Common Arguments to `redist` Functions","text":"Definition: vector non-negative integer entries one per redistricting unit. entries reflect subgroup population interest within unit. Deprecated alternative arguments: group_pop, grouppop, grouppopvec Example:","code":"iowa$white #>  [1]   7507   3922  13325  12470   6007  25387 109968  25194  23459  20344 #> [11]  13756  14552   9470  20119  13502  17897  40876  11553  12048   8208 #> [21]  15843  17563  45454  12541  58630   8556   7946  17408  36059  16255 #> [31]  86981   9319  19987  15443   9334   7123   9017  12190  10595  14344 #> [41]  10744  16430  14532  18141   9314   9288   6907  15818  19223  35284 #> [51]  14539 108767  19716  10286  15121  32833 188592   9309   8720  11267 #> [61]  15233  21242  31834  31807  14390  10564   8904   7677  10265  34518 #> [71]  13605   5937  14767   9108  23782   7043 347710  83609  17705   4966 #> [81]  10031 136884  11763  30090  77812  14874   5872  12029   7373  31157 #> [91]  44266  20114   6244  34210  10247  20153  79282   7335  11738"},{"path":"http://alarm-redist.org/redist/articles/common_args.html","id":"pop_bounds","dir":"Articles","previous_headings":"","what":"pop_bounds","title":"Common Arguments to `redist` Functions","text":"Definition: three entry vector asymmetric population parity control. first entry lower bound population, second target population, third upper bound population. Example:","code":"# tidy eval - stored in redist_map object attr(iowa_map, 'pop_bounds') #> [1] 753972.9 761588.8 769204.6"},{"path":"http://alarm-redist.org/redist/articles/common_args.html","id":"ncores","dir":"Articles","previous_headings":"","what":"ncores","title":"Common Arguments to `redist` Functions","text":"Definition: number cores use parallel processes. positive integer. ncores = 1 indicates running serial, ncores > 1 indicates running parallel. Deprecated alternative arguments: ncores, nthreads, n_cores Example:","code":""},{"path":"http://alarm-redist.org/redist/articles/flip.html","id":"top","dir":"Articles","previous_headings":"","what":"Table of Contents","title":"Redistricting with Flip MCMC","text":"Flip MCMC Algorithm Strengths Flip Initializing Flip Redistricting Flip MCMC Using Multiple Chains Tidy Flip MCMC using redist_flip() Diagnostic Plots Tuning Flip Constraints Final Thoughts","code":""},{"path":"http://alarm-redist.org/redist/articles/flip.html","id":"mcmc","dir":"Articles","previous_headings":"","what":"The Flip MCMC Algorithm","title":"Redistricting with Flip MCMC","text":"flip algorithm one straightforward redistricting algorithms. Beginning initial partition graph, proposes flipping node one partition adjacent partition. checking proposed flip meets basic constraints, keeping partitions contiguous staying within certain population parity, ensures proposed new partitions also valid partitions. implementation within redist bit advanced , allows multiple flips rejecting valid partitions based Metropolis Hastings algorithm. following walks basics algorithm provide introduction using flip correctly efficiently.  Suppose redistricting small map left. use flip algorithm, need consider adjacency graph underlies map, right. 25 precincts left displayed node right, connected contiguous map. use district initial plan, can run flip steps.  map extremely small, five iterations give basic idea going behind scenes. iteration, searches boundary possible swaps, selects one, accepts rejects proposals. weak constraints, like used create example, almost every swap accepted. Even , though, doesn’t guarantee iterations won’t repeat plans sampled. fact, , second iteration plan initialization. possibility important ensuring sampled plans representative desired target distribution, controlled constraints chosen. possible constraints discussed , information setting simulations advice ensuring simulations efficient. Back top","code":"data(fl25) data(fl25_enum) plan <- fl25_enum$plans[, 7241] fl25$plan <- plan fl_map <- redist_map(fl25, existing_plan = plan, pop_tol = 0.2, total_pop = pop) #> Projecting to CRS 3857 constr <- redist_constr(fl_map) %>%      add_constr_edges_rem(0.02) set.seed(1) sims <- redist_flip(map = fl_map, nsims = 6, constraints = constr) #>  #> ── redist_flip() ─────────────────────────────────────────────────────────────── #>  #> ── Automated Redistricting Simulation Using Markov Chain Monte Carlo ── #> ℹ Preprocessing data. #> ℹ Starting swMH(). #> ■■■■■■                            17% | ETA:  0s | MH Acceptance: 1.00 #> ■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■  100% | ETA:  0s | MH Acceptance: 1.00 #>"},{"path":"http://alarm-redist.org/redist/articles/flip.html","id":"strengths","dir":"Articles","previous_headings":"","what":"Strengths of Flip","title":"Redistricting with Flip MCMC","text":"Flip incredibly powerful local exploration. can make large changes summary statistic interest without making large changes map , may tell important story went making map. Flip one easiest understand algorithms theoretical guarantees behind . can make especially useful audience interest advanced background mathematics statistics. Flip power make less compact maps many algorithms. can especially powerful blind allegiance compactness makes otherwise viable plans appear outliers. implementation flip many Gibbs constraints implementations. can allow consider different forms partisan countysplit constraints among others. However, strengths come weaknesses. Like Markov Chain Monte Carlo methods, convergence can’t shown, can suggested. Diagnostics, like section diagnostic plots, can help ensure convergence likely, can never show indeed happened. Additionally, flip makes relatively small moves per iteration, many iterations needed move around space. map particularly large, may require several hundred iterations make map substantively different, leads thinning chain, dropping many sequential iterations. However, thinning doesn’t make algorithm efficient, still need work plans, comes time cost.","code":""},{"path":"http://alarm-redist.org/redist/articles/flip.html","id":"init","dir":"Articles","previous_headings":"","what":"Initializing Flip","title":"Redistricting with Flip MCMC","text":"One keys ensuring good performance choice initialization. cases, starting point may obvious, want explore local area around existing map. ’s use case, straightforward use plan starting point. However, goal understand larger space possibilities, starting just one map can misleading. ? Since constraint tuning perfect science, setting constraints strong , map good dimension, flip algorithm may difficulty getting away point without large number iterations. implementation defaults using Sequential Monte Carlo (SMC) algorithm via redist_smc() create initial partition districts, district provided. implementations Random Seed Grow (RSG) Compact Random Seed Grow (CRSG) via redist.rsg() redist.crsg sample defined target distribution, can serve useful initializations flip help provide diverse set starting states. SMC often faster provides theoretical guarantees, tends sample compact districts, even decreasing compactness constraint. , trying decide chains likely converged , can misleading check chains start compact states.","code":""},{"path":"http://alarm-redist.org/redist/articles/flip.html","id":"alg","dir":"Articles","previous_headings":"","what":"Redistricting with Flip MCMC","title":"Redistricting with Flip MCMC","text":"basics flip algorithm , can proceed use algorithm. begin running MCMC algorithm, provide basic information, typically beginning shapefile. loads Iowa dataset included within redist package plots actual congressional districts 2012-2021. (Iowa favorite choice redistricting simulation examples, requires keeping counties together plans allows us use counties unit redistricting, rather thousands precincts.)  , need build adjacency graph identifies counties touching counties map. existing plan, ’s generally advised supply optional plan argument ensure existing plan valid, connected plan. get warning, geomander R package can help solve potential issues. addition, need population unit. ’ve included iowa$pop total population 2010 Census. , basic information need run first simulation. indicates simulating 1000 plans (nsims) state Iowa population parity deviation 0.05 (pop_tol). printed output can silenced setting verbose = FALSE, however displays important information. First, displays preprocessing begins algorithm actually starts. 10% way flip algorithm, outputs current estimated Metropolis acceptance. , ’ve specified Gibbs constraints, acceptance always near 100%. output object class redist. sims object includes various pieces information tracked simulating, focus get_plans_matrix(sims), matrix contains plans. Checking dimensions shows plan saved column, row precinct. , can extract single plan normal matrix, like , plot final simulated plan.  Now, plan incredibly non-compact, can issue. However, expect type outcome, didn’t include compactness constraint simulating. Thus, things checked contiguity plan outside pop_tol set . Since many non-compact plans compact plans space redistricting plans, end highly non-compact districts. can fix specifying constraint, : first arguments , adds three key arguments. First, setting constraint combination nine implemented constraints allows us specify target distribution. Setting constraintweights = 0.4 means want put relatively weak weight compactness, though weak constraint still lot work. four compact constraints implemented currently. recommended use edges-removed can calculated quickly. plot final map sampled code, can see far compact.  Back top","code":"data(iowa) redist.plot.map(iowa, plan = cd_2010) map_ia <- redist_map(iowa, existing_plan = cd_2010, pop_tol = 0.05) sims <- redist_flip(map_ia, nsims = 100) #>  #> ── redist_flip() ─────────────────────────────────────────────────────────────── #>  #> ── Automated Redistricting Simulation Using Markov Chain Monte Carlo ── #> ℹ Preprocessing data. #> ℹ Starting swMH(). #> ■                                  1% | ETA: 0s #> ■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■  100% | ETA:  0s | MH Acceptance: 0.65 #> class(sims) #> [1] \"redist_plans\" \"tbl_df\"       \"tbl\"          \"data.frame\" dim(get_plans_matrix(sims)) #> [1]  99 101 redist.plot.map(shp = iowa, plan = get_plans_matrix(sims)[, 100]) constr <- redist_constr(map_ia) %>% add_constr_edges_rem(0.4)  sims_comp <- redist_flip(map_ia, nsims = 100, constraints = constr) #>  #> ── redist_flip() ─────────────────────────────────────────────────────────────── #>  #> ── Automated Redistricting Simulation Using Markov Chain Monte Carlo ── #> ℹ Preprocessing data. #> ℹ Starting swMH(). redist.plot.map(shp = iowa, plan = get_plans_matrix(sims_comp)[, 100])"},{"path":"http://alarm-redist.org/redist/articles/flip.html","id":"chains","dir":"Articles","previous_headings":"","what":"Using Multiple Chains","title":"Redistricting with Flip MCMC","text":"running larger redistricting analyses, one important step run multiple chains MCMC algorithm. also allow us diagnose convergence better, using Gelman-Rubin plot, seen section Diagnostic Plots. Windows smaller capacities, useful run algorithm within lapply loop. First, set seed replicability decide number chains simulations. , opt initialize using SMC algorithm. want initialize without providing initial partition, need specify number districts, ndists. Unix-based systems, can run considerably faster running parallel. Back top","code":"set.seed(1) nchains <- 4 nsims <- 100 constr <- redist_constr(map_ia) %>% add_constr_edges_rem(0.4) map_ia <- redist_map(iowa, ndists = 4, pop_tol = 0.05) flip_chains <- lapply(1:nchains, function(x){   redist_flip(map_ia, nsims = nsims,               constraints = constr, verbose = FALSE) }) mcmc_chains <- parallel::mclapply(1:nchains, function(x){   redist_flip(map_ia, nsims = nsims,               constraints = constr, verbose = FALSE) }, mc.set.seed = 1, mc.cores = parallel::detectCores())"},{"path":"http://alarm-redist.org/redist/articles/flip.html","id":"tidy","dir":"Articles","previous_headings":"","what":"Tidy Flip MCMC using redist_flip()","title":"Redistricting with Flip MCMC","text":"new, tidy interface functions redist introduces pair key objects, redist_map redist_plans. Get Started page goes depth , shows basics work flip algorithm within newer interface. standard interface, need data set work . example also follow using included Iowa data. Rather building adjacency graph manually, can set using redist_map build add column. set population tolerance 1%. generally good population parity tolerance simulations, careful using default within flip. starting partition sits outside population deviation, flip may take , long time find valid partition flip. Now, can pass redist_map object redist_flip begin simulating. redist_flip’s constraint includes relatively weak compactness constraint default simulating compact maps far efficient completely non-compact maps super useful purposes. can override making blank redist_constr object , can pass redist_flip. redist_flip outputs redist_plans object. extract plans, use get_plans_matrix(). Alternatively, can directly use functions redist_plans object. example, want measure competitiveness plan:  information using redist_plans objects, see Get Started page. Back top","code":"data(iowa) iowa_map <- redist_map(iowa, existing_plan = cd_2010, pop_tol=0.01) tidy_sims <- redist_flip(iowa_map, nsims = 100) #>  #> ── redist_flip() ─────────────────────────────────────────────────────────────── #>  #> ── Automated Redistricting Simulation Using Markov Chain Monte Carlo ── #> ℹ Preprocessing data. #> ℹ Starting swMH(). #> ■                                  1% | ETA: 0s #> ■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■  100% | ETA:  0s | MH Acceptance: 0.80 #> cons <- redist_constr(iowa_map) tidy_sims_no_comp <- redist_flip(iowa_map, nsims = 100, constraints = cons) #>  #> ── redist_flip() ─────────────────────────────────────────────────────────────── #>  #> ── Automated Redistricting Simulation Using Markov Chain Monte Carlo ── #> ℹ Preprocessing data. #> ℹ Starting swMH(). class(tidy_sims) #> [1] \"redist_plans\" \"tbl_df\"       \"tbl\"          \"data.frame\" plans <- get_plans_matrix(tidy_sims) tidy_sims <- tidy_sims %>%    mutate(competitiveness = compet_talisman(pl(), iowa_map, rvote = rep_08, dvote = dem_08)) tidy_sims %>%    ggplot(aes(x = competitiveness)) +   geom_density() +    theme_bw()"},{"path":"http://alarm-redist.org/redist/articles/flip.html","id":"diag","dir":"Articles","previous_headings":"","what":"Diagnostic Plots","title":"Redistricting with Flip MCMC","text":"using MCMC algorithms, various useful diagnostic plots. redist.diagplot function creates familiar plots converting numeric entries mcmc objects use coda. use dissimilarity index Massey Denton 1988 summary statistic following examples. can computed seg_dissim. case, create Republican dissimilarity index. can work two examples, first single vector segregation index, second list vectors, one vector chain. first three plots need single index. Autocorrelation Plot  Density Plot  Mean Plot  examples next two plots, can use example ran 4 chains. index, computed chain. Trace Plot  Gelman Rubin Plot  Back top","code":"seg <- by_plan(seg_dissim(tidy_sims, iowa_map, rep_08, pop)) redist.diagplot(seg, plot = \"autocorr\") redist.diagplot(seg, plot = \"densplot\") redist.diagplot(seg, plot = \"mean\") seg_chains <- lapply(1:nchains, function(i) {      seg_dissim(flip_chains[[i]], iowa_map, rep_08, pop) }) redist.diagplot(sumstat = seg_chains, plot = \"trace\") redist.diagplot(sumstat = seg_chains, plot = 'gelmanrubin')"},{"path":"http://alarm-redist.org/redist/articles/flip.html","id":"tune","dir":"Articles","previous_headings":"","what":"Tuning Flip Constraints","title":"Redistricting with Flip MCMC","text":"using flip algorithm, important difficult step setting right constraint weights. may general pieces advice , advice can replace working data. bottom line every data set bit different. works one state’s redistricting process, data specific state time may transfer another state municipality school district. general process finding works might similar, getting right set constraint weights parameters vary immensely. Even starting different plan within time place can change weights perform best. Like things, key tuning flip patience. Going full scale simulation without testing parameter configurations likely inefficient use time computing power. following highlights advice tune flip make work particular redistricting problem. advice, ’ll use following example:","code":"data(iowa) iowa_map <- redist_map(iowa, existing_plan = cd_2010, pop_tol = 0.02, total_pop = pop)  cons <- redist_constr(iowa_map) %>%      add_constr_edges_rem(0.5) %>%      add_constr_pop_dev(100)  sims <- redist_flip(map = iowa_map,  nsims = 100) #>  #> ── redist_flip() ─────────────────────────────────────────────────────────────── #>  #> ── Automated Redistricting Simulation Using Markov Chain Monte Carlo ── #> ℹ Preprocessing data. #> ℹ Starting swMH(). #> ■■■■■■■■■■■■■■■■■■■■■■■■■■■       86% | ETA:  0s | MH Acceptance: 0.57 #> ■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■  100% | ETA:  0s | MH Acceptance: 0.55 #>"},{"path":"http://alarm-redist.org/redist/articles/flip.html","id":"acceptance-ratios","dir":"Articles","previous_headings":"Tuning Flip Constraints","what":"Acceptance Ratios","title":"Redistricting with Flip MCMC","text":"One first things check working flip Metropolis Hastings ratio. printed console verbose = TRUE. silenced printing warnings, output saves Metropolis Hastings decisions. can check acceptance ratio redist_plans object Reference plans included object mhdecision, can remove na.rm = TRUE. goal generally Metropolis Hastings ratio lie 20% 40%. simulating single parameter, goal generally near 40%, many parameters, likely want near 20%. course many simulations find just just , probably isn’t problem simulations right probability space.","code":"mean(sims$mhdecisions, na.rm = TRUE) #> [1] 0.55"},{"path":"http://alarm-redist.org/redist/articles/flip.html","id":"lambda-and-eprob","dir":"Articles","previous_headings":"Tuning Flip Constraints","what":"lambda and eprob","title":"Redistricting with Flip MCMC","text":"lambda eprob control amount movement within flip. can powerful things increase. lambda defaults 0, eprob defaults 0.05. parameters leads fairly small movements sequential iterations algorithm. example, ’ve increased . lambda = 2, default 0, eprob = 0.10, default 0.05. ’s going can characterized fairly well Hamming distance sequential runs.  lambda controls number components swapped iterations, eprob controls size swapped partitions. Increasing values can important increasing amount movement outputted plans. can adjusted automatically using adapt_lambda adapt_lambda starting simulation, though adjusting manually fit problem better practice, leads control process.","code":"sims_new <- redist_flip(map = iowa_map, nsims = 100, constraints = cons,                          eprob = 0.10, lambda = 2, verbose = FALSE) mean(sims_new$mhdecisions, na.rm = TRUE) #> [1] 0.46 dists <- redist.distances(plans = get_plans_matrix(sims))$Hamming dists_new <- redist.distances(plans = get_plans_matrix(sims_new))$Hamming adj_dists <- rep(NA_integer_, 100) adj_dists_new <- rep(NA_integer_, 100) for(i in 1:100){   adj_dists[i] <- dists[i, i + 1]   adj_dists_new[i] <- dists_new[i, i + 1] } tibble(Hamming = c(adj_dists, adj_dists_new),         `lambda/eprob` = c(rep('0/0.05', 100), rep('2/0.10', 100))) %>%    ggplot() +    geom_density(aes(x = Hamming, color = `lambda/eprob`)) +    theme_bw()"},{"path":"http://alarm-redist.org/redist/articles/flip.html","id":"adjusting-pop_tol","dir":"Articles","previous_headings":"Tuning Flip Constraints","what":"Adjusting pop_tol","title":"Redistricting with Flip MCMC","text":"Sometimes starting map sits neighborhood maps isn’t conducive using starting point. often characterized running single iteration runs (seemingly) forever. typical fix weaken population tolerance use Gibbs constraint pull simulations back target range. ’ve done tuning example, even though ’s unnecessary. simulating, hard constraint consider, can check parities: can subset correct space. right set parameters, lead reasonable set simulations. case, end 10% simulations using soft constraint, uncommon. general, want aim low hard population parity possible, using strong weight Gibbs population hard constraint ’s necessary. helps maximize efficiency simulations, allowing additional movement neighborhoods valid plans.","code":"sims <- sims %>% mutate(par = plan_parity(map = iowa_map)) sims <- sims %>% filter(par <= 0.01)"},{"path":"http://alarm-redist.org/redist/articles/flip.html","id":"balancing-multiple-constraints","dir":"Articles","previous_headings":"Tuning Flip Constraints","what":"Balancing Multiple Constraints","title":"Redistricting with Flip MCMC","text":"often , multiple constraints important redistricting problem. two general paths success working one two constraints. First, might want add one time, generally starting compactness constraint. flip doesn’t consider compactness , unfortunate behavior creating incredibly non-compact maps. However, even weak compactness constraint, performs well avoiding maps non-compact aren’t worthy consideration. can add next constraints time, weakening bit time add new constraint. , want make sure acceptance rate 20% 40%. ’s low, won’t get sufficient movement around probability space ’s high, likely aren’t characterizing probability space want characterize. way tune run simulation kitchen sink type set . can run relatively small number iterations. Now, interesting adding constraints actually increased acceptance probability. correlated constraints can guide algorithm towards high probability neighborhoods multiple maps considered! address , might want increase constraint weight slightly across board. weights far low, might lower , particularly constraints worried . example, new set constraints might good place simulate . Notably, process tuning guided constraint outputs relative values. average compactness value edges removed ’re constraining summary like following: population constraint can summarized : measured completely different scales, shouldn’t surprising population much higher weight. constant difficulty tuning, total number edges graph volatility population isn’t something ’s easily standardized transferred maps, unfortunately. Back top","code":"cons <- redist_constr(iowa_map) %>%      add_constr_edges_rem(0.25) %>%      add_constr_pop_dev(50) %>%      add_constr_compet(10, rvote = rep_08, dvote = dem_08) %>%      add_constr_splits(10, admin = region) sims <- redist_flip(iowa_map, 100, constraints = cons) #>  #> ── redist_flip() ─────────────────────────────────────────────────────────────── #>  #> ── Automated Redistricting Simulation Using Markov Chain Monte Carlo ── #> ℹ Preprocessing data. #> ℹ Starting swMH(). cons <- cons <- redist_constr(iowa_map) %>%      add_constr_edges_rem(1.5) %>%      add_constr_pop_dev(100) %>%      add_constr_compet(40, rvote = rep_08, dvote = dem_08) %>%      add_constr_splits(20, admin = region)  sims <- redist_flip(iowa_map, 100, constraints = cons) #>  #> ── redist_flip() ─────────────────────────────────────────────────────────────── #>  #> ── Automated Redistricting Simulation Using Markov Chain Monte Carlo ── #> ℹ Preprocessing data. #> ℹ Starting swMH(). summary(sims$constraint_edges_removed, na.rm = TRUE) #>    Min. 1st Qu.  Median    Mean 3rd Qu.    Max.    NA's  #>   33.00   36.00   36.50   38.18   41.00   46.00       4 summary(sims$constraint_pop_dev, na.rm = TRUE) #>      Min.   1st Qu.    Median      Mean   3rd Qu.      Max.      NA's  #> 0.0000066 0.0000637 0.0001290 0.0001676 0.0002153 0.0006327         4"},{"path":"http://alarm-redist.org/redist/articles/flip.html","id":"final","dir":"Articles","previous_headings":"","what":"Some Final Thoughts","title":"Redistricting with Flip MCMC","text":"Redistricting simulation much statistics rather hard science. working flip, redistricting sampler, component resembles art. important variable needs included, getting every variable correct target space necessarily easy. general, may best start one two constraints slowly add model. can help ensure one single constraint doesn’t dominate entire process. starting , ’s never bad idea run single simulation make sure everything works. doesn’t ’re expecting, ’s much better waiting 1,000,000 iterations run. works, try 100 1000. ’ve seen ’s moving appears moving reasonable directions try large numbers simulations. Remember running 1,000,000 steps flip completely useless parameters good use time computing power. finally, doubt, never hurts run extra simulations. know code working, shouldn’t cost much run just extra iterations simulations new starting points. results agree prior findings, ’s support . disagree, know wrong can run even additional simulations figure ’s right! Back top","code":""},{"path":"http://alarm-redist.org/redist/articles/map-preproc.html","id":"the-map","dir":"Articles","previous_headings":"","what":"The Map","title":"Map Pre-processing for Special Constraints","text":"King County populous county state Washington, contains city Seattle. nine members county council elected single-member districts redrawn every decade. According county charter, districts “drawn produce districts compact contiguous territory, composed economic geographic units approximately equal population,” follow municipality lines much possible. precinct data available online, contain population, presidential vote, city, existing district information. 39 incorporated cities King County, together cover 19% population 19% area county. remainder “unincorporated King County”. county contains significant amount water, , complicates drawing districts; Vashon Island southwest part county connected rest county land. ”ll start looking maps county districts.","code":"library(dplyr) library(ggplot2) library(scales) library(patchwork)  library(redist)  data_url <- \"https://github.com/alarm-redist/redist-data/raw/main/data/king_county.rds\" data_path <- tempfile() download.file(data_url, data_path) king_shp <- readRDS(data_path) print(king_shp) #> Simple feature collection with 2562 features and 10 fields #> Attribute-geometry relationships: constant (3), aggregate (5), identity (2) #> Geometry type: MULTIPOLYGON #> Dimension:     XY #> Bounding box:  xmin: 1217170 ymin: 31464.84 xmax: 1583214 ymax: 287944.6 #> Projected CRS: NAD83(HARN) / Washington North (ftUS) #> # A tibble: 2,562 × 11 #>    id     precinct    city     distr   pop   vap voters dem_08 rep_08 pct_water #>  * <chr>  <chr>       <chr>    <int> <int> <int>  <dbl>  <dbl>  <dbl>     <dbl> #>  1 333518 AUB 30-3518 AUB          7  1035   780    641    249    221   0       #>  2 331066 AUB 30-1066 AUB          7   588   466    372    172    123   0       #>  3 332446 PEGGY       UNINCORP     7  1290   950    763    339    262   0       #>  4 332573 AUB 30-2573 AUB          7   948   710    644    305    217   0       #>  5 333539 AUB 30-3539 AUB          7   663   486    419    188    156   0       #>  6 333538 AUB 30-3538 AUB          7  1214   892    716    328    240   0       #>  7 330045 AUB 47-0045 AUB          7   731   656    433    190    105   0.00538 #>  8 330427 EXCALIBUR   UNINCORP     7   660   501    402    164    151   0.00689 #>  9 333087 FED 30-3087 FED          7   820   645    453    223    124   0       #> 10 333238 FED 30-3238 FED          7   997   674    356    161     90   0       #> # ℹ 2,552 more rows #> # ℹ 1 more variable: geometry <MULTIPOLYGON [US_survey_foot]>"},{"path":"http://alarm-redist.org/redist/articles/map-preproc.html","id":"creating-the-redist_map-object","dir":"Articles","previous_headings":"","what":"Creating the redist_map object","title":"Map Pre-processing for Special Constraints","text":"first step one redist analysis creating redist_map object, stores basic parameters redistricting problem. Among parameters desired level population parity. , ”ll compute parity current set districts, ensure simulations worse. redist_map object contains adjacency graph county. can explore graph, zoom city Seattle, using plot().","code":"existing_parity <- redist.parity(king_shp$distr, king_shp$pop) king <- redist_map(king_shp, existing_plan = distr, pop_tol = existing_parity) print(king) #> A <redist_map> with 2562 units and 12 fields #> To be partitioned into 9 districts with population between 214,505.7 - 1.663204% and 214,505.7 + 1.663204% #> With geometry: #>     bbox:           xmin: 1217170 ymin: 31464.84 xmax: 1583214 ymax: 287944.6 #>     projected CRS:  NAD83(HARN) / Washington North (ftUS) #> # A tibble: 2,562 × 12 #>    id     precinct    city     distr   pop   vap voters dem_08 rep_08 pct_water #>  * <chr>  <chr>       <chr>    <int> <int> <int>  <dbl>  <dbl>  <dbl>     <dbl> #>  1 333518 AUB 30-3518 AUB          7  1035   780    641    249    221   0       #>  2 331066 AUB 30-1066 AUB          7   588   466    372    172    123   0       #>  3 332446 PEGGY       UNINCORP     7  1290   950    763    339    262   0       #>  4 332573 AUB 30-2573 AUB          7   948   710    644    305    217   0       #>  5 333539 AUB 30-3539 AUB          7   663   486    419    188    156   0       #>  6 333538 AUB 30-3538 AUB          7  1214   892    716    328    240   0       #>  7 330045 AUB 47-0045 AUB          7   731   656    433    190    105   0.00538 #>  8 330427 EXCALIBUR   UNINCORP     7   660   501    402    164    151   0.00689 #>  9 333087 FED 30-3087 FED          7   820   645    453    223    124   0       #> 10 333238 FED 30-3238 FED          7   997   674    356    161     90   0       #> # ℹ 2,552 more rows #> # ℹ 2 more variables: geometry <MULTIPOLYGON [US_survey_foot]>, adj <list> plot(king, adj = TRUE, centroids = FALSE, zoom_to = (city == \"SEA\"))"},{"path":"http://alarm-redist.org/redist/articles/map-preproc.html","id":"subsetting","dir":"Articles","previous_headings":"","what":"Subsetting","title":"Map Pre-processing for Special Constraints","text":"Often, wish restrict analysis part map districts. supported redist using filter() function dplyr. package”s version filter() automatically update adjacency graph, number districts, relevant population bounds.","code":""},{"path":"http://alarm-redist.org/redist/articles/map-preproc.html","id":"specific-districts","dir":"Articles","previous_headings":"Subsetting","what":"Specific districts","title":"Map Pre-processing for Special Constraints","text":"Suppose wanted study districts 2, 4, 8, cover Seattle. Looking information header, comparing original king object, see number districts updated 9 3, population tolerances updated 214,506 ± 1.663% 213,049 - 0.9909% 213,049 + 2.358%. visible equally important edits adjacency graph reflect new geometry map.","code":"filter(king, distr %in% c(2, 4, 8)) #> A <redist_map> with 960 units and 12 fields #> To be partitioned into 3 districts with population between 214,505.7 - 1.663204% and 214,505.7 + 1.663204% #> With geometry: #>     bbox:           xmin: 1217170 ymin: 120178.2 xmax: 1297890 ymax: 271519.8 #>     projected CRS:  NAD83(HARN) / Washington North (ftUS) #> # A tibble: 960 × 12 #>    id     precinct    city     distr   pop   vap voters dem_08 rep_08 pct_water #>  * <chr>  <chr>       <chr>    <int> <int> <int>  <dbl>  <dbl>  <dbl>     <dbl> #>  1 330374 DOLPHIN     UNINCORP     8   378   296    291    199     53     0.447 #>  2 330236 BILOXI      UNINCORP     8   534   436    432    295     81     0.394 #>  3 330370 DILWORTH    UNINCORP     8   536   424    420    299     66     0.293 #>  4 331520 SEA 34-1520 SEA          8   407   316    312    237     49     0.398 #>  5 333266 SEA 34-3266 SEA          8   601   495    246    160     31     0     #>  6 333265 SEA 34-3265 SEA          8   741   561    315    231     38     0     #>  7 331515 SEA 34-1515 SEA          8   524   418    353    276     34     0     #>  8 331512 SEA 34-1512 SEA          8   379   307    262    200     33     0     #>  9 331517 SEA 34-1517 SEA          8   353   295    239    193     17     0     #> 10 331519 SEA 34-1519 SEA          8   407   328    282    211     44     0     #> # ℹ 950 more rows #> # ℹ 2 more variables: geometry <MULTIPOLYGON [US_survey_foot]>, adj <list>"},{"path":"http://alarm-redist.org/redist/articles/map-preproc.html","id":"dealing-with-water-and-islands","dir":"Articles","previous_headings":"Subsetting","what":"Dealing with water and islands","title":"Map Pre-processing for Special Constraints","text":"Another way might want subset cut precincts just water, districts won”t unnecessarily cross bodies water. course, ”ll ensure Vashon Island still connected mainland least one precinct. ”ll start subsetting water precincts plotting labels.  see removing water precincts except WVPS34 WVSP34, can maintain connection island mainland (incidentally, state ferry connecting island Seattle runs precincts).  Zooming view adjacency graph city Seattle, see graph appropriately edited remove water precincts.","code":"plot(filter(king, pct_water >= 0.99, pop == 0)) + geom_sf_text(aes(label = id)) #> Warning: Your subset was not based on districts. #> → Please use `set_pop_tol()` to update your <redist_map> or create a new #>   <redist_map> with the correct number of districts. water_prec <- filter(king, pct_water >= 0.99, pop == 0) %>% pull(id) #> Warning: Your subset was not based on districts. #> → Please use `set_pop_tol()` to update your <redist_map> or create a new #>   <redist_map> with the correct number of districts. water_prec <- setdiff(water_prec, c(\"WVPS34\", \"WVSP34\")) king_land <- filter(king, !(id %in% water_prec)) plot(king_land) plot(king_land, adj = TRUE, centroids = FALSE, zoom_to = (city == \"SEA\"))"},{"path":"http://alarm-redist.org/redist/articles/map-preproc.html","id":"merging","dir":"Articles","previous_headings":"","what":"Merging","title":"Map Pre-processing for Special Constraints","text":"Often, want merge units together form larger units, either visualize analyze coarser scale, ensure merged units treated one “block” redistricting algorithm. Merging units part map preprocessing workflows, redist carried merge_by() function, works like combination group_by() summarize() verbs dplyr. example, merge King County data city. hood, merge_by() several things. First, groups shapefile provided key keys (, city). default also groups existing districts, merged units still follow district boundaries. remaining column, merge_by() tries automatically summarize . numeric columns summed (columns percentage values averaged), character columns collapsed summary variables. can read details process documentation. Finally, merge_by() makes appropriate edits adjacency graph. Merging geographic shapefile units can computationally intensive, default merge_by() drops geometry merging. OK analysis purposes, since relevant adjacency information still encoded graph. analysis, can use pullback() method un-merge objects restore plotting capability. However, want preserve geometry merging, can simply set drop_geom=FALSE.  see uses merge_by() sections .","code":"merge_by(king_land, city) #> A <redist_map> with 60 units and 11 fields #> To be partitioned into 9 districts with population between 214,505.7 - 1.663204% and 214,505.7 + 1.663204% #> Merged from another map with reindexing: int [1:2541] 41 41 46 41 41 ... #> # A tibble: 60 × 11 #>    distr city  pct_water    pop    vap voters dem_08 rep_08 id    precinct adj   #>    <int> <chr>     <dbl>  <int>  <int>  <dbl>  <dbl>  <dbl> <chr> <chr>    <lis> #>  1     1 BOT     0        17090  13312 9.89e3  5259   3017  3332… BOT 01-… <int> #>  2     1 KIR     0.0503    7036   5856 3.91e3  2191    947  3329… KIR 45-… <int> #>  3     1 KMR     0.0128   20460  15787 1.30e4  7288   3476  3306… KMR 32-… <int> #>  4     1 LFP     0.0281   12598   9975 9.47e3  6063   1992  3306… LFP 32-… <int> #>  5     1 SEA     0.00845  72503  59161 4.79e4 34664   6527  3323… SEA 46-… <int> #>  6     1 SHL     0.00447  53007  42873 3.43e4 20895   7184  3325… SHL 32-… <int> #>  7     1 UNIN…   0.0536   24780  19208 1.54e4  8370   4440  3305… JEAN~CE… <int> #>  8     1 WOD     0.00260   8059   6163 4.79e3  2480   1505  3327… WOD 45-… <int> #>  9     2 SEA     0.0408  195293 162191 1.17e5 84203  10899  3318… SEA 43-… <int> #> 10     2 UNIN…   0.0248   15645  11866 7.46e3  4654.  1211. 3309… RAINIER… <int> #> # ℹ 50 more rows king_merged <- merge_by(king_land, city, drop_geom = FALSE) plot(king_merged, adj = TRUE)"},{"path":"http://alarm-redist.org/redist/articles/map-preproc.html","id":"freezing","dir":"Articles","previous_headings":"","what":"Freezing","title":"Map Pre-processing for Special Constraints","text":"Sometimes, rather completely remove portion map, want freeze place, units portion stay together district. reasons might vary, include enforcing county administrative boundary split constraint, aiding setting Voting Rights Act constraints, preparing map optimized according set criteria. context King County Council seats, might want implement requirement districts follow municipal lines ensuring sampled redistricting plans split municipalities split existing plan. way, number split municipalities set sampled plans guaranteed exceed number existing splits. redist, freezing accomplished using freeze() merge_by() functions. former takes description units frozen, groups contiguous chunks frozen units, returning indexing vector uniquely identifies group. merge_by() merges groups together. can use redist.splits() function count split municipalities, is_county_split() function identify split municipalities.  plot shows cities frozen together split. Notice merge just unsplit_id also city, adjacent unsplit cities merged together. also set collapse_chr=FALSE drop id precinct columns, become slightly unwieldy large merge. see action, ”ll sample 100 redistricting plans using redist_smc() partially frozen map. ”ll use pullback() reconstruct plan output redist_smc() congruous original geometry object, king_land.  Notice Merged another map... line disappears number map units changes using pullback(). Notice also sampled plans completely preserves municipalities frozen freeze() merge_by().","code":"cat(splits_admin(king_land$distr, king_land, city), \"split cities\\n\") #> 11 11 11 11 11 11 11 11 11 split cities  king_land %>%   mutate(is_unsplit = !is_county_split(distr, city)) %>%   plot(is_unsplit) king_unsplit <- king_land %>%   mutate(unsplit_id = freeze(!is_county_split(distr, city))) %>%   merge_by(unsplit_id, city, collapse_chr = FALSE) print(king_unsplit) #> A <redist_map> with 1968 units and 10 fields #> To be partitioned into 9 districts with population between 214,505.7 - 1.663204% and 214,505.7 + 1.663204% #> Merged from another map with reindexing: int [1:2541] 1410 1410 1414 1410 1410 ... #> # A tibble: 1,968 × 10 #>    distr unsplit_id city  pct_water   pop   vap voters dem_08 rep_08 adj        #>    <int>      <int> <chr>     <dbl> <int> <int>  <dbl>  <dbl>  <dbl> <list>     #>  1     1         67 SEA     0        1227  1115    601    420     83 <int [7]>  #>  2     1         68 SEA     0         663   533    467    359     46 <int [6]>  #>  3     1         69 SEA     0         563   455    376    286     47 <int [5]>  #>  4     1         70 SEA     0         369   298    248    190     28 <int [5]>  #>  5     1         71 SEA     0         423   360    296    233     27 <int [5]>  #>  6     1         72 SEA     0         580   488    406    310     47 <int [6]>  #>  7     1        101 BOT     0       17090 13312   9894   5259   3017 <int [13]> #>  8     1        101 KMR     0.0128  20460 15787  12954   7288   3476 <int [10]> #>  9     1        101 LFP     0.0281  12598  9975   9465   6063   1992 <int [4]>  #> 10     1        101 SHL     0.00447 53007 42873  34346  20895   7184 <int [14]> #> # ℹ 1,958 more rows plans <- redist_smc(king_unsplit, 100, silent = TRUE) print(plans) #> A <redist_plans> containing 100 sampled plans and 1 reference plan #> Plans have 9 districts from a 1,968-unit map, and were drawn using Sequential #> Monte Carlo. #> Merged from another map with reindexing: int [1:2541] 1410 1410 1414 1410 1410 ... #> With plans resampled from weights #> Plans matrix: int [1:1968, 1:101] 1 1 1 1 1 1 1 1 1 1 ... #> # A tibble: 909 × 3 #>    draw  district total_pop #>    <fct>    <int>     <dbl> #>  1 distr        1    215533 #>  2 distr        2    210938 #>  3 distr        3    213700 #>  4 distr        4    215718 #>  5 distr        5    216833 #>  6 distr        6    213696 #>  7 distr        7    214210 #>  8 distr        8    212491 #>  9 distr        9    217432 #> 10 1            1    214053 #> # ℹ 899 more rows print(pullback(plans)) #> A <redist_plans> containing 100 sampled plans and 1 reference plan #> Plans have 9 districts from a 2,541-unit map, and were drawn using Sequential #> Monte Carlo. #> With plans resampled from weights #> Plans matrix: int [1:2541, 1:101] 7 7 7 7 7 7 7 7 7 7 ... #> # A tibble: 909 × 3 #>    draw  district total_pop #>    <fct>    <int>     <dbl> #>  1 distr        1    215533 #>  2 distr        2    210938 #>  3 distr        3    213700 #>  4 distr        4    215718 #>  5 distr        5    216833 #>  6 distr        6    213696 #>  7 distr        7    214210 #>  8 distr        8    212491 #>  9 distr        9    217432 #> 10 1            1    214053 #> # ℹ 899 more rows redist.plot.plans(pullback(plans), draws = 1:4, shp = king_land)"},{"path":"http://alarm-redist.org/redist/articles/map-preproc.html","id":"district-cores","dir":"Articles","previous_headings":"","what":"District Cores","title":"Map Pre-processing for Special Constraints","text":"common requirement redistricting districts redistricting resemble original districts, “preserve cores” previous districts, ensure relative continuity representation. redist package operationalizes idea explicitly constructing cores set districts make_cores(), merging together merge_by(). idea constructing district cores work inwards district boundaries. First, merge district completely. , un-freeze precincts lie along district boundaries. , un-freeze precincts unfrozen previous step. repeat process user-specified number times, leaving central “cores” district frozen. comes time simulate, cores assigned district unit, preserving representation people living core. make_cores() function takes boundary parameter counts number steps; boundary=1 corresponds un-freezing precincts along boundary . often sufficient moderate--strong status quo constraint. example, set boundary=1 King county, 82% population lives inside district core, boundary=2 number drops 58%. , ”ll use boundary=1. can see large areas inside district merged together applying merge_by() generated cores.  sample redistrict plans modified map, observe simulated plans generally follow location shape original plan. Sampling also faster, since fewer units map.","code":"pop_inside_cores <- function(boundary) {   king_land %>%     mutate(core = make_cores(boundary = boundary)) %>%     as_tibble() %>%     group_by(core) %>%     filter(n() > 2) %>% # filter to cores only     pull(pop) %>%     sum() } pop_inside_cores(1) / sum(king_land$pop) #> [1] 0.8254058 pop_inside_cores(2) / sum(king_land$pop) #> [1] 0.5909499 king_cores <- king_land %>%   mutate(core = make_cores(boundary = 1)) %>%   merge_by(core, drop_geom = FALSE) plot(king_cores) plans <- redist_smc(king_cores, 100, silent = TRUE) redist.plot.plans(plans, draws = 1:4, shp = king_cores)"},{"path":"http://alarm-redist.org/redist/articles/redist.html","id":"package","dir":"Articles","previous_headings":"","what":"The redist package","title":"Introduction to redist","text":"install redist, follow instructions README. information package components, check full documentation.","code":""},{"path":"http://alarm-redist.org/redist/articles/redist.html","id":"algorithms","dir":"Articles","previous_headings":"The redist package","what":"Algorithms","title":"Introduction to redist","text":"package contains variety redistricting simulation enumeration algorithms. Generally use one following three algorithms: redist_smc(), recommended algorithm purposes.1 redist_mergesplit(), MCMC version SMC proposal.2 redist_flip(), another MCMC algorithm uses local proposals.3 algorithms redist.enumpart() efficient enumeration small maps.4 redist_shortburst() optimizing plan according user-provided criterion.5 redist.rsg() redist.crsg(), sample known target distribution.6","code":""},{"path":"http://alarm-redist.org/redist/articles/redist.html","id":"data","dir":"Articles","previous_headings":"The redist package","what":"Data","title":"Introduction to redist","text":"package comes several built-datasets, may useful exploring package’s functionality becoming familiar algorithmic redistricting: iowa (used vignette). fl25, 25-precinct subset state Florida. fl25_enum, containing possible sets three districts drawn 25-precinct Florida map. fl70, 70-precinct subset state Florida. fl250, 250-precinct subset state Florida.","code":""},{"path":"http://alarm-redist.org/redist/articles/redist.html","id":"prepare","dir":"Articles","previous_headings":"","what":"Compiling, cleaning, and preparing the data","title":"Introduction to redist","text":"time-consuming part redistricting analysis, like data analyses, collecting cleaning necessary data. redistricting, data includes geographic shapefiles precincts existing legislative district plans, precinct- block-level demographic information Census, precinct-level political data. data generally come different sources, may fully overlap , complicating problem. redist focused data collection process. geomander package contains many helpful functions compiling data, fixing problems geographic data. ALARM project provides pre-cleaned redistricting data files consisting VEST election data joined 2020 Census data precinct level. sources precinct-level geographic political information include MIT Election Lab, Census, Redistricting Data Hub, Voting Election Science Team, Harvard Election Data Archive, Metric Geometry Gerrymandering Group, state websites.","code":""},{"path":"http://alarm-redist.org/redist/articles/redist.html","id":"iowa","dir":"Articles","previous_headings":"Compiling, cleaning, and preparing the data","what":"Iowa","title":"Introduction to redist","text":"analysis Iowa, ’ll use data included package, compiled Census Harvard Election Data Archive. contains, county, total population voting-age population race, well number votes President 2008. geometry column contains geographic shapefile information.","code":"data(iowa) print(iowa) #> Simple feature collection with 99 features and 15 fields #> Geometry type: MULTIPOLYGON #> Dimension:     XY #> Bounding box:  xmin: 4081849 ymin: 2879102 xmax: 5834228 ymax: 4024957 #> Projected CRS: NAD83(HARN) / Iowa North (ftUS) #> First 10 features: #>     fips       name cd_2010    pop  white black hisp    vap  wvap bvap hvap #> 1  19001      Adair       3   7682   7507    11  101   5957  5860    5   53 #> 2  19003      Adams       3   4029   3922     8   37   3180  3109    6   22 #> 3  19005  Allamakee       1  14330  13325   109  757  11020 10430   82  425 #> 4  19007  Appanoose       2  12887  12470    55  181   9993  9745   40   99 #> 5  19009    Audubon       4   6119   6007     9   37   4780  4714    5   27 #> 6  19011     Benton       1  26076  25387    93  275  19430 19068   49  155 #> 7  19013 Black Hawk       1 131090 109968 11493 4907 102594 89541 7677 2865 #> 8  19015      Boone       4  26306  25194   202  505  20027 19448  103  260 #> 9  19017     Bremer       1  24276  23459   186  239  18763 18242  155  137 #> 10 19019   Buchanan       1  20958  20344    59  243  15282 14979   32  128 #>    tot_08 dem_08 rep_08    region                       geometry #> 1    4053   1924   2060     South MULTIPOLYGON (((4592338 328... #> 2    2206   1118   1046     South MULTIPOLYGON (((4528041 315... #> 3    7059   3971   2965 Northeast MULTIPOLYGON (((5422507 401... #> 4    6176   2970   3086     South MULTIPOLYGON (((5032545 306... #> 5    3435   1739   1634 Northwest MULTIPOLYGON (((4487363 341... #> 6   13712   7058   6447 Southeast MULTIPOLYGON (((5246216 357... #> 7   64775  39184  24662 Northeast MULTIPOLYGON (((5175640 369... #> 8   13929   7356   6293   Central MULTIPOLYGON (((4741174 354... #> 9   12871   6940   5741 Northeast MULTIPOLYGON (((5174636 379... #> 10  10338   6050   4139 Northeast MULTIPOLYGON (((5302846 370..."},{"path":"http://alarm-redist.org/redist/articles/redist.html","id":"define","dir":"Articles","previous_headings":"","what":"Defining the redistricting problem","title":"Introduction to redist","text":"redistricting problem defined map precincts, number contiguous districts divide precincts , level population parity enforce, necessary constraints must imposed.","code":""},{"path":"http://alarm-redist.org/redist/articles/redist.html","id":"determining-the-relevant-constraints","dir":"Articles","previous_headings":"Defining the redistricting problem","what":"Determining the relevant constraints","title":"Introduction to redist","text":"Iowa, congressional districts constructed precincts state’s 99 counties, 2010 redistricting cycle, Iowa apportioned four congressional districts, one 2000 cycle. Chapter 42 Iowa Code provides guidance constraints imposed redistricting process (emphasis added): 42.4 Redistricting standards. … 1.b. Congressional districts shall population nearly equal practicable ideal district population, derived prescribed paragraph “” subsection. congressional district shall population varies one percent applicable ideal district population, except necessary comply Article III, section 37 Constitution State Iowa. … 3. Districts shall composed convenient contiguous territory. Areas meet points adjoining corners contiguous. 4. Districts shall reasonably compact form, extent consistent standards established subsections 1, 2, 3. general, reasonably compact districts square, rectangular, hexagonal shape, irregularly shaped, extent permitted natural political boundaries…. 5. district shall drawn purpose favoring political party, incumbent legislator member Congress, person group, purpose augmenting diluting voting strength language racial minority group. establishing districts, use shall made following data: Addresses incumbent legislators members Congress. Political affiliations registered voters. Previous election results. Demographic information, population head counts, except required Constitution laws United States. section goes provide two specific measures compactness used compare districts, one total perimeter districts. total perimeter small, districts relatively compact. Contiguity districts reliance partisan demographic data built-redist. ’ll look specify desired population deviation (1% law) next section, discuss compactness simulation section.","code":""},{"path":"http://alarm-redist.org/redist/articles/redist.html","id":"setting-up-the-problem-in-redist","dir":"Articles","previous_headings":"Defining the redistricting problem","what":"Setting up the problem in redist","title":"Introduction to redist","text":"redist, basic redistricting problem defined object type redist_map, can constructed using eponymous function. user must provide vector population counts (defaults pop column, one exists) desired population parity, number districts. latter can inferred reference redistricting plan exists. Iowa, ’ll use adopted 2010 plan reference. looks much iowa , metadata added, ’s new column, adj.","code":"iowa_map = redist_map(iowa, existing_plan=cd_2010, pop_tol=0.01, total_pop = pop) print(iowa_map) #> A <redist_map> with 99 units and 17 fields #> To be partitioned into 4 districts with population between 761,588.8 - 1.0% and 761,588.8 + 1.0% #> With geometry: #>     bbox:           xmin: 4081849 ymin: 2879102 xmax: 5834228 ymax: 4024957 #>     projected CRS:  NAD83(HARN) / Iowa North (ftUS) #> # A tibble: 99 × 17 #>    fips  name  cd_2010    pop  white black  hisp    vap  wvap  bvap  hvap tot_08 #>  * <chr> <chr>   <int>  <dbl>  <dbl> <dbl> <dbl>  <dbl> <dbl> <dbl> <dbl>  <dbl> #>  1 19001 Adair       3   7682   7507    11   101   5957  5860     5    53   4053 #>  2 19003 Adams       3   4029   3922     8    37   3180  3109     6    22   2206 #>  3 19005 Alla…       1  14330  13325   109   757  11020 10430    82   425   7059 #>  4 19007 Appa…       2  12887  12470    55   181   9993  9745    40    99   6176 #>  5 19009 Audu…       4   6119   6007     9    37   4780  4714     5    27   3435 #>  6 19011 Bent…       1  26076  25387    93   275  19430 19068    49   155  13712 #>  7 19013 Blac…       1 131090 109968 11493  4907 102594 89541  7677  2865  64775 #>  8 19015 Boone       4  26306  25194   202   505  20027 19448   103   260  13929 #>  9 19017 Brem…       1  24276  23459   186   239  18763 18242   155   137  12871 #> 10 19019 Buch…       1  20958  20344    59   243  15282 14979    32   128  10338 #> # ℹ 89 more rows #> # ℹ 5 more variables: dem_08 <dbl>, rep_08 <dbl>, region <chr>, #> #   geometry <MULTIPOLYGON [US_survey_foot]>, adj <list>"},{"path":"http://alarm-redist.org/redist/articles/redist.html","id":"adjacency-based-redistricting","dir":"Articles","previous_headings":"Defining the redistricting problem","what":"Adjacency-based redistricting","title":"Introduction to redist","text":"redistricting algorithms operate adjacency graph, constructed actual precinct county geography. adjacency graph, every precinct county node, two nodes connected edge corresponding precincts geographically adjacent.7 Creating contiguous set districts part redistricting plan corresponds creating partition adjacency graph. redist_map() function automatically computes adjacency graph provided shapefile (though one can provided directly well), stores adj column adjacency list, , precinct, list neighboring precincts. part process, adjacency graph checked global contiguity (islands), necessary redistricting algorithms function properly. can visualize adjacency graph plotting redist_map object.","code":"plot(iowa_map, adj=TRUE) + plot(iowa_map)"},{"path":"http://alarm-redist.org/redist/articles/redist.html","id":"pre-processing","dir":"Articles","previous_headings":"Defining the redistricting problem","what":"Pre-processing","title":"Introduction to redist","text":"Often, want analyze portion map, hold districts fixed others re-simulated. may also want implement status-quo-type constraint encourages simulated districts close reference plan. can accomplished freezing “cores” district. operations fall umbrella map pre-processing, redist well-equipped handle . can use familiar dplyr verbs like filter() summarize(), along new redist operations like freeze(), make_cores(), merge_by(), operate redist_map objects. package make appropriate modifications geometry adjacency graph background. map pre-processing vignette contains information examples operations.","code":""},{"path":"http://alarm-redist.org/redist/articles/redist.html","id":"exploring-the-geography","dir":"Articles","previous_headings":"Defining the redistricting problem","what":"Exploring the geography","title":"Introduction to redist","text":"get feel demographic political geography state, ’ll make plots iowa_map object. see state mostly rural white, Polk county (Des Moines) largest densest. Politically, counties relatively balanced Democrats Republicans (least ’08 election), though rough east-west gradient.","code":"areas = as.numeric(units::set_units(sf::st_area(iowa_map$geometry), mi^2)) plot(iowa_map, fill = pop / areas) +      scale_fill_viridis_c(name=\"Population density (people / sq. mi)\",                           trans=\"sqrt\") plot(iowa_map, fill = dem_08 / tot_08) +     scale_fill_gradient2(name=\"Pct. Democratic '08\",  midpoint=0.5) plot(iowa_map, fill = wvap / vap, by_distr = TRUE)"},{"path":"http://alarm-redist.org/redist/articles/redist.html","id":"simulate","dir":"Articles","previous_headings":"","what":"Simulating redistricting plans","title":"Introduction to redist","text":"crux redistricting analysis actually simulating new redistricting plans. discussed , redist provides several algorithms performing simulation, advantages incorporates different set constraints. , ’ll demonstrate use redist_smc() algorithm, Sequential Monte Carlo (SMC)-based procedure recommended choice redistricting analyses. SMC creates plans directly, drawing district boundaries one time, illustrated .  way districts drawn SMC, generated districts relatively compact default. can controlled compactness parameter (although compactness=1 particularly computationally convenient). simulate, call redist_smc() redist_map object. provide runs=2 parameter, run SMC algorithm twice, parallel. doubles total number sampled plans, importantly, provides extremely valuable diagnostic information whether algorithm sampling properly. output algorithm redist_plans object, stores matrix district assignments precinct simulated plans, table summary statistics district simulated plan. existing 2010 plan also automatically added reference plan. Additional reference comparison plans may added using add_reference(). can explore specific simulated plans redist.plot.plans().","code":"iowa_plans = redist_smc(iowa_map, 500, compactness=1, runs=2) print(iowa_plans) #> A <redist_plans> containing 1,000 sampled plans and 1 reference plan #> Plans have 4 districts from a 99-unit map, and were drawn using Sequential #> Monte Carlo. #> With plans resampled from weights #> Plans matrix: int [1:99, 1:1001] 1 1 2 3 4 2 2 4 2 2 ... #> # A tibble: 4,004 × 4 #>    draw    district total_pop chain #>    <fct>      <int>     <dbl> <int> #>  1 cd_2010        1    761612    NA #>  2 cd_2010        2    761548    NA #>  3 cd_2010        3    761624    NA #>  4 cd_2010        4    761571    NA #>  5 1              1    759274     1 #>  6 1              2    763216     1 #>  7 1              3    755788     1 #>  8 1              4    768077     1 #>  9 2              1    759558     1 #> 10 2              2    761089     1 #> # ℹ 3,994 more rows redist.plot.plans(iowa_plans, draws=1:6, shp=iowa_map)"},{"path":"http://alarm-redist.org/redist/articles/redist.html","id":"analyze","dir":"Articles","previous_headings":"","what":"Analyzing the simulated plans","title":"Introduction to redist","text":"redist_plans object, output sampling algorithm, links matrix precinct assignments table district statistics, linkage makes analyzing output breeze. Sometimes may useful renumber simulated districts (random numbers general) match reference plan closely possible. adds pop_overlap column measures much population district given plan reference plan. can add summary statistics district, using redist’s analysis functions. , ’ll compute population deviation, perimeter-based compactness measure related Iowa Code’s redistricting requirements, fraction minority voters two-party Democratic vote share district. summary statistics interest calculated, ’s important check algorithm’s diagnostics. complex sampling algorithm, things can go wrong. Diagnostics, flawless, can help catch problems stop making conclusions actually fault broken sampling process. summary() function redist’s one-stop-shop algorithm diagnostics. ’s lot diagnostic output , read ?summary.redist_plans. anything obviously wrong, function alert provide instructions try fix . warnings aren’t flawless, ’s important check numbers . ’ve used 2 runs, , summary() calculate R-hat values. close 1 possible, generally less 1.05. bigger , means multiple independent runs algorithm gave different results. samples (higher nsims) usually called . number keep eye plan diversity (top output), whose 80% range generally cover range 0.5–0.8. Since diagnostics look good, can return analysis. ’s quick turn district-level statistics redist_plans object plan-level summary statistics. tables statistics easily plotted using existing libraries like ggplot2, redist provides number helpful plotting functions automate common tasks, like adding reference line reference plan. output functions ggplot object, allowing customization.  can see adopted plan nearly complete population parity, districts roughly compact average simulated SMC algorithm. One common, useful, plots, studying partisan characteristics plan, plot fraction group (party) within district, compare reference plan. Generally, first sort districts quantity first, make numbers line , ’ve already renumbered districts match reference plan closely possible.  see districts 1 2 look normal, appears , relative ensemble, district 4 (NW Iowa) Democratic, district 3 (SW Iowa, Des Moines) less Democratic. However, reference plan appear complete outlier. might also want look Democratic fraction district compares fraction minority voters. can make scatterplot districts, overlay reference districts, using redist.plot.scatter. ’ll also color district number (higher numbers lighter colors). , see district 1 2 reference plan look normal, district lower number Democrats minority voters otherwise expected.  , easy keep exploring, using functionality redist_plans built-plotting functions. complex model-based analyses also performed using district-level plan-level statistics.","code":"iowa_plans = match_numbers(iowa_plans, iowa_map$cd_2010) print(iowa_plans) #> A <redist_plans> containing 1,000 sampled plans and 1 reference plan #> Plans have 4 districts from a 99-unit map, and were drawn using Sequential #> Monte Carlo. #> With plans resampled from weights #> Plans matrix: int [1:99, 1:1001] 3 3 1 2 4 1 1 4 1 1 ... #> # A tibble: 4,004 × 5 #>    draw    district total_pop chain pop_overlap #>    <fct>   <ord>        <dbl> <int>       <dbl> #>  1 cd_2010 1           761548    NA       1     #>  2 cd_2010 2           761624    NA       1     #>  3 cd_2010 3           761612    NA       1     #>  4 cd_2010 4           761571    NA       1     #>  5 1       1           768077     1       0.738 #>  6 1       2           763216     1       0.738 #>  7 1       3           755788     1       0.738 #>  8 1       4           759274     1       0.738 #>  9 2       1           766367     1       0.639 #> 10 2       2           761089     1       0.639 #> # ℹ 3,994 more rows county_perims = prep_perims(iowa_map, iowa_map$adj)  iowa_plans = iowa_plans %>%     mutate(pop_dev = abs(total_pop / get_target(iowa_map) - 1),            comp = comp_polsby(pl(), iowa_map, perim_df=county_perims),            pct_min = group_frac(iowa_map, vap - wvap, vap),            pct_dem = group_frac(iowa_map, dem_08, dem_08 + rep_08)) print(iowa_plans) #> With plans resampled from weights #> Plans matrix: int [1:99, 1:1001] 3 3 1 2 4 1 1 4 1 1 ... #> # A tibble: 4,004 × 9 #>    draw    district total_pop chain pop_overlap   pop_dev  comp pct_min pct_dem #>    <fct>   <ord>        <dbl> <int>       <dbl>     <dbl> <dbl>   <dbl>   <dbl> #>  1 cd_2010 1           761548    NA       1     0.0000535 0.302  0.0737   0.592 #>  2 cd_2010 2           761624    NA       1     0.0000463 0.360  0.0968   0.579 #>  3 cd_2010 3           761612    NA       1     0.0000305 0.529  0.114    0.531 #>  4 cd_2010 4           761571    NA       1     0.0000233 0.522  0.0788   0.491 #>  5 1       1           768077     1       0.738 0.00852   0.503  0.0646   0.593 #>  6 1       2           763216     1       0.738 0.00214   0.415  0.0955   0.577 #>  7 1       3           755788     1       0.738 0.00762   0.515  0.129    0.563 #>  8 1       4           759274     1       0.738 0.00304   0.428  0.0741   0.456 #>  9 2       1           766367     1       0.639 0.00627   0.402  0.0738   0.577 #> 10 2       2           761089     1       0.639 0.000656  0.246  0.103    0.609 #> # ℹ 3,994 more rows summary(iowa_plans) #> SMC: 1,000 sampled plans of 4 districts on 99 units #> `adapt_k_thresh`=0.99 • `seq_alpha`=0.5 #> `pop_temper`=0 #> Plan diversity 80% range: 0.47 to 0.80 #>  #> R-hat values for summary statistics: #> pop_overlap     pop_dev        comp     pct_min     pct_dem  #>       1.004       1.000       0.999       1.000       0.999 #> Sampling diagnostics for SMC run 1 of 2 (500 samples) #>          Eff. samples (%) Acc. rate Log wgt. sd  Max. unique Est. k  #> Split 1       492 (98.4%)      5.5%        0.25   313 ( 99%)      5  #> Split 2       484 (96.9%)      6.6%        0.34   297 ( 94%)      4  #> Split 3       477 (95.5%)      3.0%        0.41   279 ( 88%)      3  #> Resample      410 (82.0%)       NA%        0.41   406 (128%)     NA #> Sampling diagnostics for SMC run 2 of 2 (500 samples) #>          Eff. samples (%) Acc. rate Log wgt. sd  Max. unique Est. k  #> Split 1       492 (98.4%)      9.9%        0.26   313 ( 99%)      3  #> Split 2       480 (96.1%)      9.7%        0.38   324 (103%)      3  #> Split 3       479 (95.7%)      4.7%        0.42   275 ( 87%)      2  #> Resample      422 (84.4%)       NA%        0.42   417 (132%)     NA #> •  Watch out for low effective samples, very low acceptance rates (less than #> 1%), large std. devs. of the log weights (more than 3 or so), and low numbers #> of unique plans. R-hat values for summary statistics should be between 1 and #> 1.05. plan_sum = group_by(iowa_plans, draw) %>%     summarize(max_dev = max(pop_dev),               avg_comp = mean(comp),               max_pct_min = max(pct_min),               dem_distr = sum(pct_dem > 0.5)) print(plan_sum) #> A <redist_plans> containing 1,000 sampled plans and 1 reference plan #> Plans have 4 districts from a 99-unit map, and were drawn using Sequential #> Monte Carlo. #> With plans resampled from weights #> Plans matrix: int [1:99, 1:1001] 3 3 1 2 4 1 1 4 1 1 ... #> # A tibble: 1,001 × 5 #>    draw      max_dev avg_comp max_pct_min dem_distr #>    <fct>       <dbl>    <dbl>       <dbl>     <int> #>  1 cd_2010 0.0000535    0.428       0.114         3 #>  2 1       0.00852      0.465       0.129         3 #>  3 2       0.00627      0.379       0.110         3 #>  4 3       0.00290      0.403       0.127         3 #>  5 4       0.00888      0.333       0.122         4 #>  6 5       0.00660      0.371       0.109         3 #>  7 6       0.00697      0.334       0.118         3 #>  8 7       0.00686      0.414       0.111         3 #>  9 8       0.00778      0.445       0.109         3 #> 10 9       0.00361      0.382       0.123         3 #> # ℹ 991 more rows library(patchwork)  hist(plan_sum, max_dev) + hist(iowa_plans, comp) +     plot_layout(guides=\"collect\") plot(iowa_plans, pct_dem, sort=FALSE, size=0.5) #> Ignoring unknown labels: #> • shape : \"Plan\" pal = scales::viridis_pal()(5)[-1] redist.plot.scatter(iowa_plans, pct_min, pct_dem,                      color=pal[subset_sampled(iowa_plans)$district]) +     scale_color_manual(values=\"black\")"},{"path":"http://alarm-redist.org/redist/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Christopher T. Kenny. Author, maintainer. Cory McCartan. Author. Ben Fifield. Author. Kosuke Imai. Author. Jun Kawahara. Contributor. Alexander Tarr. Contributor. Michael Higgins. Contributor.","code":""},{"path":"http://alarm-redist.org/redist/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Kenny C, McCartan C, Fifield B, Imai K (2022). redist: Simulation Methods Legislative Redistricting. R package, https://alarm-redist.org/redist/. McCartan C, Imai K (2023). “Sequential Monte Carlo sampling balanced compact redistricting plans.” Annals Applied Statistics, 17(4). http://dx.doi.org/10.1214/23-AOAS1763. Fifield B, Imai K, Kawahara J, Kenny C (2020). “essential role empirical validation legislative redistricting simulation.” Statistics Public Policy, 7(1). Fifield B, Higgins M, Imai K, Tarr (2020). “Automated redistricting simulation using Markov chain Monte Carlo.” Journal Computational Graphical Statistics, 29(4).","code":"@Manual{redist,   title = {{redist}: Simulation Methods for Legislative Redistricting},   author = {Christopher T. Kenny and Cory McCartan and Ben Fifield and Kosuke Imai},   year = {2022},   note = {R package},   url = {https://alarm-redist.org/redist/}, } @Article{mccartan2020,   title = {Sequential Monte Carlo for sampling balanced and compact redistricting plans},   author = {Cory McCartan and Kosuke Imai},   year = {2023},   volume = {17},   number = {4},   journal = {Annals of Applied Statistics},   url = {http://dx.doi.org/10.1214/23-AOAS1763}, } @Article{fifield2020enum,   title = {The essential role of empirical validation in legislative redistricting simulation},   author = {Ben Fifield and Kosuke Imai and Jun Kawahara and Christopher T. Kenny},   year = {2020},   volume = {7},   number = {1},   journal = {Statistics and Public Policy}, } @Article{fifield2020mcmc,   title = {Automated redistricting simulation using Markov chain Monte Carlo},   author = {Ben Fifield and Michael Higgins and Kosuke Imai and Alexander Tarr},   year = {2020},   volume = {29},   number = {4},   journal = {Journal of Computational and Graphical Statistics}, }"},{"path":"http://alarm-redist.org/redist/index.html","id":"redist-simulation-methods-for-legislative-redistricting","dir":"","previous_headings":"","what":"An R package for legislative redistricting","title":"An R package for legislative redistricting","text":"R package enables researchers sample redistricting plans pre-specified target distribution using Sequential Monte Carlo Markov Chain Monte Carlo algorithms. package supports various constraints redistricting process, geographic compactness population parity requirements. Tools analysis, including computation various summary statistics plotting functionality, also included.","code":""},{"path":"http://alarm-redist.org/redist/index.html","id":"installation-instructions","dir":"","previous_headings":"","what":"Installation Instructions","title":"An R package for legislative redistricting","text":"redist available CRAN can installed using: can also install recent development version redist (usually quite stable) using remotes package.","code":"install.packages(\"redist\") if (!require(remotes)) install.packages(\"remotes\") remotes::install_github(\"alarm-redist/redist@dev\", dependencies=TRUE)"},{"path":"http://alarm-redist.org/redist/index.html","id":"getting-started","dir":"","previous_headings":"","what":"Getting started","title":"An R package for legislative redistricting","text":"basic analysis two steps. First, define redistricting plan using redist_map. simulate plans using one algorithm functions: redist_smc, redist_flip, redist_mergesplit. generating plans, can use redist’s plotting functions study geographic partisan characteristics simulated ensemble.     detailed introduction redistricting methods package can found Get Started page. package vignettes contain detailed information guides specific workflows.","code":"library(redist) library(dplyr)  data(iowa)  # set a 0.1% population constraint iowa_map = redist_map(iowa, existing_plan=cd_2010, pop_tol=0.001, total_pop = pop) # simulate 500 plans using the SMC algorithm iowa_plans = redist_smc(iowa_map, nsims=500) #> SEQUENTIAL MONTE CARLO #> Sampling 500 99-unit maps with 4 districts and population between 760827 and 762350. library(ggplot2) library(patchwork) # for plotting  redist.plot.plans(iowa_plans, draws=c(\"cd_2010\", \"1\", \"2\", \"3\"), shp=iowa_map) iowa_plans = iowa_plans %>%     mutate(Compactness = comp_polsby(pl(), iowa_map),            `Population deviation` = plan_parity(iowa_map),            `Democratic vote` = group_frac(iowa_map, dem_08, tot_08)) #> Linking to GEOS 3.13.0, GDAL 3.8.5, PROJ 9.5.1; sf_use_s2() is TRUE  hist(iowa_plans, `Population deviation`) + hist(iowa_plans, Compactness) +     plot_layout(guides=\"collect\") +     plot_annotation(title=\"Simulated plan characteristics\") redist.plot.scatter(iowa_plans, `Population deviation`, Compactness) +     labs(title=\"Population deviation and compactness by plan\") plot(iowa_plans, `Democratic vote`, size=0.5, color_thresh=0.5) +     scale_color_manual(values=c(\"black\", \"tomato2\", \"dodgerblue\")) +     labs(title=\"Democratic vote share by district\") #> Ignoring unknown labels: #> • shape : \"Plan\""},{"path":"http://alarm-redist.org/redist/reference/EPSG.html","id":null,"dir":"Reference","previous_headings":"","what":"EPSG Table — EPSG","title":"EPSG Table — EPSG","text":"data contains NAD83 (HARN) EPSG codes every U.S. state. Since redist uses projected geometries, often good idea use projections tailored particular state, rather , example, Mercator projection. Use codes along sf::st_transform() project shapefiles nicely.","code":""},{"path":"http://alarm-redist.org/redist/reference/EPSG.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"EPSG Table — EPSG","text":"","code":"data(\"EPSG\")"},{"path":"http://alarm-redist.org/redist/reference/EPSG.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"EPSG Table — EPSG","text":"named list containing EPSG codes U.S. state. Codes indexed state abbreviations.","code":""},{"path":"http://alarm-redist.org/redist/reference/EPSG.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"EPSG Table — EPSG","text":"","code":"data(EPSG) EPSG$WA # 2855 #> [1] 2855"},{"path":"http://alarm-redist.org/redist/reference/add_reference.html","id":null,"dir":"Reference","previous_headings":"","what":"Add a reference plan to a set of plans — add_reference","title":"Add a reference plan to a set of plans — add_reference","text":"function facilitates comparing existing (.e., non-simulated) redistricting plan set simulated plans.","code":""},{"path":"http://alarm-redist.org/redist/reference/add_reference.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Add a reference plan to a set of plans — add_reference","text":"","code":"add_reference(plans, ref_plan, name = NULL)"},{"path":"http://alarm-redist.org/redist/reference/add_reference.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Add a reference plan to a set of plans — add_reference","text":"plans redist_plans object ref_plan integer vector containing reference plan. renumbered 1..ndists. name human-readable name reference plan. Defaults name ref_plan.","code":""},{"path":"http://alarm-redist.org/redist/reference/add_reference.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Add a reference plan to a set of plans — add_reference","text":"modified redist_plans object containing reference plan","code":""},{"path":"http://alarm-redist.org/redist/reference/avg_by_prec.html","id":null,"dir":"Reference","previous_headings":"","what":"Average a variable by precinct (Deprecated) — avg_by_prec","title":"Average a variable by precinct (Deprecated) — avg_by_prec","text":"Deprecated favor proj_avg(). Takes column redist_plans object averages across set draws precinct.","code":""},{"path":"http://alarm-redist.org/redist/reference/avg_by_prec.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Average a variable by precinct (Deprecated) — avg_by_prec","text":"","code":"avg_by_prec(plans, x, draws = NA)"},{"path":"http://alarm-redist.org/redist/reference/avg_by_prec.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Average a variable by precinct (Deprecated) — avg_by_prec","text":"plans redist_plans object x expression average. Tidy-evaluated plans. draws draws average. NULL average draws, including reference plans. special value NA average sampled draws. integer, logical, character vector indicating specific draws may also provided.","code":""},{"path":"http://alarm-redist.org/redist/reference/avg_by_prec.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Average a variable by precinct (Deprecated) — avg_by_prec","text":"vector length matching number precincts, containing average.","code":""},{"path":"http://alarm-redist.org/redist/reference/classify_plans.html","id":null,"dir":"Reference","previous_headings":"","what":"Hierarchically classify a set of redistricting plans — classify_plans","title":"Hierarchically classify a set of redistricting plans — classify_plans","text":"Applies hierarchical clustering distance matrix computed set plans takes first k splits.","code":""},{"path":"http://alarm-redist.org/redist/reference/classify_plans.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Hierarchically classify a set of redistricting plans — classify_plans","text":"","code":"classify_plans(dist_mat, k = 8, method = \"complete\")"},{"path":"http://alarm-redist.org/redist/reference/classify_plans.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Hierarchically classify a set of redistricting plans — classify_plans","text":"dist_mat distance matrix, output plan_distances() k number groupings create method clustering method use. See hclust() options.","code":""},{"path":"http://alarm-redist.org/redist/reference/classify_plans.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Hierarchically classify a set of redistricting plans — classify_plans","text":"object class redist_classified, list two elements: groups character vector group labels form \"..1..\", one plan. splits list splits hierarchical clustering. list element list two mutually exclusive vectors plan indices, labeled group classification, indicating plans side split. Use plot.redist_classified() visual summary.","code":""},{"path":"http://alarm-redist.org/redist/reference/compare_plans.html","id":null,"dir":"Reference","previous_headings":"","what":"Make a comparison between two sets of plans — compare_plans","title":"Make a comparison between two sets of plans — compare_plans","text":"function provides one way identify structural differences two sets redistricting plans. operates computing precinct co-occurrence matrix (symmetric matrix ,j-th entry fraction plans precinct j district) set, computing first eigenvalue difference two matrices (direction). eigenvalues identify important parts map.","code":""},{"path":"http://alarm-redist.org/redist/reference/compare_plans.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Make a comparison between two sets of plans — compare_plans","text":"","code":"compare_plans(   plans,   set1,   set2,   shp = NULL,   plot = \"fill\",   thresh = 0.1,   labs = c(\"Set 1\", \"Set 2\"),   ncores = 1 )"},{"path":"http://alarm-redist.org/redist/reference/compare_plans.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Make a comparison between two sets of plans — compare_plans","text":"plans redist_plans object set1 <data-masking> indexing vectors plan draws compare.  Alternatively, second redist_plans object compare . set2 <data-masking> indexing vectors plan draws compare. Must mutually exclusive set1. shp shapefile plotting. plot plot=\"line\", display plot set showing set boundaries distinguish set (squared differences eigenvector values across boundary).  plot=\"fill\", plot eigenvector set choropleth. plot = 'adj', plot shows adjacency graph edges distinguish set. adj option different graphical option information line option. See information.  Set FALSE disable plotting (leave shp). thresh value threshold eigenvector determining relevant set precincts comparison. labs names panels plot. ncores number parallel cores use.","code":""},{"path":"http://alarm-redist.org/redist/reference/compare_plans.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Make a comparison between two sets of plans — compare_plans","text":"possible, makes comparison plot according plot. Otherwise returns following list: eigen1 numeric vector containing first eigenvector p1 - p2, p1 p2 co-occurrence matrices set1 set2, respectively. eigen2 numeric vector containing first eigenvector p2 - p1, p1 p2 co-occurrence matrices set1 set2, respectively. group_1a, group_1b Lists precincts. Compared set2, set1 plans precincts much likely separate districts. Computed thresholding eigen1 thresh. group_2a, group_2b Lists precincts. Compared set1, set2 plans precincts much likely separate districts. Computed thresholding eigen2 thresh. cooccur_sep_1 difference average co-occurrence precincts group_1a group_1b set2 set1. Higher indicates better separation. cooccur_sep_2 difference average co-occurrence precincts group_2a group_2b set1 set2. Higher indicates better separation.","code":""},{"path":"http://alarm-redist.org/redist/reference/compare_plans.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Make a comparison between two sets of plans — compare_plans","text":"co-occurrence matrices regularized \\(Beta(1/ndists, 1-1/ndists)\\) prior, useful either set1 set2 small.","code":""},{"path":"http://alarm-redist.org/redist/reference/compare_plans.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Make a comparison between two sets of plans — compare_plans","text":"","code":"data(iowa) iowa_map <- redist_map(iowa, ndists = 4, pop_tol = 0.05) plans1 <- redist_smc(iowa_map, 100, silent = TRUE) plans2 <- redist_mergesplit(iowa_map, 200, warmup = 100, silent = TRUE) compare_plans(plans1, plans2, shp = iowa_map)  compare_plans(plans2, as.integer(draw) <= 20,     as.integer(draw) > 20, shp = iowa_map, plot = \"line\")"},{"path":"http://alarm-redist.org/redist/reference/constraints.html","id":null,"dir":"Reference","previous_headings":"","what":"Sampling constraints — constraints","title":"Sampling constraints — constraints","text":"redist_smc() redist_mergesplit() algorithms package allow additional constraints redistricting process encoded target distribution sampling. functions provided specify constraints. arguments quoted evaluated context data frame provided redist_constr().","code":""},{"path":"http://alarm-redist.org/redist/reference/constraints.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Sampling constraints — constraints","text":"","code":"add_constr_status_quo(constr, strength, current)  add_constr_grp_pow(   constr,   strength,   group_pop,   total_pop = NULL,   tgt_group = 0.5,   tgt_other = 0.5,   pow = 1 )  add_constr_grp_hinge(   constr,   strength,   group_pop,   total_pop = NULL,   tgts_group = c(0.55) )  add_constr_grp_inv_hinge(   constr,   strength,   group_pop,   total_pop = NULL,   tgts_group = c(0.55) )  add_constr_compet(constr, strength, dvote, rvote, pow = 0.5)  add_constr_incumbency(constr, strength, incumbents)  add_constr_splits(constr, strength, admin)  add_constr_multisplits(constr, strength, admin)  add_constr_total_splits(constr, strength, admin)  add_constr_pop_dev(constr, strength)  add_constr_segregation(constr, strength, group_pop, total_pop = NULL)  add_constr_polsby(constr, strength, perim_df = NULL)  add_constr_fry_hold(   constr,   strength,   total_pop = NULL,   ssdmat = NULL,   denominator = 1 )  add_constr_log_st(constr, strength, admin = NULL)  add_constr_edges_rem(constr, strength)  add_constr_custom(constr, strength, fn)"},{"path":"http://alarm-redist.org/redist/reference/constraints.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Sampling constraints — constraints","text":"constr redist_constr() object strength strength constraint. Higher values mean restrictive constraint. current reference map status quo constraint. group_pop vector group population total_pop vector total population. Defaults population vector used sampling. tgt_group, tgt_other Target group shares power-type constraint. pow exponent power-type constraint. tgts_group vector target group shares hinge-type constraint. dvote, rvote vector Democratic Republican vote counts incumbents vector unit indices incumbents. example, three incumbents live precincts correspond rows 1, 2, 100 redist_map, entering incumbents = c(1, 2, 100) avoid two incumbents district. admin vector indicating administrative unit membership perim_df dataframe output redistmetrics::prep_perims ssdmat Squared distance matrix Fryer Holden constraint denominator Fryer Holden minimum value normalize . Default 1 (normalization). fn function","code":""},{"path":"http://alarm-redist.org/redist/reference/constraints.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Sampling constraints — constraints","text":"constraints fed Gibbs measure, coefficients constraint set corresponding strength parameter. strength can real number, zero corresponding constraint. Higher higher strength values eventually cause algorithm's accuracy efficiency suffer. Whenever use constraints, sure check sampling diagnostics. status_quo constraint adds term measuring variation information distance plan reference, rescaled [0, 1]. grp_hinge constraint takes list target group percentages. matches district nearest target percentage, applies penalty form \\(\\sqrt{max(0, tgt - grouppct)}\\), summing across districts. penalizes districts target percentage. Use plot.redist_constr() visualize effect constraint calibrate strength appropriately. grp_inv_hinge constraint takes list target group percentages. matches district nearest target percentage, applies penalty form \\(\\sqrt{max(0, grouppct - tgt)}\\), summing across districts. penalizes districts target percentage. Use plot.redist_constr() visualize effect constraint calibrate strength appropriately. grp_pow constraint (expert use) adds term form \\((|tgtgroup-grouppct||tgtother-grouppct|)^{pow})\\), encourages districts group shares near either tgt_group tgt_other.  Values strength depend heavily values parameters especially pow parameter. Use plot.redist_constr() visualize effect constraint calibrate strength appropriately. compet constraint encourages competitiveness applying grp_pow constraint target percentages set 50%. convenience, specified Democratic Republican vote shares. incumbency constraint adds term counting number districts containing paired-incumbents. Values strength generally small, given underlying values counts. splits constraint adds term counting number counties split . Values strength generally small, given underlying values counts. multisplits constraint adds term counting number counties split twice . Values strength generally small, given underlying values counts. total_splits constraint adds term counting total number times county split, summed across counties (.e., counting number excess district-county pairs). Values strength generally small, given underlying values counts. edges_rem constraint adds term counting number edges removed adjacency graph. usable redist_flip(), algorithms implicitly use via compactness parameter. Values strength generally small, given underlying values counts. log_st constraint constraint adds term counting log number spanning trees. usable redist_flip(), algorithms implicitly use via compactness parameter. polsby constraint adds term encouraging compactness defined Polsby Popper metric. Values strength may moderate size. fry_hold constraint adds term encouraging compactness defined Fryer Holden metric. Values strength extremely small, underlying values massive true minimum Fryer Holden denominator known. segregation constraint adds term encouraging segregation among minority groups, measured dissimilarity index. pop_dev constraint adds term encouraging plans smaller population deviations target population. custom constraint allows user specify constraint using function evaluates districts one time. provided function fn take two arguments: vector describing current plan assignment unit first argument, integer describing district evaluate second argument. ([plans == distr]) give indices units assigned district distr iteration. function must return single scalar plan - district combination, value 0 indicates penalty applied. users want penalize entire plan, can penalty function return scalar depend district. important fn use information precincts included distr, since case SMC precincts may assigned district (plan take value 0 precincts). flexibility constraint comes additional computational cost, since constraints written C++ performant.","code":""},{"path":"http://alarm-redist.org/redist/reference/constraints.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Sampling constraints — constraints","text":"","code":"data(iowa) iowa_map <- redist_map(iowa, existing_plan = cd_2010, pop_tol = 0.05) constr <- redist_constr(iowa_map) constr <- add_constr_splits(constr, strength = 1.5, admin = name) constr <- add_constr_grp_hinge(constr, strength = 100,     dem_08, tot_08, tgts_group = c(0.5, 0.6)) # encourage districts to have the same number of counties constr <- add_constr_custom(constr, strength = 1000, fn = function(plan, distr) {     # notice that we only use information on precincts in `distr`     abs(sum(plan == distr) - 99/4) }) print(constr) #> A <redist_constr> with 3 constraints #> • A splits constraint of strength 1.5 #> • A (hinge-type) group share constraint of strength 100 #>     group_pop : num [1:99] 1924 1118 3971 2970 1739 ... #>     total_pop : num [1:99] 4053 2206 7059 6176 3435 ... #>     tgts_group: num [1:2] 0.5 0.6 #> • A custom constraint of strength 1000 #>     fn:function (plan, distr)"},{"path":"http://alarm-redist.org/redist/reference/fl25.html","id":null,"dir":"Reference","previous_headings":"","what":"Florida 25 Precinct Shape File — fl25","title":"Florida 25 Precinct Shape File — fl25","text":"data set contains 25-precinct shapefile related data precinct. possible partitions 25 precincts three contiguous congressional districts stored fl25_enum, corresponding adjacency graph stored fl25_adj. generally useful demonstrating basic algorithms locally.","code":""},{"path":"http://alarm-redist.org/redist/reference/fl25.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Florida 25 Precinct Shape File — fl25","text":"","code":"data(\"fl25\")"},{"path":"http://alarm-redist.org/redist/reference/fl25.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Florida 25 Precinct Shape File — fl25","text":"sf data.frame containing columns useful data related redistricting process, subsetted real data Florida, sf geometry column. geoid Contains unique identifier precinct can matched full Florida dataset. pop Contains population precinct. vap Contains voting age population precinct. obama Contains 2012 presidential vote Obama. mccain Contains 2012 presidential vote McCain. TotPop Contains population precinct. Identical pop. BlackPop Contains black population precinct. HispPop Contains Hispanic population precinct. VAP Contains voting age population precinct. Identical vap. BlackVAP Contains voting age population black constituents precinct. HispVAP Contains voting age population hispanic constituents precinct. geometry Contains sf geometry precinct.","code":""},{"path":"http://alarm-redist.org/redist/reference/fl25.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Florida 25 Precinct Shape File — fl25","text":"Fifield, Benjamin, Michael Higgins, Kosuke Imai Alexander Tarr. (2016) \"New Automated Redistricting Simulator Using Markov Chain Monte Carlo.\" Working Paper. Available http://imai.princeton.edu/research/files/redist.pdf.","code":""},{"path":"http://alarm-redist.org/redist/reference/fl25.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Florida 25 Precinct Shape File — fl25","text":"","code":"data(fl25)"},{"path":"http://alarm-redist.org/redist/reference/fl250.html","id":null,"dir":"Reference","previous_headings":"","what":"Florida 250 Precinct Shape File — fl250","title":"Florida 250 Precinct Shape File — fl250","text":"data set contains 250 Precinct shapefile related data precinct.","code":""},{"path":"http://alarm-redist.org/redist/reference/fl250.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Florida 250 Precinct Shape File — fl250","text":"","code":"data(\"fl250\")"},{"path":"http://alarm-redist.org/redist/reference/fl250.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Florida 250 Precinct Shape File — fl250","text":"sf data.frame containing columns useful data related redistricting process, subsetted real data Florida, sf geometry column. geoid Contains unique identifier precinct can matched full Florida dataset. pop Contains population precinct. vap Contains voting age population precinct. obama Contains 2012 presidential vote Obama. mccain Contains 2012 presidential vote McCain. TotPop Contains population precinct. Identical pop. BlackPop Contains black population precinct. HispPop Contains Hispanic population precinct. VAP Contains voting age population precinct. Identical vap. BlackVAP Contains voting age population black constituents precinct. HispVAP Contains voting age population hispanic constituents precinct. geometry Contains sf geometry precinct.","code":""},{"path":"http://alarm-redist.org/redist/reference/fl250.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Florida 250 Precinct Shape File — fl250","text":"random 70 precinct connected subset Florida's precincts. introduced doi:10.1080/2330443X.2020.1791773","code":""},{"path":"http://alarm-redist.org/redist/reference/fl250.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Florida 250 Precinct Shape File — fl250","text":"Benjamin Fifield, Kosuke Imai, Jun Kawahara & Christopher T. Kenny (2020) Essential Role Empirical Validation Legislative Redistricting Simulation, Statistics Public Policy, 7:1, 52-68, doi:10.1080/2330443X.2020.1791773","code":""},{"path":"http://alarm-redist.org/redist/reference/fl250.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Florida 250 Precinct Shape File — fl250","text":"","code":"data(fl250)"},{"path":"http://alarm-redist.org/redist/reference/fl25_adj.html","id":null,"dir":"Reference","previous_headings":"","what":"Florida 25 Precinct File — fl25_adj","title":"Florida 25 Precinct File — fl25_adj","text":"data set contains 25-precinct shapefile related data precinct. possible partitions 25 precincts three contiguous congressional districts stored fl25_enum, corresponding adjacency graph stored fl25_adj.","code":""},{"path":"http://alarm-redist.org/redist/reference/fl25_adj.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Florida 25 Precinct File — fl25_adj","text":"list storing adjacency graph 25-precinct subset Florida.","code":""},{"path":"http://alarm-redist.org/redist/reference/fl25_adj.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Florida 25 Precinct File — fl25_adj","text":"Fifield, Benjamin, Michael Higgins, Kosuke Imai Alexander Tarr. (2016) \"New Automated Redistricting Simulator Using Markov Chain Monte Carlo.\" Working Paper. Available http://imai.princeton.edu/research/files/redist.pdf.","code":""},{"path":"http://alarm-redist.org/redist/reference/fl25_adj.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Florida 25 Precinct File — fl25_adj","text":"","code":"data(fl25_adj)"},{"path":"http://alarm-redist.org/redist/reference/fl25_enum.html","id":null,"dir":"Reference","previous_headings":"","what":"All Partitions of 25 Precincts into 3 Congressional Districts (No Population Constraint) — fl25_enum","title":"All Partitions of 25 Precincts into 3 Congressional Districts (No Population Constraint) — fl25_enum","text":"data set contains demographic geographic information 25 contiguous precincts state Florida. data lists possible partitions 25 precincts three contiguous congressional districts. 25-precinct shapefile may found fl25","code":""},{"path":"http://alarm-redist.org/redist/reference/fl25_enum.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"All Partitions of 25 Precincts into 3 Congressional Districts (No Population Constraint) — fl25_enum","text":"","code":"data(\"fl25_enum\")"},{"path":"http://alarm-redist.org/redist/reference/fl25_enum.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"All Partitions of 25 Precincts into 3 Congressional Districts (No Population Constraint) — fl25_enum","text":"list two entries: plans matrix containing every partition 25 precincts three contiguous congressional districts, population constraint. pop_dev vector containing maximum population deviation across three districts plan.","code":""},{"path":"http://alarm-redist.org/redist/reference/fl25_enum.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"All Partitions of 25 Precincts into 3 Congressional Districts (No Population Constraint) — fl25_enum","text":"Fifield, Benjamin, Michael Higgins, Kosuke Imai Alexander Tarr. (2016) \"New Automated Redistricting Simulator Using Markov Chain Monte Carlo.\" Working Paper. Available http://imai.princeton.edu/research/files/redist.pdf. Massey, Douglas Nancy Denton. (1987) \"Dimensions Social Segregation\". Social Forces.","code":""},{"path":"http://alarm-redist.org/redist/reference/fl25_enum.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"All Partitions of 25 Precincts into 3 Congressional Districts (No Population Constraint) — fl25_enum","text":"","code":"data(fl25_enum)"},{"path":"http://alarm-redist.org/redist/reference/fl70.html","id":null,"dir":"Reference","previous_headings":"","what":"Florida 70 Precinct Shape File — fl70","title":"Florida 70 Precinct Shape File — fl70","text":"data set contains 70 Precinct shapefile related data precinct.","code":""},{"path":"http://alarm-redist.org/redist/reference/fl70.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Florida 70 Precinct Shape File — fl70","text":"","code":"data(\"fl70\")"},{"path":"http://alarm-redist.org/redist/reference/fl70.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Florida 70 Precinct Shape File — fl70","text":"sf data.frame containing columns useful data related redistricting process, subsetted real data Florida, sf geometry column. geoid Contains unique identifier precinct can matched full Florida dataset. pop Contains population precinct. vap Contains voting age population precinct. obama Contains 2012 presidential vote Obama. mccain Contains 2012 presidential vote McCain. TotPop Contains population precinct. Identical pop. BlackPop Contains black population precinct. HispPop Contains Hispanic population precinct. VAP Contains voting age population precinct. Identical vap. BlackVAP Contains voting age population black constituents precinct. HispVAP Contains voting age population hispanic constituents precinct. geometry Contains sf geometry precinct.","code":""},{"path":"http://alarm-redist.org/redist/reference/fl70.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Florida 70 Precinct Shape File — fl70","text":"random 70 precinct connected subset Florida's precincts. introduced doi:10.1080/2330443X.2020.1791773","code":""},{"path":"http://alarm-redist.org/redist/reference/fl70.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Florida 70 Precinct Shape File — fl70","text":"Benjamin Fifield, Kosuke Imai, Jun Kawahara & Christopher T. Kenny (2020) Essential Role Empirical Validation Legislative Redistricting Simulation, Statistics Public Policy, 7:1, 52-68, doi:10.1080/2330443X.2020.1791773","code":""},{"path":"http://alarm-redist.org/redist/reference/fl70.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Florida 70 Precinct Shape File — fl70","text":"","code":"data(fl70)"},{"path":"http://alarm-redist.org/redist/reference/get_adj.html","id":null,"dir":"Reference","previous_headings":"","what":"Get and set the adjacency graph from a redist_map object — get_adj","title":"Get and set the adjacency graph from a redist_map object — get_adj","text":"Get set adjacency graph redist_map object","code":""},{"path":"http://alarm-redist.org/redist/reference/get_adj.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get and set the adjacency graph from a redist_map object — get_adj","text":"","code":"get_adj(x)  set_adj(x, adj)"},{"path":"http://alarm-redist.org/redist/reference/get_adj.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get and set the adjacency graph from a redist_map object — get_adj","text":"x redist_map object adj new adjacency list.","code":""},{"path":"http://alarm-redist.org/redist/reference/get_adj.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get and set the adjacency graph from a redist_map object — get_adj","text":"zero-indexed adjacency list (get_adj) modified redist_map object (set_adj)","code":""},{"path":"http://alarm-redist.org/redist/reference/get_existing.html","id":null,"dir":"Reference","previous_headings":"","what":"Extract the existing district assignment from a redist_map object — get_existing","title":"Extract the existing district assignment from a redist_map object — get_existing","text":"Extract existing district assignment redist_map object","code":""},{"path":"http://alarm-redist.org/redist/reference/get_existing.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Extract the existing district assignment from a redist_map object — get_existing","text":"","code":"get_existing(x)"},{"path":"http://alarm-redist.org/redist/reference/get_existing.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Extract the existing district assignment from a redist_map object — get_existing","text":"x redist_map object","code":""},{"path":"http://alarm-redist.org/redist/reference/get_existing.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Extract the existing district assignment from a redist_map object — get_existing","text":"integer vector district numbers","code":""},{"path":"http://alarm-redist.org/redist/reference/get_mh_acceptance_rate.html","id":null,"dir":"Reference","previous_headings":"","what":"Extract the Metropolis Hastings Acceptance Rate — get_mh_acceptance_rate","title":"Extract the Metropolis Hastings Acceptance Rate — get_mh_acceptance_rate","text":"Extract Metropolis Hastings Acceptance Rate","code":""},{"path":"http://alarm-redist.org/redist/reference/get_mh_acceptance_rate.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Extract the Metropolis Hastings Acceptance Rate — get_mh_acceptance_rate","text":"","code":"get_mh_acceptance_rate(plans)"},{"path":"http://alarm-redist.org/redist/reference/get_mh_acceptance_rate.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Extract the Metropolis Hastings Acceptance Rate — get_mh_acceptance_rate","text":"plans redist_plans object","code":""},{"path":"http://alarm-redist.org/redist/reference/get_mh_acceptance_rate.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Extract the Metropolis Hastings Acceptance Rate — get_mh_acceptance_rate","text":"numeric acceptance rate","code":""},{"path":"http://alarm-redist.org/redist/reference/get_plans_matrix.html","id":null,"dir":"Reference","previous_headings":"","what":"Extract the matrix of district assignments from a redistricting simulation — get_plans_matrix","title":"Extract the matrix of district assignments from a redistricting simulation — get_plans_matrix","text":"Extract matrix district assignments redistricting simulation","code":""},{"path":"http://alarm-redist.org/redist/reference/get_plans_matrix.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Extract the matrix of district assignments from a redistricting simulation — get_plans_matrix","text":"","code":"get_plans_matrix(x)  # S3 method for class 'redist_plans' as.matrix(x, ...)"},{"path":"http://alarm-redist.org/redist/reference/get_plans_matrix.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Extract the matrix of district assignments from a redistricting simulation — get_plans_matrix","text":"x redist_plans object ... ignored","code":""},{"path":"http://alarm-redist.org/redist/reference/get_plans_matrix.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Extract the matrix of district assignments from a redistricting simulation — get_plans_matrix","text":"matrix matrix","code":""},{"path":"http://alarm-redist.org/redist/reference/get_plans_weights.html","id":null,"dir":"Reference","previous_headings":"","what":"Extract the sampling weights from a redistricting simulation. — get_plans_weights","title":"Extract the sampling weights from a redistricting simulation. — get_plans_weights","text":"May NULL weights exist (MCMC optimization methods).","code":""},{"path":"http://alarm-redist.org/redist/reference/get_plans_weights.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Extract the sampling weights from a redistricting simulation. — get_plans_weights","text":"","code":"get_plans_weights(plans)  # S3 method for class 'redist_plans' weights(object, ...)"},{"path":"http://alarm-redist.org/redist/reference/get_plans_weights.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Extract the sampling weights from a redistricting simulation. — get_plans_weights","text":"plans, object redist_plans object ... Ignored.","code":""},{"path":"http://alarm-redist.org/redist/reference/get_plans_weights.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Extract the sampling weights from a redistricting simulation. — get_plans_weights","text":"numeric vector weights, additional attribute resampled indicating whether plans resampled according weights. weights resampled, returns weights resampling (.e., correspond resampled plans). numeric vector","code":""},{"path":"http://alarm-redist.org/redist/reference/get_pop_tol.html","id":null,"dir":"Reference","previous_headings":"","what":"Get and set the population tolerance from a redist_map object — get_pop_tol","title":"Get and set the population tolerance from a redist_map object — get_pop_tol","text":"Get set population tolerance redist_map object","code":""},{"path":"http://alarm-redist.org/redist/reference/get_pop_tol.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get and set the population tolerance from a redist_map object — get_pop_tol","text":"","code":"get_pop_tol(map)  set_pop_tol(map, pop_tol)"},{"path":"http://alarm-redist.org/redist/reference/get_pop_tol.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get and set the population tolerance from a redist_map object — get_pop_tol","text":"map redist_map object pop_tol population tolerance","code":""},{"path":"http://alarm-redist.org/redist/reference/get_pop_tol.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get and set the population tolerance from a redist_map object — get_pop_tol","text":"get_pop_tol, single numeric value, population tolerance seet_pop_tol, updated redist_map object","code":""},{"path":"http://alarm-redist.org/redist/reference/get_sampling_info.html","id":null,"dir":"Reference","previous_headings":"","what":"Extract the sampling information from a redistricting simulation — get_sampling_info","title":"Extract the sampling information from a redistricting simulation — get_sampling_info","text":"Extract sampling information redistricting simulation","code":""},{"path":"http://alarm-redist.org/redist/reference/get_sampling_info.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Extract the sampling information from a redistricting simulation — get_sampling_info","text":"","code":"get_sampling_info(plans)"},{"path":"http://alarm-redist.org/redist/reference/get_sampling_info.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Extract the sampling information from a redistricting simulation — get_sampling_info","text":"plans redist_plans object","code":""},{"path":"http://alarm-redist.org/redist/reference/get_sampling_info.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Extract the sampling information from a redistricting simulation — get_sampling_info","text":"list parameters information sampling problem.","code":""},{"path":"http://alarm-redist.org/redist/reference/get_target.html","id":null,"dir":"Reference","previous_headings":"","what":"Extract the target district population from a redist_map object — get_target","title":"Extract the target district population from a redist_map object — get_target","text":"Extract target district population redist_map object","code":""},{"path":"http://alarm-redist.org/redist/reference/get_target.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Extract the target district population from a redist_map object — get_target","text":"","code":"get_target(x)"},{"path":"http://alarm-redist.org/redist/reference/get_target.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Extract the target district population from a redist_map object — get_target","text":"x redist_map object","code":""},{"path":"http://alarm-redist.org/redist/reference/get_target.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Extract the target district population from a redist_map object — get_target","text":"single numeric value, target population","code":""},{"path":"http://alarm-redist.org/redist/reference/iowa.html","id":null,"dir":"Reference","previous_headings":"","what":"Iowa County File — iowa","title":"Iowa County File — iowa","text":"data contains geographic demographic information 99 counties state Iowa.","code":""},{"path":"http://alarm-redist.org/redist/reference/iowa.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Iowa County File — iowa","text":"","code":"data(\"iowa\")"},{"path":"http://alarm-redist.org/redist/reference/iowa.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Iowa County File — iowa","text":"sf tibble containing columns useful data related redistricting process fips FIPS code county. cd_2010 2010 congressional district assignments. pop total population precinct, according 2010 Census. white non-Hispanic white population precinct. black non-Hispanic Black population precinct. hisp Hispanic population (race) precinct. vap voting-age population precinct. wvap white voting-age population precinct. bvap Black voting-age population precinct. hvap Hispanic voting-age population precinct. tot_08 Number total votes president county 2008. dem_08 Number votes Barack Obama 2008. rep_08 Number votes John McCain 2008. region 28E agency regions counties. geometry sf geometry column containing geographic information.","code":""},{"path":"http://alarm-redist.org/redist/reference/iowa.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Iowa County File — iowa","text":"","code":"data(iowa) print(iowa) #> Simple feature collection with 99 features and 15 fields #> Geometry type: MULTIPOLYGON #> Dimension:     XY #> Bounding box:  xmin: 4081849 ymin: 2879102 xmax: 5834228 ymax: 4024957 #> Projected CRS: NAD83(HARN) / Iowa North (ftUS) #> First 10 features: #>     fips       name cd_2010    pop  white black hisp    vap  wvap bvap hvap #> 1  19001      Adair       3   7682   7507    11  101   5957  5860    5   53 #> 2  19003      Adams       3   4029   3922     8   37   3180  3109    6   22 #> 3  19005  Allamakee       1  14330  13325   109  757  11020 10430   82  425 #> 4  19007  Appanoose       2  12887  12470    55  181   9993  9745   40   99 #> 5  19009    Audubon       4   6119   6007     9   37   4780  4714    5   27 #> 6  19011     Benton       1  26076  25387    93  275  19430 19068   49  155 #> 7  19013 Black Hawk       1 131090 109968 11493 4907 102594 89541 7677 2865 #> 8  19015      Boone       4  26306  25194   202  505  20027 19448  103  260 #> 9  19017     Bremer       1  24276  23459   186  239  18763 18242  155  137 #> 10 19019   Buchanan       1  20958  20344    59  243  15282 14979   32  128 #>    tot_08 dem_08 rep_08    region                       geometry #> 1    4053   1924   2060     South MULTIPOLYGON (((4592338 328... #> 2    2206   1118   1046     South MULTIPOLYGON (((4528041 315... #> 3    7059   3971   2965 Northeast MULTIPOLYGON (((5422507 401... #> 4    6176   2970   3086     South MULTIPOLYGON (((5032545 306... #> 5    3435   1739   1634 Northwest MULTIPOLYGON (((4487363 341... #> 6   13712   7058   6447 Southeast MULTIPOLYGON (((5246216 357... #> 7   64775  39184  24662 Northeast MULTIPOLYGON (((5175640 369... #> 8   13929   7356   6293   Central MULTIPOLYGON (((4741174 354... #> 9   12871   6940   5741 Northeast MULTIPOLYGON (((5174636 379... #> 10  10338   6050   4139 Northeast MULTIPOLYGON (((5302846 370..."},{"path":"http://alarm-redist.org/redist/reference/is_contiguous.html","id":null,"dir":"Reference","previous_headings":"","what":"Check that a redist_map object is contiguous — is_contiguous","title":"Check that a redist_map object is contiguous — is_contiguous","text":"Check redist_map object contiguous","code":""},{"path":"http://alarm-redist.org/redist/reference/is_contiguous.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check that a redist_map object is contiguous — is_contiguous","text":"","code":"is_contiguous(x)"},{"path":"http://alarm-redist.org/redist/reference/is_contiguous.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check that a redist_map object is contiguous — is_contiguous","text":"x object","code":""},{"path":"http://alarm-redist.org/redist/reference/is_contiguous.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Check that a redist_map object is contiguous — is_contiguous","text":"TRUE contiguous.","code":""},{"path":"http://alarm-redist.org/redist/reference/is_county_split.html","id":null,"dir":"Reference","previous_headings":"","what":"Identify which counties are split by a plan — is_county_split","title":"Identify which counties are split by a plan — is_county_split","text":"Identify counties split plan","code":""},{"path":"http://alarm-redist.org/redist/reference/is_county_split.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Identify which counties are split by a plan — is_county_split","text":"","code":"is_county_split(plan, counties)"},{"path":"http://alarm-redist.org/redist/reference/is_county_split.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Identify which counties are split by a plan — is_county_split","text":"plan vector precinct/unit assignments counties vector county names county ids.","code":""},{"path":"http://alarm-redist.org/redist/reference/is_county_split.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Identify which counties are split by a plan — is_county_split","text":"logical vector TRUE precincts belonging counties split","code":""},{"path":"http://alarm-redist.org/redist/reference/last_plan.html","id":null,"dir":"Reference","previous_headings":"","what":"Extract the last plan from a set of plans — last_plan","title":"Extract the last plan from a set of plans — last_plan","text":"Extract last plan set plans","code":""},{"path":"http://alarm-redist.org/redist/reference/last_plan.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Extract the last plan from a set of plans — last_plan","text":"","code":"last_plan(plans)"},{"path":"http://alarm-redist.org/redist/reference/last_plan.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Extract the last plan from a set of plans — last_plan","text":"plans redist_plans object","code":""},{"path":"http://alarm-redist.org/redist/reference/last_plan.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Extract the last plan from a set of plans — last_plan","text":"integer vector containing final plan assignment.","code":""},{"path":"http://alarm-redist.org/redist/reference/match_numbers.html","id":null,"dir":"Reference","previous_headings":"","what":"Renumber districts to match an existing plan — match_numbers","title":"Renumber districts to match an existing plan — match_numbers","text":"District numbers simulated plans large random.  function attempts renumber districts across simulated plans match numbers provided plan, using Hungarian algorithm.","code":""},{"path":"http://alarm-redist.org/redist/reference/match_numbers.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Renumber districts to match an existing plan — match_numbers","text":"","code":"match_numbers(   data,   plan,   total_pop = attr(data, \"prec_pop\"),   col = \"pop_overlap\" )"},{"path":"http://alarm-redist.org/redist/reference/match_numbers.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Renumber districts to match an existing plan — match_numbers","text":"data redist_plans object. plan character vector giving name plan match (e.g., reference plan), integer vector containing plan . total_pop vector population counts. needed redist_plans objects. col name new column store vector population overlap reference plan: fraction total population district plan reference plan. Set NULL column created. renumbering options plan.","code":""},{"path":"http://alarm-redist.org/redist/reference/match_numbers.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Renumber districts to match an existing plan — match_numbers","text":"modified redist_plans object. New district numbers stored ordered factor variable district column. district numbers plan matrix match levels factor.","code":""},{"path":"http://alarm-redist.org/redist/reference/match_numbers.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Renumber districts to match an existing plan — match_numbers","text":"","code":"data(iowa)  iowa_map <- redist_map(iowa, existing_plan = cd_2010, pop_tol = 0.05) plans <- redist_smc(iowa_map, 100, silent = TRUE) match_numbers(plans, \"cd_2010\") #> A <redist_plans> containing 100 sampled plans and 1 reference plan #> Plans have 4 districts from a 99-unit map, and were drawn using Sequential #> Monte Carlo. #> With plans resampled from weights #> Plans matrix: int [1:99, 1:101] 1 1 2 3 4 2 2 4 2 2 ... #> # A tibble: 404 × 4 #>    draw    district total_pop pop_overlap #>    <fct>   <ord>        <dbl>       <dbl> #>  1 cd_2010 1           761612       1     #>  2 cd_2010 2           761548       1     #>  3 cd_2010 3           761624       1     #>  4 cd_2010 4           761571       1     #>  5 1       1           758881       0.657 #>  6 1       2           741379       0.657 #>  7 1       3           796636       0.657 #>  8 1       4           749459       0.657 #>  9 2       1           790031       0.824 #> 10 2       2           724485       0.824 #> # ℹ 394 more rows"},{"path":"http://alarm-redist.org/redist/reference/merge_by.html","id":null,"dir":"Reference","previous_headings":"","what":"Merge map units — merge_by","title":"Merge map units — merge_by","text":"performing county-level cores-based analysis often necessary merge several units together larger unit.  function performs operation, modifying adjacency graph needed attempting properly aggregate data columns.","code":""},{"path":"http://alarm-redist.org/redist/reference/merge_by.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Merge map units — merge_by","text":"","code":"merge_by(.data, ..., by_existing = TRUE, drop_geom = TRUE, collapse_chr = TRUE)"},{"path":"http://alarm-redist.org/redist/reference/merge_by.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Merge map units — merge_by","text":".data redist_map object ... <tidy-select> column(s) merge by_existing existing assignment present, whether also group drop_geom whether drop geometry column. Recommended, otherwise costly geometric merge required. collapse_chr TRUE, preserve character columns collapsing values. example, county name column Iowa might merged entries \"Cedar~Clinton~Des Moines\". Set FALSE drop character columns instead.","code":""},{"path":"http://alarm-redist.org/redist/reference/merge_by.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Merge map units — merge_by","text":"merged redist_map object","code":""},{"path":"http://alarm-redist.org/redist/reference/min_move_parity.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculates Sparse Population Moves to Minimize Population Deviation — min_move_parity","title":"Calculates Sparse Population Moves to Minimize Population Deviation — min_move_parity","text":"function computes minimal set population moves (e.g., 5 people district 1 district 3) maximally balance population districts. moves allowed districts share territory county, boundary adjustments guaranteed preserve unbroken county boundaries.","code":""},{"path":"http://alarm-redist.org/redist/reference/min_move_parity.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculates Sparse Population Moves to Minimize Population Deviation — min_move_parity","text":"","code":"min_move_parity(map, plan, counties = NULL, penalty = 0.2)"},{"path":"http://alarm-redist.org/redist/reference/min_move_parity.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculates Sparse Population Moves to Minimize Population Deviation — min_move_parity","text":"map redist_map plan integer vector containing plan balanced. Tidy-evaluated. counties optional vector counties, whose boundaries preserved. Tidy-evaluated. penalty larger value, encourage sparsity.","code":""},{"path":"http://alarm-redist.org/redist/reference/min_move_parity.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculates Sparse Population Moves to Minimize Population Deviation — min_move_parity","text":"list components: moves tibble describing population moves pop_old current district populations pop_new district populations moves","code":""},{"path":"http://alarm-redist.org/redist/reference/min_move_parity.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Calculates Sparse Population Moves to Minimize Population Deviation — min_move_parity","text":"","code":"data(iowa) iowa_map <- redist_map(iowa, existing_plan = cd_2010, pop_tol = 0.01) min_move_parity(iowa_map, cd_2010) #> $moves #> # A tibble: 3 × 3 #>    from    to  move #>   <int> <int> <dbl> #> 1     2     1    35 #> 2     4     1     5 #> 3     3     4    23 #>  #> $pop_old #> [1] 761548 761624 761612 761571 #>  #> $pop_new #> [1] 761588 761589 761589 761589 #>"},{"path":"http://alarm-redist.org/redist/reference/number_by.html","id":null,"dir":"Reference","previous_headings":"","what":"Renumber districts to match a quantity of interest — number_by","title":"Renumber districts to match a quantity of interest — number_by","text":"District numbers simulated plans large random.  function renumber districts across simulated plans order provided quantity interest.","code":""},{"path":"http://alarm-redist.org/redist/reference/number_by.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Renumber districts to match a quantity of interest — number_by","text":"","code":"number_by(data, x, desc = FALSE)"},{"path":"http://alarm-redist.org/redist/reference/number_by.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Renumber districts to match a quantity of interest — number_by","text":"data redist_plans object x <data-masking> quantity interest. desc TRUE district sorted descending order.","code":""},{"path":"http://alarm-redist.org/redist/reference/number_by.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Renumber districts to match a quantity of interest — number_by","text":"modified redist_plans object. New district numbers stored ordered factor variable district column. district numbers plan matrix match levels factor.","code":""},{"path":"http://alarm-redist.org/redist/reference/pl.html","id":null,"dir":"Reference","previous_headings":"","what":"Access the Current redist_plans() Object — pl","title":"Access the Current redist_plans() Object — pl","text":"Useful inside piped expressions dplyr functions.","code":""},{"path":"http://alarm-redist.org/redist/reference/pl.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Access the Current redist_plans() Object — pl","text":"","code":"pl()"},{"path":"http://alarm-redist.org/redist/reference/pl.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Access the Current redist_plans() Object — pl","text":"redist_plans object, NULL called inside dplyr function.","code":""},{"path":"http://alarm-redist.org/redist/reference/pl.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Access the Current redist_plans() Object — pl","text":"","code":"pl() #> NULL"},{"path":"http://alarm-redist.org/redist/reference/plans_diversity.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate the diversity of a set of plans — plans_diversity","title":"Calculate the diversity of a set of plans — plans_diversity","text":"Returns -diagonal elements variation information distance matrix sample plans, can used diagnostic measure assess diversity set plans. exact scale varies depending number precincts districts, generally diversity good values greater 0.5. Conversely, many values close zero, sample many similar plans may good approximation target distribution.","code":""},{"path":"http://alarm-redist.org/redist/reference/plans_diversity.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate the diversity of a set of plans — plans_diversity","text":"","code":"plans_diversity(   plans,   chains = 1,   n_max = 100,   ncores = 1,   total_pop = attr(plans, \"prec_pop\") )"},{"path":"http://alarm-redist.org/redist/reference/plans_diversity.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate the diversity of a set of plans — plans_diversity","text":"plans redist_plans object. chains plans objects multiple chains, ones compute diversity . Defaults first. Specify \"\" use chains. n_max maximum number plans sample computing distances. Larger numbers less sampling error require computation time. ncores number cores use computing distances. total_pop vector precinct populations. Used computing variation information. provided, equal population precincts assumed, .e. VI computed respect precincts , population.","code":""},{"path":"http://alarm-redist.org/redist/reference/plans_diversity.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate the diversity of a set of plans — plans_diversity","text":"numeric vector -diagonal variation information distances.","code":""},{"path":"http://alarm-redist.org/redist/reference/plans_diversity.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Calculate the diversity of a set of plans — plans_diversity","text":"","code":"data(iowa) ia <- redist_map(iowa, existing_plan = cd_2010, pop_tol = 0.01) plans <- redist_smc(ia, 100, silent = TRUE) hist(plans_diversity(plans))"},{"path":"http://alarm-redist.org/redist/reference/plot.redist_classified.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot a plan classification — plot.redist_classified","title":"Plot a plan classification — plot.redist_classified","text":"Plot plan classification","code":""},{"path":"http://alarm-redist.org/redist/reference/plot.redist_classified.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot a plan classification — plot.redist_classified","text":"","code":"# S3 method for class 'redist_classified' plot(x, plans, shp, type = \"fill\", which = NULL, ...)"},{"path":"http://alarm-redist.org/redist/reference/plot.redist_classified.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot a plan classification — plot.redist_classified","text":"x redist_classified object, output classify_plans(). plans redist_plans object. shp shapefile redist_map object. type either \"line\" \"fill\". Passed compare_plans() plot. indices splits plot. Defaults ... passed compare_plans()","code":""},{"path":"http://alarm-redist.org/redist/reference/plot.redist_classified.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot a plan classification — plot.redist_classified","text":"ggplot comparison plot","code":""},{"path":"http://alarm-redist.org/redist/reference/plot.redist_constr.html","id":null,"dir":"Reference","previous_headings":"","what":"Visualize constraints — plot.redist_constr","title":"Visualize constraints — plot.redist_constr","text":"Plots constraint strength versus running variable. Currently supports visualizing grp_hinge, grp_inv_hinge, grp_pow constraints.","code":""},{"path":"http://alarm-redist.org/redist/reference/plot.redist_constr.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Visualize constraints — plot.redist_constr","text":"","code":"# S3 method for class 'redist_constr' plot(x, y, type = \"group\", xlim = c(0, 1), ...)"},{"path":"http://alarm-redist.org/redist/reference/plot.redist_constr.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Visualize constraints — plot.redist_constr","text":"x redist_constr object. y Ignored. type type constraint visualize. Currently supports \"group\", visualizing constraint strength group share. xlim Range group shares visualize. ... additional arguments (ignored)","code":""},{"path":"http://alarm-redist.org/redist/reference/plot.redist_constr.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Visualize constraints — plot.redist_constr","text":"ggplot object","code":""},{"path":"http://alarm-redist.org/redist/reference/plot.redist_constr.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Visualize constraints — plot.redist_constr","text":"","code":"data(iowa) iowa_map <- redist_map(iowa, existing_plan = cd_2010, pop_tol = 0.05) constr <- redist_constr(iowa_map) constr <- add_constr_grp_hinge(constr, strength = 30,                                dem_08, tot_08, tgts_group = 0.5) constr <- add_constr_grp_hinge(constr, strength = -20,                                dem_08, tot_08, tgts_group = 0.3) plot(constr)"},{"path":"http://alarm-redist.org/redist/reference/plot.redist_map.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot a redist_map — plot.redist_map","title":"Plot a redist_map — plot.redist_map","text":"Plot redist_map","code":""},{"path":"http://alarm-redist.org/redist/reference/plot.redist_map.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot a redist_map — plot.redist_map","text":"","code":"# S3 method for class 'redist_map' plot(x, fill = NULL, by_distr = FALSE, adj = FALSE, ...)"},{"path":"http://alarm-redist.org/redist/reference/plot.redist_map.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot a redist_map — plot.redist_map","text":"x redist_map object fill <data-masking> present, used color map units. using data masking, may need explicitly name argument fill=... non-interactive contexts avoid S3 generic issues. by_distr TRUE fill missing , color district indicate fill variable shading. adj TRUE, force plotting adjacency graph. Overrides by_distr. ... passed redist.plot.map (redist.plot.adj adj=TRUE). Useful parameters may include zoom_to, boundaries, title.","code":""},{"path":"http://alarm-redist.org/redist/reference/plot.redist_map.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot a redist_map — plot.redist_map","text":"ggplot2 object","code":""},{"path":"http://alarm-redist.org/redist/reference/plot.redist_map.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Plot a redist_map — plot.redist_map","text":"","code":"data(fl25) d <- redist_map(fl25, ndists = 3, pop_tol = 0.05) #> Projecting to CRS 3857 plot(d)  plot(d, BlackPop/pop)   data(fl25_enum) fl25$dist <- fl25_enum$plans[, 5118] d <- redist_map(fl25, existing_plan = dist) #> Projecting to CRS 3857 plot(d)"},{"path":"http://alarm-redist.org/redist/reference/plot.redist_plans.html","id":null,"dir":"Reference","previous_headings":"","what":"Summary plots for \\link{redist_plans} — plot.redist_plans","title":"Summary plots for \\link{redist_plans} — plot.redist_plans","text":"arguments passed, defaults plotting sampling weights redist_plans object. weights exist, plots district populations.","code":""},{"path":"http://alarm-redist.org/redist/reference/plot.redist_plans.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Summary plots for \\link{redist_plans} — plot.redist_plans","text":"","code":"# S3 method for class 'redist_plans' plot(x, ..., type = \"distr_qtys\")"},{"path":"http://alarm-redist.org/redist/reference/plot.redist_plans.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Summary plots for \\link{redist_plans} — plot.redist_plans","text":"x redist_plans object. ... passed underlying function type name plotting function use. redist.plot., prepended ; e.g., use type=\"plans\" call redist.plot.plans.","code":""},{"path":"http://alarm-redist.org/redist/reference/prec_assignment.html","id":null,"dir":"Reference","previous_headings":"","what":"Extract the district assignments for a precinct across all simulated plans — prec_assignment","title":"Extract the district assignments for a precinct across all simulated plans — prec_assignment","text":"Extract district assignments precinct across simulated plans","code":""},{"path":"http://alarm-redist.org/redist/reference/prec_assignment.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Extract the district assignments for a precinct across all simulated plans — prec_assignment","text":"","code":"prec_assignment(prec, .data = pl())"},{"path":"http://alarm-redist.org/redist/reference/prec_assignment.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Extract the district assignments for a precinct across all simulated plans — prec_assignment","text":"prec precinct number .data redist_plans object","code":""},{"path":"http://alarm-redist.org/redist/reference/prec_assignment.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Extract the district assignments for a precinct across all simulated plans — prec_assignment","text":"integer vector, row plans matrix","code":""},{"path":"http://alarm-redist.org/redist/reference/prec_cooccurrence.html","id":null,"dir":"Reference","previous_headings":"","what":"Compute a matrix of precinct co-occurrences — prec_cooccurrence","title":"Compute a matrix of precinct co-occurrences — prec_cooccurrence","text":"map n precincts Returns n--n matrix, entry measures fraction plans row column precincts district.","code":""},{"path":"http://alarm-redist.org/redist/reference/prec_cooccurrence.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compute a matrix of precinct co-occurrences — prec_cooccurrence","text":"","code":"prec_cooccurrence(plans, which = NULL, sampled_only = TRUE, ncores = 1)"},{"path":"http://alarm-redist.org/redist/reference/prec_cooccurrence.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compute a matrix of precinct co-occurrences — prec_cooccurrence","text":"plans redist_plans object. <data-masking> plans compute co-occurrence .  Defaults . sampled_only TRUE, include reference plans. ncores number parallel cores use computation.","code":""},{"path":"http://alarm-redist.org/redist/reference/prec_cooccurrence.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Compute a matrix of precinct co-occurrences — prec_cooccurrence","text":"symmetric matrix size number precincts.","code":""},{"path":"http://alarm-redist.org/redist/reference/print.redist_classified.html","id":null,"dir":"Reference","previous_headings":"","what":"Print redist_classified objects — print.redist_classified","title":"Print redist_classified objects — print.redist_classified","text":"Print redist_classified objects","code":""},{"path":"http://alarm-redist.org/redist/reference/print.redist_classified.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Print redist_classified objects — print.redist_classified","text":"","code":"# S3 method for class 'redist_classified' print(x, ...)"},{"path":"http://alarm-redist.org/redist/reference/print.redist_classified.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Print redist_classified objects — print.redist_classified","text":"x redist_classified object ... additional arguments","code":""},{"path":"http://alarm-redist.org/redist/reference/print.redist_classified.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Print redist_classified objects — print.redist_classified","text":"prints console","code":""},{"path":"http://alarm-redist.org/redist/reference/print.redist_constr.html","id":null,"dir":"Reference","previous_headings":"","what":"Generic to print redist_constr — print.redist_constr","title":"Generic to print redist_constr — print.redist_constr","text":"Generic print redist_constr","code":""},{"path":"http://alarm-redist.org/redist/reference/print.redist_constr.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generic to print redist_constr — print.redist_constr","text":"","code":"# S3 method for class 'redist_constr' print(x, header = TRUE, details = TRUE, ...)"},{"path":"http://alarm-redist.org/redist/reference/print.redist_constr.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generic to print redist_constr — print.redist_constr","text":"x redist_constr header FALSE, suppress introduction / header line details FALSE, suppress details constraint ... additional arguments","code":""},{"path":"http://alarm-redist.org/redist/reference/print.redist_constr.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generic to print redist_constr — print.redist_constr","text":"Prints console returns input redist_constr","code":""},{"path":"http://alarm-redist.org/redist/reference/print.redist_map.html","id":null,"dir":"Reference","previous_headings":"","what":"Generic to print redist_map — print.redist_map","title":"Generic to print redist_map — print.redist_map","text":"Generic print redist_map","code":""},{"path":"http://alarm-redist.org/redist/reference/print.redist_map.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generic to print redist_map — print.redist_map","text":"","code":"# S3 method for class 'redist_map' print(x, ...)"},{"path":"http://alarm-redist.org/redist/reference/print.redist_map.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generic to print redist_map — print.redist_map","text":"x redist_map ... additional arguments","code":""},{"path":"http://alarm-redist.org/redist/reference/print.redist_map.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generic to print redist_map — print.redist_map","text":"Prints console returns input redist_map","code":""},{"path":"http://alarm-redist.org/redist/reference/print.redist_plans.html","id":null,"dir":"Reference","previous_headings":"","what":"Print method for redist_plans — print.redist_plans","title":"Print method for redist_plans — print.redist_plans","text":"Print method redist_plans","code":""},{"path":"http://alarm-redist.org/redist/reference/print.redist_plans.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Print method for redist_plans — print.redist_plans","text":"","code":"# S3 method for class 'redist_plans' print(x, ...)"},{"path":"http://alarm-redist.org/redist/reference/print.redist_plans.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Print method for redist_plans — print.redist_plans","text":"x redist_plans object ... additional arguments (ignored)","code":""},{"path":"http://alarm-redist.org/redist/reference/print.redist_plans.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Print method for redist_plans — print.redist_plans","text":"original object, invisibly.","code":""},{"path":"http://alarm-redist.org/redist/reference/proj.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate Projective Distributions, Averages, and Contrasts for a Summary Statistic — proj","title":"Calculate Projective Distributions, Averages, and Contrasts for a Summary Statistic — proj","text":"projective distribution district-level summary statistic (McCartan 2024) distribution values statistic across set plans district precinct belongs . projective average statistic average value projective distribution precinct. projective contrast difference projective average single plan projective average ensemble sampled plans. important properly account variation projective distribution looking projective contrasts. pfdr argument proj_contr() calculate q-values precinct can used control positive false discovery rate (pFDR) avoid misled variation. See redist.plot.contr_pfdr() way automatically plot projective contrasts false discovery rate control.","code":""},{"path":"http://alarm-redist.org/redist/reference/proj.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate Projective Distributions, Averages, and Contrasts for a Summary Statistic — proj","text":"","code":"proj_distr(plans, x, draws = NA)  proj_avg(plans, x, draws = NA)  proj_contr(plans, x, compare = NA, draws = NA, norm = FALSE, pfdr = FALSE)"},{"path":"http://alarm-redist.org/redist/reference/proj.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate Projective Distributions, Averages, and Contrasts for a Summary Statistic — proj","text":"plans redist_plans object. x district-level summary statistic calculated plans object. Tidy-evaluated plans. draws draws/samples include projective distribution. NULL include draws, including reference plans. special value NA include sampled (non-reference) draws. integer, logical, character vector indicating specific draws may also provided. compare plan compare rest ensemble (controlled draws). Defaults first reference plan, exists norm TRUE, normalize contrast standard deviation projective distribution, precinct-wise. make projective contrast terms z-scores. pfdr TRUE, calculate q-values precinct can used control positive false discovery rate (pFDR) given level thresholding q-values level. Q-values stored \"q\" attribute returned vector. Requires matrixStats package installed.","code":""},{"path":"http://alarm-redist.org/redist/reference/proj.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate Projective Distributions, Averages, and Contrasts for a Summary Statistic — proj","text":"proj_distr: matrix row precinct (row map object) column every draw described draws. proj_avg: numeric vector length matching number precincts. proj_contr: numeric vector length matching number precincts, optionally \"q\" attribute containing q-values.","code":""},{"path":"http://alarm-redist.org/redist/reference/proj.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Calculate Projective Distributions, Averages, and Contrasts for a Summary Statistic — proj","text":"McCartan, C. (2024). Projective Averages Summarizing Redistricting Ensembles. arXiv preprint. Available https://arxiv.org/pdf/2401.06381.","code":""},{"path":"http://alarm-redist.org/redist/reference/proj.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Calculate Projective Distributions, Averages, and Contrasts for a Summary Statistic — proj","text":"","code":"data(iowa) map <- redist_map(iowa, existing_plan = cd_2010, pop_tol = 0.01) plans <- redist_smc(map, 50, silent = TRUE) plans$dem <- group_frac(map, dem_08, tot_08, plans)  proj_distr(plans, dem)[ ,1] # a 99-by-50 matrix, just showing first column #>  [1] 0.4545314 0.4545314 0.5528518 0.5528518 0.4545314 0.5528518 0.5528518 #>  [8] 0.5395505 0.5528518 0.6058231 0.4545314 0.5528518 0.4545314 0.5395505 #> [15] 0.4545314 0.6058231 0.5528518 0.4545314 0.5528518 0.4545314 0.4545314 #> [22] 0.6058231 0.6058231 0.4545314 0.5395505 0.5528518 0.4545314 0.6058231 #> [29] 0.5528518 0.4545314 0.6058231 0.4545314 0.5528518 0.5528518 0.5395505 #> [36] 0.4545314 0.5395505 0.5528518 0.5395505 0.4545314 0.4545314 0.5395505 #> [43] 0.4545314 0.5528518 0.5528518 0.4545314 0.4545314 0.5528518 0.6058231 #> [50] 0.5395505 0.5528518 0.6058231 0.6058231 0.5528518 0.4545314 0.5528518 #> [57] 0.6058231 0.5528518 0.4545314 0.4545314 0.4545314 0.5528518 0.5395505 #> [64] 0.5528518 0.4545314 0.5528518 0.4545314 0.5528518 0.4545314 0.5528518 #> [71] 0.4545314 0.4545314 0.4545314 0.4545314 0.4545314 0.4545314 0.5395505 #> [78] 0.4545314 0.5528518 0.4545314 0.5395505 0.6058231 0.4545314 0.4545314 #> [85] 0.5395505 0.5528518 0.4545314 0.4545314 0.5528518 0.5528518 0.4545314 #> [92] 0.5528518 0.4545314 0.4545314 0.4545314 0.5528518 0.4545314 0.5528518 #> [99] 0.4545314 plot(map, proj_avg(plans, dem))  plot(map, proj_contr(plans, dem))  plot(map, proj_contr(plans, dem, compare=\"cd_2010\"))"},{"path":"http://alarm-redist.org/redist/reference/pullback.html","id":null,"dir":"Reference","previous_headings":"","what":"Pull back plans to unmerged units — pullback","title":"Pull back plans to unmerged units — pullback","text":"Merging map units merge_by dplyr::summarize changes indexing unit.  Use function take set redistricting plans redist algorithm re-index compatible original set units.","code":""},{"path":"http://alarm-redist.org/redist/reference/pullback.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Pull back plans to unmerged units — pullback","text":"","code":"pullback(plans, map = NULL)"},{"path":"http://alarm-redist.org/redist/reference/pullback.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Pull back plans to unmerged units — pullback","text":"plans redist_plans object map optionally, redist_map object, used set new population vector","code":""},{"path":"http://alarm-redist.org/redist/reference/pullback.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Pull back plans to unmerged units — pullback","text":"new, re-indexed, redist_plans object","code":""},{"path":"http://alarm-redist.org/redist/reference/rbind.redist_plans.html","id":null,"dir":"Reference","previous_headings":"","what":"Combine multiple sets of redistricting plans — rbind.redist_plans","title":"Combine multiple sets of redistricting plans — rbind.redist_plans","text":"works sets compatible—generated map, number districts.  Sets plans indexed chain column.","code":""},{"path":"http://alarm-redist.org/redist/reference/rbind.redist_plans.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Combine multiple sets of redistricting plans — rbind.redist_plans","text":"","code":"# S3 method for class 'redist_plans' rbind(..., deparse.level = 1)"},{"path":"http://alarm-redist.org/redist/reference/rbind.redist_plans.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Combine multiple sets of redistricting plans — rbind.redist_plans","text":"... redist_plans objects combine.  named arguments provided, names used chain column; otherwise, numbers used chain column. deparse.level Ignored.","code":""},{"path":"http://alarm-redist.org/redist/reference/rbind.redist_plans.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Combine multiple sets of redistricting plans — rbind.redist_plans","text":"new redist_plans object.","code":""},{"path":"http://alarm-redist.org/redist/reference/redist-package.html","id":null,"dir":"Reference","previous_headings":"","what":"redist: Simulation Methods for Legislative Redistricting — redist-package","title":"redist: Simulation Methods for Legislative Redistricting — redist-package","text":"Enables researchers sample redistricting plans pre-specified target distribution using Sequential Monte Carlo Markov Chain Monte Carlo algorithms. package allows implementation various constraints redistricting process geographic compactness population parity requirements. Tools analysis computation various summary statistics plotting functionality also included. package implements SMC algorithm McCartan Imai (2023) doi:10.1214/23-AOAS1763 , enumeration algorithm Fifield, Imai, Kawahara, Kenny (2020) doi:10.1080/2330443X.2020.1791773 , Flip MCMC algorithm Fifield, Higgins, Imai Tarr (2020) doi:10.1080/10618600.2020.1739532 , Merge-split/Recombination algorithms Carter et al. (2019) doi:10.48550/arXiv.1911.01503  DeFord et al. (2021) doi:10.1162/99608f92.eb30390f , Short-burst optimization algorithm Cannon et al. (2020) doi:10.48550/arXiv.2011.02288 .","code":""},{"path":[]},{"path":"http://alarm-redist.org/redist/reference/redist-package.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"redist: Simulation Methods for Legislative Redistricting — redist-package","text":"Maintainer: Christopher T. Kenny ctkenny@proton.(ORCID) Authors: Cory McCartan mccartan@psu.edu (ORCID) Ben Fifield benfifield@gmail.com (ORCID) Kosuke Imai imai@harvard.edu (ORCID) contributors: Jun Kawahara jkawahara@.kyoto-u.ac.jp [contributor] Alexander Tarr atarr@princeton.edu [contributor] Michael Higgins mikehiggins@k-state.edu [contributor]","code":""},{"path":"http://alarm-redist.org/redist/reference/redist.adjacency.html","id":null,"dir":"Reference","previous_headings":"","what":"Adjacency List functionality for redist — redist.adjacency","title":"Adjacency List functionality for redist — redist.adjacency","text":"Creates adjacency list zero indexed skips","code":""},{"path":"http://alarm-redist.org/redist/reference/redist.adjacency.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Adjacency List functionality for redist — redist.adjacency","text":"","code":"redist.adjacency(shp, plan)"},{"path":"http://alarm-redist.org/redist/reference/redist.adjacency.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Adjacency List functionality for redist — redist.adjacency","text":"shp SpatialPolygonsDataFrame sf object. Required. plan numeric vector (one map) matrix one row","code":""},{"path":"http://alarm-redist.org/redist/reference/redist.adjacency.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Adjacency List functionality for redist — redist.adjacency","text":"Adjacency list","code":""},{"path":"http://alarm-redist.org/redist/reference/redist.calc.frontier.size.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate Frontier Size — redist.calc.frontier.size","title":"Calculate Frontier Size — redist.calc.frontier.size","text":"Calculate Frontier Size","code":""},{"path":"http://alarm-redist.org/redist/reference/redist.calc.frontier.size.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate Frontier Size — redist.calc.frontier.size","text":"","code":"redist.calc.frontier.size(ordered_path)"},{"path":"http://alarm-redist.org/redist/reference/redist.calc.frontier.size.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate Frontier Size — redist.calc.frontier.size","text":"ordered_path path ordered path created redist.prep.enumpart","code":""},{"path":"http://alarm-redist.org/redist/reference/redist.calc.frontier.size.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate Frontier Size — redist.calc.frontier.size","text":"List, four objects max numeric, maximum frontier size average numeric, average frontier size average_sq numeric, average((frontier size)^2) sequence numeric vector, lists sizes every frontier","code":""},{"path":"http://alarm-redist.org/redist/reference/redist.calc.frontier.size.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Calculate Frontier Size — redist.calc.frontier.size","text":"","code":"if (FALSE) { # \\dontrun{ data(fl25) adj <- redist.adjacency(fl25) redist.prep.enumpart(adj, \"unordered\", \"ordered\") redist.calc.frontier.size(\"ordered\") } # }"},{"path":"http://alarm-redist.org/redist/reference/redist.coarsen.adjacency.html","id":null,"dir":"Reference","previous_headings":"","what":"Coarsen Adjacency List — redist.coarsen.adjacency","title":"Coarsen Adjacency List — redist.coarsen.adjacency","text":"Coarsen Adjacency List","code":""},{"path":"http://alarm-redist.org/redist/reference/redist.coarsen.adjacency.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Coarsen Adjacency List — redist.coarsen.adjacency","text":"","code":"redist.coarsen.adjacency(adj, groups)"},{"path":"http://alarm-redist.org/redist/reference/redist.coarsen.adjacency.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Coarsen Adjacency List — redist.coarsen.adjacency","text":"adj zero-indexed adjacency list. Required. groups integer vector elements adjacency group","code":""},{"path":"http://alarm-redist.org/redist/reference/redist.coarsen.adjacency.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Coarsen Adjacency List — redist.coarsen.adjacency","text":"adjacency list coarsened","code":""},{"path":"http://alarm-redist.org/redist/reference/redist.combine.mpi.html","id":null,"dir":"Reference","previous_headings":"","what":"Combine successive runs of redist.mcmc.mpi — redist.combine.mpi","title":"Combine successive runs of redist.mcmc.mpi — redist.combine.mpi","text":"redist.combine.mpi used combine successive runs redist.mcmc.mpi single data object","code":""},{"path":"http://alarm-redist.org/redist/reference/redist.combine.mpi.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Combine successive runs of redist.mcmc.mpi — redist.combine.mpi","text":"","code":"redist.combine.mpi(savename, nloop, nthin, tempadj)"},{"path":"http://alarm-redist.org/redist/reference/redist.combine.mpi.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Combine successive runs of redist.mcmc.mpi — redist.combine.mpi","text":"savename name (without loop .RData suffix) saved simulations. nloop number loops combined. nthin much thin simulations combined. tempadj temperature adjacency object saved redist.mcmc.mpi.","code":""},{"path":"http://alarm-redist.org/redist/reference/redist.combine.mpi.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Combine successive runs of redist.mcmc.mpi — redist.combine.mpi","text":"redist.combine.mpi returns object class \"redist\". object redist list contains following components (inclusion components dependent whether tempering techniques used): plans Matrix congressional district assignments generated algorithm. row corresponds geographic unit, column corresponds simulation. distance_parity Vector containing maximum distance parity particular simulated redistricting plan. mhdecisions vector specifying whether proposed redistricting plan accepted (1) rejected (0) given iteration. mhprob vector containing Metropolis-Hastings acceptance probability iteration algorithm. pparam vector containing draw p parameter simulation, dictates number swaps attempted. constraint_pop vector containing value population constraint accepted redistricting plan. constraint_compact vector containing value compactness constraint accepted redistricting plan. constraint_vra vector containing value vra constraint accepted redistricting plan. constraint_similar vector containing value similarity constraint accepted redistricting plan. constraint_qps vector containing value QPS constraint accepted redistricting plan. beta_sequence vector containing value beta iteration algorithm. Returned tempering used. mhdecisions_beta vector specifying whether proposed beta value accepted (1) rejected (0) given iteration algorithm. Returned tempering used. mhprob_beta vector containing Metropolis-Hastings acceptance probability iteration algorithm. Returned tempering used.","code":""},{"path":"http://alarm-redist.org/redist/reference/redist.combine.mpi.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Combine successive runs of redist.mcmc.mpi — redist.combine.mpi","text":"function allows users combine multiple successive runs redist.mcmc.mpi single redist object analysis.","code":""},{"path":"http://alarm-redist.org/redist/reference/redist.combine.mpi.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Combine successive runs of redist.mcmc.mpi — redist.combine.mpi","text":"Fifield, Benjamin, Michael Higgins, Kosuke Imai Alexander Tarr. (2016) \"New Automated Redistricting Simulator Using Markov Chain Monte Carlo.\" Working Paper. Available http://imai.princeton.edu/research/files/redist.pdf.","code":""},{"path":"http://alarm-redist.org/redist/reference/redist.combine.mpi.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Combine successive runs of redist.mcmc.mpi — redist.combine.mpi","text":"","code":"if (FALSE) { # \\dontrun{ # Cannot run on machines without Rmpi data(fl25) data(fl25_enum) data(fl25_adj)  ## Code to run the simulations in Figure 4 in Fifield, Higgins, Imai and ## Tarr (2015)  ## Get an initial partition init_plan <- fl25_enum$plans[, 5118]  ## Run the algorithm redist.mcmc.mpi(adj = fl25_adj, total_pop = fl25$pop,     init_plan = init_plan, nsims = 10000, nloops = 2, savename = \"test\") out <- redist.combine.mpi(savename = \"test\", nloop = 2,     nthin = 10, tempadj = tempAdjMat) } # }"},{"path":"http://alarm-redist.org/redist/reference/redist.compactness.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate compactness measures for a set of plans — distr_compactness","title":"Calculate compactness measures for a set of plans — distr_compactness","text":"redist.compactness used compute different compactness statistics shapefile. currently computes Polsby-Popper, Schwartzberg score, Length-Width Ratio, Convex Hull score, Reock score, Boyce Clark Index, Fryer Holden score, Edges Removed number, log Spanning Trees.","code":""},{"path":"http://alarm-redist.org/redist/reference/redist.compactness.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate compactness measures for a set of plans — distr_compactness","text":"","code":"distr_compactness(map, measure = \"FracKept\", .data = cur_plans(), ...)  redist.compactness(   shp = NULL,   plans,   measure = c(\"PolsbyPopper\"),   total_pop = NULL,   adj = NULL,   draw = 1,   ncores = 1,   counties = NULL,   planarize = 3857,   ppRcpp,   perim_path,   perim_df )"},{"path":"http://alarm-redist.org/redist/reference/redist.compactness.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate compactness measures for a set of plans — distr_compactness","text":"map redist_map object measure vector string measure desired. \"PolsbyPopper\", \"Schwartzberg\", \"LengthWidth\", \"ConvexHull\", \"Reock\", \"BoyceClark\", \"FryerHolden\", \"EdgesRemoved\", \"FracKept\", \"logSpanningTree\" implemented. Defaults \"PolsbyPopper\". Use \"\" return implemented measures. .data redist_plans object ... passed redist.compactness shp SpatialPolygonsDataFrame sf object. Required unless \"EdgesRemoved\" \"logSpanningTree\" adjacency provided. plans numeric vector (one map) matrix one row precinct one column map. Required. total_pop numeric vector population every observation. necessary \"FryerHolden\" used measure. Defaults NULL. adj zero-indexed adjacency list. used \"PolsbyPopper\", EdgesRemoved\" \"logSpanningTree\". Created redist.adjacency supplied needed. Default NULL. draw numeric specify draw number. Defaults 1 one map provided column number multiple maps given. Can also take factor input, become draw column output length matches number entries plans. plans input redist_plans object, extracts draw identifier. ncores Number cores use parallel computing. Default 1. counties numeric vector 1:ncounties corresponding counties. Required \"logSpanningTree\". planarize number, indicating CRS project shapefile latitude-longitude based. Set FALSE avoid planarizing. ppRcpp Boolean, whether run Polsby Popper Schwartzberg using Rcpp. higher upfront cost, quickly becomes faster. Becomes TRUE ncol(district_membership > 8) manually set. perim_path checks Rds, rds exists path, creates rds borders saves . can created advance redistmetrics::prep_perims(). perim_df dataframe output redistmetrics::prep_perims().","code":""},{"path":"http://alarm-redist.org/redist/reference/redist.compactness.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate compactness measures for a set of plans — distr_compactness","text":"tibble column specifies district, column specified measure, column specifies map number.","code":""},{"path":"http://alarm-redist.org/redist/reference/redist.compactness.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Calculate compactness measures for a set of plans — distr_compactness","text":"function computes specified compactness scores map.  one shape specified single district, combines , necessary, computes one score district. Polsby-Popper computed $$\\frac{4*\\pi*(d)}{P(d)^2}$$ area function, district d, P perimeter function.  values 0 1, larger values compact. Schwartzberg computed $$\\frac{P(d)}{2*\\pi*\\sqrt{\\frac{(d)}{\\pi}}}$$ area function, district d, P perimeter function.  values 0 1, larger values compact. Length Width ratio computed $$\\frac{length}{width}$$ length shorter maximum x distance maximum y distance. Width longer two values.  values 0 1, larger values compact. Convex Hull score computed $$\\frac{(d)}{(CVH)}$$ area function, d district, CVH convex hull district. values 0 1, larger values compact. Reock score computed $$\\frac{(d)}{(MBC)}$$ area function, d district, MBC minimum bounding circle district. values 0 1, larger values compact. Boyce Clark Index computed $$1 - \\sum_{1}^{16}\\{\\frac{|\\frac{r_i}{\\sum_ir_i}*100-6.25 |\\}}{200}$$. \\(r_i\\) distances 16 radii computed geometric centroid shape outward point shape intersects radii, centroid contained within shape.  centroid lies outside shape, point surface used, naturally incur penalty score.  values 0 1, larger values compact. Fryer Holden score district computed $$Pop\\odot D(precinct)^2$$, \\(Pop\\) population product matrix.  element product -th j-th precinct's populations.  D represents distance, matrix distance precinct.  fully compute index, map, sum values used numerator. denominator can calculated full enumeration districts smallest calculated numerator. produces large numbers, smaller values compact. log spanning tree measure logarithm product number spanning trees can drawn district. edges removed measure number edges removed underlying adjacency graph. smaller number edges removed compact. fraction kept measure fraction edges removed underlying adjacency graph. takes values 0 - 1, 1 compact.","code":""},{"path":"http://alarm-redist.org/redist/reference/redist.compactness.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Calculate compactness measures for a set of plans — distr_compactness","text":"Boyce, R., & Clark, W. 1964. Concept Shape Geography. Geographical Review, 54(4), 561-572. Cox, E. 1927. Method Assigning Numerical Percentage Values Degree Roundness Sand Grains. Journal Paleontology, 1(3), 179-183. Fryer R, Holden R. 2011. Measuring Compactness Political Districting Plans. Journal Law Economics. Harris, Curtis C. 1964. “scientific method districting”. Behavioral Science 3(9), 219–225. Maceachren, . 1985. Compactness Geographic Shape: Comparison Evaluation Measures. Geografiska Annaler. Series B, Human Geography, 67(1), 53-67. Polsby, Daniel D., Robert D. Popper. 1991. “Third Criterion: Compactness procedural safeguard partisan gerrymandering.” Yale Law & Policy Review 9 (2): 301–353. Reock, E. 1961. Note: Measuring Compactness Requirement Legislative Apportionment. Midwest Journal Political Science, 5(1), 70-74. Schwartzberg, Joseph E. 1966. Reapportionment, Gerrymanders, Notion Compactness. Minnesota Law Review. 1701.","code":""},{"path":"http://alarm-redist.org/redist/reference/redist.compactness.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Calculate compactness measures for a set of plans — distr_compactness","text":"","code":"data(fl25) data(fl25_enum)  plans_05 <- fl25_enum$plans[, fl25_enum$pop_dev <= 0.05]  # old redist.compactness( #     shp = fl25, plans = plans_05[, 1:3], #     measure = c(\"PolsbyPopper\", \"EdgesRemoved\") # ) comp_polsby(plans_05[, 1:3], fl25) #> [1] 0.3973494 0.2458002 0.2347778 0.2844531 0.1274875 0.2347778 0.3712206 #> [8] 0.2337005 0.2072902 comp_edges_rem(plans_05[, 1:3], fl25, fl25$adj) #> [1] 0 0 0 0 0 0 0 0 0"},{"path":"http://alarm-redist.org/redist/reference/redist.competitiveness.html","id":null,"dir":"Reference","previous_headings":"","what":"Compute Competitiveness — competitiveness","title":"Compute Competitiveness — competitiveness","text":"Currently implements competitiveness function equation (5) Cho & Liu 2016.","code":""},{"path":"http://alarm-redist.org/redist/reference/redist.competitiveness.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compute Competitiveness — competitiveness","text":"","code":"competitiveness(map, rvote, dvote, .data = cur_plans())  redist.competitiveness(plans, rvote, dvote, alpha = 1, beta = 1)"},{"path":"http://alarm-redist.org/redist/reference/redist.competitiveness.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compute Competitiveness — competitiveness","text":"map redist_map object rvote numeric vector Republican vote precinct. dvote numeric vector Democratic vote precinct. .data redist_plans object plans numeric vector (one map) matrix one row precinct one column map. Required. alpha numeric value alpha parameter talisman metric beta numeric value beta parameter talisman metric","code":""},{"path":"http://alarm-redist.org/redist/reference/redist.competitiveness.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Compute Competitiveness — competitiveness","text":"Numeric vector competitiveness scores","code":""},{"path":"http://alarm-redist.org/redist/reference/redist.competitiveness.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Compute Competitiveness — competitiveness","text":"","code":"data(fl25) data(fl25_enum)  plans_05 <- fl25_enum$plans[, fl25_enum$pop_dev <= 0.05] # old: comp <- redist.competitiveness(plans_05, fl25$mccain, fl25$obama) comp <- compet_talisman(plans_05, fl25, mccain, obama)"},{"path":"http://alarm-redist.org/redist/reference/redist.constraint.helper.html","id":null,"dir":"Reference","previous_headings":"","what":"Create Constraints for SMC — redist.constraint.helper","title":"Create Constraints for SMC — redist.constraint.helper","text":"Create Constraints SMC","code":""},{"path":"http://alarm-redist.org/redist/reference/redist.constraint.helper.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create Constraints for SMC — redist.constraint.helper","text":"","code":"redist.constraint.helper(   constraints = \"vra\",   tgt_min = 0.55,   group_pop,   total_pop,   ndists,   nmmd,   strength_vra = 2500,   pow_vra = 1.5 )"},{"path":"http://alarm-redist.org/redist/reference/redist.constraint.helper.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create Constraints for SMC — redist.constraint.helper","text":"constraints Vector constraints include. Currently 'vra' implemented. tgt_min Defaults 0.55. 'vra' included, minority percent encourage district. group_pop vector populations subgroup interest. total_pop vector containing populations geographic unit. ndists total number districts. nmmd number majority minority districts target 'vra' constraint strength_vra strength 'vra' constraint. Defaults 2500. pow_vra exponent 'vra' constraint. Defaults 1.5.","code":""},{"path":"http://alarm-redist.org/redist/reference/redist.constraint.helper.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create Constraints for SMC — redist.constraint.helper","text":"list lists constraint selected","code":""},{"path":"http://alarm-redist.org/redist/reference/redist.county.id.html","id":null,"dir":"Reference","previous_headings":"","what":"Create County IDs — redist.county.id","title":"Create County IDs — redist.county.id","text":"Create County IDs","code":""},{"path":"http://alarm-redist.org/redist/reference/redist.county.id.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create County IDs — redist.county.id","text":"","code":"redist.county.id(counties)"},{"path":"http://alarm-redist.org/redist/reference/redist.county.id.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create County IDs — redist.county.id","text":"counties vector counties, required.","code":""},{"path":"http://alarm-redist.org/redist/reference/redist.county.id.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create County IDs — redist.county.id","text":"vector ID corresponds 1:n counties","code":""},{"path":"http://alarm-redist.org/redist/reference/redist.county.id.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create County IDs — redist.county.id","text":"","code":"set.seed(2) counties <- sample(c(rep(\"a\", 20), rep(\"b\", 5))) redist.county.id(counties) #>  [1] 2 1 1 2 1 1 1 1 1 1 1 1 1 2 1 1 1 1 2 1 1 1 1 2 1"},{"path":"http://alarm-redist.org/redist/reference/redist.county.relabel.html","id":null,"dir":"Reference","previous_headings":"","what":"Relabel Discontinuous Counties — redist.county.relabel","title":"Relabel Discontinuous Counties — redist.county.relabel","text":"Relabel Discontinuous Counties","code":""},{"path":"http://alarm-redist.org/redist/reference/redist.county.relabel.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Relabel Discontinuous Counties — redist.county.relabel","text":"","code":"redist.county.relabel(adj, counties, simplify = TRUE)"},{"path":"http://alarm-redist.org/redist/reference/redist.county.relabel.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Relabel Discontinuous Counties — redist.county.relabel","text":"adj adjacency list counties character vector county names simplify boolean - TRUE returns numeric vector ids, FALSE appends number multiple connected components.","code":""},{"path":"http://alarm-redist.org/redist/reference/redist.county.relabel.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Relabel Discontinuous Counties — redist.county.relabel","text":"character vector county names","code":""},{"path":"http://alarm-redist.org/redist/reference/redist.county.relabel.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Relabel Discontinuous Counties — redist.county.relabel","text":"","code":"set.seed(2) data(fl25) data(fl25_adj) counties <- sample(c(rep(\"a\", 20), rep(\"b\", 5))) redist.county.relabel(fl25_adj, counties) #>  [1] 2 1 1 2 1 1 1 1 1 1 1 1 1 2 1 1 1 1 3 1 1 1 1 4 1"},{"path":"http://alarm-redist.org/redist/reference/redist.crsg.html","id":null,"dir":"Reference","previous_headings":"","what":"Redistricting via Compact Random Seed and Grow Algorithm — redist.crsg","title":"Redistricting via Compact Random Seed and Grow Algorithm — redist.crsg","text":"redist.crsg generates redistricting plans using random seed grow algorithm.  compact districting algorithm described Chen Rodden (2013).","code":""},{"path":"http://alarm-redist.org/redist/reference/redist.crsg.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Redistricting via Compact Random Seed and Grow Algorithm — redist.crsg","text":"","code":"redist.crsg(   adj,   total_pop,   shp,   ndists,   pop_tol,   verbose = TRUE,   maxiter = 5000 )"},{"path":"http://alarm-redist.org/redist/reference/redist.crsg.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Redistricting via Compact Random Seed and Grow Algorithm — redist.crsg","text":"adj List length N, N number precincts. list element integer vector indicating precincts precinct adjacent .  assumed precinct numbers start 0. total_pop numeric vector length N, N number precincts. element lists population total corresponding precinct, used enforce pop_tol constraints. shp sf dataframe compute area centroids . ndists integer, number districts want partition precincts . pop_tol numeric, indicating close district population targets target population algorithm converges.  pop_tol=0.05 example means districts must 0.95 1.05 times size target.pop population size. verbose boolean, indicating whether time run algorithm printed. maxiter integer, indicating maximum number iterations attempt convergence population constraint fails.  fails , use different set start values try .  fails , redist.rsg() returns object NAs, indicating use iterations may advised. Default 5000.","code":""},{"path":"http://alarm-redist.org/redist/reference/redist.crsg.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Redistricting via Compact Random Seed and Grow Algorithm — redist.crsg","text":"list, containing three objects containing completed redistricting plan. plan:  vector length N, indicating district membership precinct. district_list  list length Ndistrict.  list contains vector precincts respective district. district_pop  vector length Ndistrict, containing population totals respective districts.","code":""},{"path":"http://alarm-redist.org/redist/reference/redist.crsg.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Redistricting via Compact Random Seed and Grow Algorithm — redist.crsg","text":"Jowei Chen Jonathan Rodden (2013) “Unintentional Gerrymandering: Political Geography Electoral Bias Legislatures.” Quarterly Journal Political Science. 8(3): 239-269.","code":""},{"path":"http://alarm-redist.org/redist/reference/redist.crsg.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Redistricting via Compact Random Seed and Grow Algorithm — redist.crsg","text":"","code":"data(\"fl25\") adj <- redist.adjacency(fl25) redist.crsg(adj = adj, total_pop = fl25$pop, shp = fl25, ndists = 2, pop_tol = .1) #>  #> ====================  #> redist.crsg(): Automated Redistricting Starts #>  #>  #> \t2 districts built using 25 precincts in 0 seconds... #>  #> $plan #>  [1] 1 2 2 2 2 1 2 2 1 1 1 1 1 1 1 2 2 2 2 2 2 2 2 2 2 #>  #> $district_list #> $district_list[[1]] #> [1] 14 13  0  8  5 12 11 10  9 #>  #> $district_list[[2]] #>  [1]  7 20 22 18 21 23 24  4 17 19  6 15  2 16  3  1 #>  #>  #> $district_pop #> [1] 81127 93916 #>"},{"path":"http://alarm-redist.org/redist/reference/redist.diagplot.html","id":null,"dir":"Reference","previous_headings":"","what":"Diagnostic plotting functionality for MCMC redistricting. — redist.diagplot","title":"Diagnostic plotting functionality for MCMC redistricting. — redist.diagplot","text":"redist.diagplot generates several common MCMC diagnostic plots.","code":""},{"path":"http://alarm-redist.org/redist/reference/redist.diagplot.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Diagnostic plotting functionality for MCMC redistricting. — redist.diagplot","text":"","code":"redist.diagplot(sumstat, plot = c(\"trace\", \"autocorr\", \"densplot\", \"mean\", \"gelmanrubin\"), logit = FALSE, savename = NULL)"},{"path":"http://alarm-redist.org/redist/reference/redist.diagplot.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Diagnostic plotting functionality for MCMC redistricting. — redist.diagplot","text":"sumstat vector, list, mcmc mcmc.list object containing summary statistic choice. plot type diagnostic plot generate: one \"trace\", \"autocorr\", \"densplot\", \"mean\", \"gelmanrubin\". plot = \"gelmanrubin\", input sumstat must class mcmc.list list. logit Flag whether apply logistic transformation summary statistic. default FALSE. savename Filename save plot. Default NULL.","code":""},{"path":"http://alarm-redist.org/redist/reference/redist.diagplot.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Diagnostic plotting functionality for MCMC redistricting. — redist.diagplot","text":"Returns plot file type .pdf.","code":""},{"path":"http://alarm-redist.org/redist/reference/redist.diagplot.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Diagnostic plotting functionality for MCMC redistricting. — redist.diagplot","text":"function allows users generate several standard diagnostic plots MCMC literature, implemented Plummer et. al (2006). Diagnostic plots implemented include trace plots, autocorrelation plots, density plots, running means, Gelman-Rubin convergence diagnostics (Gelman & Rubin 1992).","code":""},{"path":"http://alarm-redist.org/redist/reference/redist.diagplot.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Diagnostic plotting functionality for MCMC redistricting. — redist.diagplot","text":"Fifield, Benjamin, Michael Higgins, Kosuke Imai Alexander Tarr. (2016) \"New Automated Redistricting Simulator Using Markov Chain Monte Carlo.\" Working Paper. Available http://imai.princeton.edu/research/files/redist.pdf. Gelman, Andrew Donald Rubin. (1992) \"Inference iterative simulations using multiple sequences (discussion).\" Statistical Science. Plummer, Martin, Nicky Best, Kate Cowles Karen Vines. (2006) \"CODA: Convergence Diagnosis Output Analysis MCMC.\" R News.","code":""},{"path":"http://alarm-redist.org/redist/reference/redist.diagplot.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Diagnostic plotting functionality for MCMC redistricting. — redist.diagplot","text":"","code":"# \\donttest{ data(fl25) data(fl25_enum) data(fl25_adj)  ## Get an initial partition init_plan <- fl25_enum$plans[, 5118] fl25$init_plan <- init_plan  ## 25 precinct, three districts - no pop constraint ## fl_map <- redist_map(fl25, existing_plan = 'init_plan', adj = fl25_adj) #> Projecting to CRS 3857 alg_253 <- redist_flip(fl_map, nsims = 10000) #>  #> ── redist_flip() ─────────────────────────────────────────────────────────────── #>  #> ── Automated Redistricting Simulation Using Markov Chain Monte Carlo ── #> ℹ Preprocessing data. #> ℹ Starting swMH(). #> ■                                  0% | ETA:10s #> ■■■■■■■■■■■■■                     41% | ETA:  1s | MH Acceptance: 0.78 #> ■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■  100% | ETA:  0s | MH Acceptance: 0.78 #>   ## Get Republican Dissimilarity Index from simulations rep_dmi_253 <- redistmetrics::seg_dissim(alg_253, fl25, mccain, pop) |>     redistmetrics::by_plan(ndists = 3)  ## Generate diagnostic plots redist.diagplot(rep_dmi_253, plot = \"trace\")  redist.diagplot(rep_dmi_253, plot = \"autocorr\")  redist.diagplot(rep_dmi_253, plot = \"densplot\")  redist.diagplot(rep_dmi_253, plot = \"mean\")   ## Gelman Rubin needs two chains, so we run a second alg_253_2 <- redist_flip(fl_map, nsims = 10000) #>  #> ── redist_flip() ─────────────────────────────────────────────────────────────── #>  #> ── Automated Redistricting Simulation Using Markov Chain Monte Carlo ── #> ℹ Preprocessing data. #> ℹ Starting swMH(). #> ■                                  0% | ETA:11s #> ■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■  100% | ETA:  0s | MH Acceptance: 0.78 #>   rep_dmi_253_2 <- redistmetrics::seg_dissim(alg_253_2, fl25, mccain, pop) |>     redistmetrics::by_plan(ndists = 3)  ## Make a list out of the objects: rep_dmi_253_list <- list(rep_dmi_253, rep_dmi_253_2)  ## Generate Gelman Rubin diagnostic plot redist.diagplot(sumstat = rep_dmi_253_list, plot = \"gelmanrubin\")   # }"},{"path":"http://alarm-redist.org/redist/reference/redist.dist.pop.overlap.html","id":null,"dir":"Reference","previous_headings":"","what":"Compare the Population Overlap Across Plans at the District Level — redist.dist.pop.overlap","title":"Compare the Population Overlap Across Plans at the District Level — redist.dist.pop.overlap","text":"implements Crespin's 2005 measure district continuity, applied geographies represented plan, typically precincts voting districts. implementation assumes none precincts plan_old plan_new split.","code":""},{"path":"http://alarm-redist.org/redist/reference/redist.dist.pop.overlap.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compare the Population Overlap Across Plans at the District Level — redist.dist.pop.overlap","text":"","code":"redist.dist.pop.overlap(plan_old, plan_new, total_pop, normalize_rows = TRUE)"},{"path":"http://alarm-redist.org/redist/reference/redist.dist.pop.overlap.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compare the Population Overlap Across Plans at the District Level — redist.dist.pop.overlap","text":"plan_old reference original plan compare plan_new new plan compare reference plan total_pop total population precinct can also take redist_map object use population object. nothing provided, weights entries plan equally. normalize_rows Default TRUE. Normalize populations row. FALSE, normalizes column. NULL, normalize.","code":""},{"path":"http://alarm-redist.org/redist/reference/redist.dist.pop.overlap.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Compare the Population Overlap Across Plans at the District Level — redist.dist.pop.overlap","text":"matrix length(unique(plan_old)) rows length(unique(plan_new)) columns","code":""},{"path":"http://alarm-redist.org/redist/reference/redist.dist.pop.overlap.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Compare the Population Overlap Across Plans at the District Level — redist.dist.pop.overlap","text":"\"Using Geographic Information Systems Measure District Change, 2000-02\", Michael Crespin, Political Analysis (2005) 13(3): 253-260","code":""},{"path":"http://alarm-redist.org/redist/reference/redist.dist.pop.overlap.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Compare the Population Overlap Across Plans at the District Level — redist.dist.pop.overlap","text":"","code":"set.seed(5) data(iowa) iowa_map <- redist_map(iowa, total_pop = pop, pop_tol = 0.01, ndists = 4) plans <- redist_smc(iowa_map, 2) #> SEQUENTIAL MONTE CARLO #> Sampling 2 99-unit maps with 4 districts and population between 753973 and 769205. #> Split [0/3] ■                                | ETA? #> Split [3/3] ■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■  | ETA 0s #>  plans_mat <- get_plans_matrix(plans) ov <- redist.dist.pop.overlap(plans_mat[, 1], plans_mat[, 2], iowa_map) round(ov, 2) #>      1    2    3    4 #> 1 0.14 0.00 0.18 0.68 #> 2 0.05 0.17 0.78 0.00 #> 3 0.59 0.06 0.02 0.33 #> 4 0.22 0.76 0.02 0.00  ov_col <- redist.dist.pop.overlap(plans_mat[, 1], plans_mat[, 2], iowa_map, normalize_rows = FALSE) round(ov_col, 2) #>      1    2    3    4 #> 1 0.14 0.00 0.18 0.67 #> 2 0.05 0.17 0.78 0.00 #> 3 0.59 0.06 0.02 0.33 #> 4 0.22 0.77 0.02 0.00  ov_un_norm <- redist.dist.pop.overlap(plans_mat[, 1], plans_mat[, 2],     iowa_map, normalize_rows = NULL) round(ov_un_norm, 2) #>        1      2      3      4 #> 1 105215      0 138897 513848 #> 2  40648 131090 592727      0 #> 3 446353  43843  14928 252869 #> 4 165224 582584  18129      0  iowa_map_5 <- iowa_map <- redist_map(iowa, total_pop = pop, pop_tol = 0.01, ndists = 5) plan_5 <- get_plans_matrix(redist_smc(iowa_map_5, 1)) #> SEQUENTIAL MONTE CARLO #> Sampling 1 99-unit maps with 5 districts and population between 603178 and 615364. ov4_5 <- redist.dist.pop.overlap(plans_mat[, 1], plan_5, iowa_map) round(ov4_5, 2) #>      1    2    3    4    5 #> 1 0.00 0.00 0.70 0.19 0.11 #> 2 0.00 0.25 0.00 0.37 0.39 #> 3 0.33 0.02 0.11 0.24 0.30 #> 4 0.47 0.53 0.00 0.00 0.00"},{"path":"http://alarm-redist.org/redist/reference/redist.distances.html","id":null,"dir":"Reference","previous_headings":"","what":"Compute Distance between Partitions — plan_distances","title":"Compute Distance between Partitions — plan_distances","text":"Compute Distance Partitions","code":""},{"path":"http://alarm-redist.org/redist/reference/redist.distances.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compute Distance between Partitions — plan_distances","text":"","code":"plan_distances(plans, measure = \"variation of information\", ncores = 1)  redist.distances(plans, measure = \"Hamming\", ncores = 1, total_pop = NULL)"},{"path":"http://alarm-redist.org/redist/reference/redist.distances.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compute Distance between Partitions — plan_distances","text":"plans matrix one row precinct one column map. Required. measure String vector indicating distances compute. Implemented currently \"Hamming\", \"Manhattan\", \"Euclidean\", \"variation information\", Use \"\" return implemented measures.  case sensitive, unique substring enough, e.g. \"ham\" Hamming, \"info\" variation information. ncores Number cores use parallel computing. Default 1. total_pop vector precinct populations. Used computing variation information. provided, equal population precincts assumed, .e. VI computed respect precincts , population.","code":""},{"path":"http://alarm-redist.org/redist/reference/redist.distances.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Compute Distance between Partitions — plan_distances","text":"distance_matrix returns numeric distance matrix chosen metric. named list distance matrices, one distance measure selected.","code":""},{"path":"http://alarm-redist.org/redist/reference/redist.distances.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Compute Distance between Partitions — plan_distances","text":"Hamming distance measures number different precinct assignments plans. Manhattan Euclidean distances 1- 2-norms assignment vectors.  three Hamming, Manhattan, Euclidean distances implemented invariant permutations district labels; permuting cause large changes measured distance, maps identical permutation may computed maximally distant. Variation Information metric population partitions (.e., districtings) invariant permutations district labels, arises information theory. calculated $$ VI(\\xi, \\xi') = -\\sum_{=1}^n\\sum_{j=1}^n pop(\\xi_i \\cap \\xi'_j)/P (2log(pop(\\xi_i \\cap \\xi'_j)) - log(pop(\\xi_i)) - log(pop(\\xi'_j))) $$ \\(\\xi,\\xi'\\) partitions, \\(\\xi_i,\\xi_j\\) individual districts, \\(pop(\\cdot)\\) population, \\(P\\) total population state. VI also expressible difference joint entropy mutual information (see references).","code":""},{"path":"http://alarm-redist.org/redist/reference/redist.distances.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Compute Distance between Partitions — plan_distances","text":"Cover, T. M. Thomas, J. . (2006). Elements information theory. John Wiley & Sons, 2 edition.","code":""},{"path":"http://alarm-redist.org/redist/reference/redist.distances.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Compute Distance between Partitions — plan_distances","text":"","code":"data(fl25) data(fl25_enum)  plans_05 <- fl25_enum$plans[, fl25_enum$pop_dev <= 0.05] distances <- redist.distances(plans_05) distances$Hamming[1:5, 1:5] #>      [,1] [,2] [,3] [,4] [,5] #> [1,]    0    2    3    2    8 #> [2,]    2    0    4    3    9 #> [3,]    3    4    0    1    5 #> [4,]    2    3    1    0    6 #> [5,]    8    9    5    6    0"},{"path":"http://alarm-redist.org/redist/reference/redist.district.splits.html","id":null,"dir":"Reference","previous_headings":"","what":"Counts the Number of Counties within a District — redist.district.splits","title":"Counts the Number of Counties within a District — redist.district.splits","text":"Counts total number counties found within district. subtract number counties found completely within district.","code":""},{"path":"http://alarm-redist.org/redist/reference/redist.district.splits.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Counts the Number of Counties within a District — redist.district.splits","text":"","code":"redist.district.splits(plans, counties)"},{"path":"http://alarm-redist.org/redist/reference/redist.district.splits.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Counts the Number of Counties within a District — redist.district.splits","text":"plans numeric vector (one map) matrix one row precinct one column map. Required. counties vector county names county ids.","code":""},{"path":"http://alarm-redist.org/redist/reference/redist.district.splits.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Counts the Number of Counties within a District — redist.district.splits","text":"integer matrix district ","code":""},{"path":"http://alarm-redist.org/redist/reference/redist.district.splits.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Counts the Number of Counties within a District — redist.district.splits","text":"","code":"data(iowa) ia <- redist_map(iowa, existing_plan = cd_2010, total_pop = pop, pop_tol = 0.01) plans <- redist_smc(ia, 50, silent = TRUE) #old redist.district.splits(plans, ia$region) splits_count(plans, ia, region) #>           [,1] [,2] [,3] [,4] [,5] [,6] [,7] [,8] [,9] [,10] [,11] [,12] [,13] #> South        4    4    4    3    4    3    3    3    3     3     3     4     4 #> Northeast    2    2    2    1    2    3    3    2    2     2     2     2     2 #> Northwest    2    2    2    2    1    2    2    3    3     3     3     2     2 #> Southeast    3    2    2    3    3    3    3    3    3     2     3     2     2 #> Central      2    2    2    3    2    2    2    2    2     3     2     2     2 #>           [,14] [,15] [,16] [,17] [,18] [,19] [,20] [,21] [,22] [,23] [,24] #> South         3     3     3     3     3     3     3     4     3     4     3 #> Northeast     2     2     2     2     4     2     2     2     3     1     2 #> Northwest     3     3     2     3     1     2     2     2     3     2     2 #> Southeast     3     2     2     2     3     3     3     2     3     3     3 #> Central       2     3     3     3     2     2     2     2     2     3     2 #>           [,25] [,26] [,27] [,28] [,29] [,30] [,31] [,32] [,33] [,34] [,35] #> South         3     3     4     2     2     4     3     3     2     2     2 #> Northeast     2     2     2     2     3     2     1     1     3     2     2 #> Northwest     2     3     2     3     3     2     2     2     2     3     3 #> Southeast     3     3     2     4     3     3     3     3     3     3     3 #> Central       2     2     2     2     2     2     2     2     2     2     2 #>           [,36] [,37] [,38] [,39] [,40] [,41] [,42] [,43] [,44] [,45] [,46] #> South         4     3     3     3     3     3     4     3     3     2     4 #> Northeast     2     2     2     2     2     3     2     2     2     3     2 #> Northwest     2     2     2     2     2     2     2     2     3     3     2 #> Southeast     3     2     3     3     3     3     2     3     3     2     2 #> Central       2     2     2     2     2     2     2     3     2     2     2 #>           [,47] [,48] [,49] [,50] [,51] #> South         4     4     3     3     4 #> Northeast     2     2     2     3     3 #> Northwest     2     2     3     3     2 #> Southeast     2     2     3     3     2 #> Central       2     2     2     2     2"},{"path":"http://alarm-redist.org/redist/reference/redist.enumpart.html","id":null,"dir":"Reference","previous_headings":"","what":"Enumerate All Parititions (Fifield et al. 2020) — redist.enumpart","title":"Enumerate All Parititions (Fifield et al. 2020) — redist.enumpart","text":"Single function standard enumeration analysis, using ZDD methodology (Fifield, Imai, Kawahara, Kenny 2020).","code":""},{"path":"http://alarm-redist.org/redist/reference/redist.enumpart.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Enumerate All Parititions (Fifield et al. 2020) — redist.enumpart","text":"","code":"redist.enumpart(   adj,   unordered_path,   ordered_path,   out_path,   ndists = 2,   all = TRUE,   n = NULL,   weight_path = NULL,   lower = NULL,   upper = NULL,   init = FALSE,   read = TRUE,   total_pop = NULL )"},{"path":"http://alarm-redist.org/redist/reference/redist.enumpart.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Enumerate All Parititions (Fifield et al. 2020) — redist.enumpart","text":"adj zero indexed adjacency list. unordered_path valid path output unordered adjacency map ordered_path valid path output ordered adjacency map out_path Valid path output enumerated districts ndists number districts enumerate boolean. TRUE outputs districts. FALSE samples n districts. n integer. Number districts output FALSE. Returns districts selected uniform random distribution. weight_path path (including \".dat\") space-delimited file containing vector vertex weights, used along lower upper. lower lower bound partition's total weight, implemented rejection sampling. upper upper bound partition's total weight. init Runs redist.init.enumpart. Defaults false. run first use. read boolean. Defaults TRUE. reads total_pop vector precinct populations","code":""},{"path":"http://alarm-redist.org/redist/reference/redist.enumpart.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Enumerate All Parititions (Fifield et al. 2020) — redist.enumpart","text":"List entries district_membership parity.","code":""},{"path":"http://alarm-redist.org/redist/reference/redist.enumpart.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Enumerate All Parititions (Fifield et al. 2020) — redist.enumpart","text":"Fifield, B., Imai, K., Kawahara, J., & Kenny, C. T. (2020). essential role empirical validation legislative redistricting simulation. Statistics Public Policy, 7(1), 52-68.","code":""},{"path":"http://alarm-redist.org/redist/reference/redist.find.target.html","id":null,"dir":"Reference","previous_headings":"","what":"Find Majority Minority Remainder — redist.find.target","title":"Find Majority Minority Remainder — redist.find.target","text":"Given percent goal majority minority districts, computes average value minority non-majority minority districts. value \"tgt_other\" redist_flip redist_smc.","code":""},{"path":"http://alarm-redist.org/redist/reference/redist.find.target.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Find Majority Minority Remainder — redist.find.target","text":"","code":"redist.find.target(tgt_min, group_pop, total_pop, ndists, nmmd)"},{"path":"http://alarm-redist.org/redist/reference/redist.find.target.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Find Majority Minority Remainder — redist.find.target","text":"tgt_min target group population majority minority district group_pop vector populations subgroup interest. total_pop vector containing populations geographic unit. ndists number congressional districts. nmmd number majority minority districts.","code":""},{"path":"http://alarm-redist.org/redist/reference/redist.find.target.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Find Majority Minority Remainder — redist.find.target","text":"numeric value target","code":""},{"path":"http://alarm-redist.org/redist/reference/redist.findparams.html","id":null,"dir":"Reference","previous_headings":"","what":"Run parameter testing for redist_flip — redist.findparams","title":"Run parameter testing for redist_flip — redist.findparams","text":"redist.findparams used find optimal parameter values redist_flip given map.","code":""},{"path":"http://alarm-redist.org/redist/reference/redist.findparams.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Run parameter testing for redist_flip — redist.findparams","text":"","code":"redist.findparams(   map,   nsims,   init_plan = NULL,   adapt_lambda = FALSE,   adapt_eprob = FALSE,   params,   ssdmat = NULL,   group_pop = NULL,   counties = NULL,   nstartval_store = 1,   maxdist_startval = 100,   maxiterrsg = 5000,   report_all = TRUE,   parallel = FALSE,   ncores = NULL,   log = FALSE,   verbose = TRUE )"},{"path":"http://alarm-redist.org/redist/reference/redist.findparams.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Run parameter testing for redist_flip — redist.findparams","text":"map redist_map object. nsims number simulations run save point. init_plan vector containing congressional district labels geographic unit. default NULL. provided, random contiguous congressional district assignments generated using redist.rsg. adapt_lambda Whether adaptively tune lambda parameter Metropolis-Hastings acceptance probability falls 20% 40%. Default FALSE. adapt_eprob Whether adaptively tune edgecut probability parameter Metropolis-Hastings acceptance probability falls 20% 40%. Default FALSE. params matrix parameter values test, output expand.grid. Parameters accepted params include eprob, lambda, pop_tol, beta, constraint. ssdmat matrix squared distances geographic units. default NULL. group_pop vector populations sub-group interest. default NULL. counties vector county membership assignments. default NULL. nstartval_store number maps sample preprocessing chain use starting values future simulations. Default 1. maxdist_startval maximum distance starting map sampled maps . Default 100 (restriction). maxiterrsg Maximum number iterations random seed--grow algorithm generate starting values. Default 5000. report_all Whether report summary statistics set parameter values. Default TRUE. parallel Whether run separate parameter settings parallel. Default FALSE. ncores Number parallel tasks run, declared outside function. Default NULL. log Whether open log track progress parameter combination tested. Default FALSE. verbose Whether print additional information tests. Default TRUE.","code":""},{"path":"http://alarm-redist.org/redist/reference/redist.findparams.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Run parameter testing for redist_flip — redist.findparams","text":"redist.findparams returns print-summary statistics parameter setting.","code":""},{"path":"http://alarm-redist.org/redist/reference/redist.findparams.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Run parameter testing for redist_flip — redist.findparams","text":"function allows users test multiple parameter settings redist_flip preparation longer run analysis.","code":""},{"path":"http://alarm-redist.org/redist/reference/redist.findparams.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Run parameter testing for redist_flip — redist.findparams","text":"Fifield, Benjamin, Michael Higgins, Kosuke Imai Alexander Tarr. (2016) \"New Automated Redistricting Simulator Using Markov Chain Monte Carlo.\" Working Paper. Available http://imai.princeton.edu/research/files/redist.pdf.","code":""},{"path":"http://alarm-redist.org/redist/reference/redist.findparams.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Run parameter testing for redist_flip — redist.findparams","text":"","code":"# \\donttest{ data(fl25) data(fl25_enum) data(fl25_adj)  ## Get an initial partition init_plan <- fl25_enum$plans[, 5118]  params <- expand.grid(eprob = c(.01, .05, .1))  # Make map map_fl <- redist_map(fl25, ndists = 3, pop_tol = 0.2) #> Projecting to CRS 3857 ## Run the algorithm redist.findparams(map_fl,     init_plan = init_plan, nsims = 10000, params = params) #> ## ------------------------------ #>  ## redist.findparams(): Parameter tuning for redist_flip() #>  ## Searching over 3 parameter combinations #>  ## ------------------------------ #>  #>  #> ── redist_flip() ─────────────────────────────────────────────────────────────── #>  #> ── Automated Redistricting Simulation Using Markov Chain Monte Carlo ── #> ℹ Preprocessing data. #> ℹ Starting swMH(). #> ■■■■■■■■■■■■■■■■■■■■■■■■■■■■■     93% | ETA:  0s | MH Acceptance: 0.99 #> ■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■  100% | ETA:  0s | MH Acceptance: 0.99 #>  #>  #> ── redist_flip() ─────────────────────────────────────────────────────────────── #>  #> ── Automated Redistricting Simulation Using Markov Chain Monte Carlo ── #> ℹ Preprocessing data. #> ℹ Starting swMH(). #>  #> ── redist_flip() ─────────────────────────────────────────────────────────────── #>  #> ── Automated Redistricting Simulation Using Markov Chain Monte Carlo ── #> ℹ Preprocessing data. #> ℹ Starting swMH(). #> ■■■■■■■■■■■■■■                    44% | ETA:  1s | MH Acceptance: 0.93 #> ■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■  100% | ETA:  0s | MH Acceptance: 0.92 #>  #>  ## ------------------------------------- #>  ## ------------------------------------- #>  ## Parameter Values for Simulation 1  #> ## Edgecut probability = 0.01 #> ## Lambda = 0 #> ## No hard population constraint applied #> ## ------------------------------------- #> ## Diagnostics: #> ## Metropolis-Hastings Acceptance Ratio = 0.993 #> ## Mean population parity distance = 0.851 #> ## Median population parity distance = 0.828 #> ## Population parity range = 0.029 1.93 #> ## MCMC Iteration quantiles of population parity median = 0.876 0.807 0.876 0.768 #>  #> ## Mean share of geographies equal to initial assignment = 0.352 #> ## Median share of geographies equal to initial assignment = 0.36 #> ## Range of share of geographies equal to initial assignment = 0 0.96 #> ## MCMC Iteration quantiles of geography distance to initial assignment = 0.4 0.4 0.32 0.24 #> ## ------------------------------------- #> ## ------------------------------------- #>  #>  ## ------------------------------------- #>  ## ------------------------------------- #>  ## Parameter Values for Simulation 1  #> ## Edgecut probability = 0.05 #> ## Lambda = 0 #> ## No hard population constraint applied #> ## ------------------------------------- #> ## Diagnostics: #> ## Metropolis-Hastings Acceptance Ratio = 0.96 #> ## Mean population parity distance = 0.837 #> ## Median population parity distance = 0.835 #> ## Population parity range = 0.008 1.868 #> ## MCMC Iteration quantiles of population parity median = 0.717 0.963 0.808 0.586 #>  #> ## Mean share of geographies equal to initial assignment = 0.325 #> ## Median share of geographies equal to initial assignment = 0.32 #> ## Range of share of geographies equal to initial assignment = 0 0.96 #> ## MCMC Iteration quantiles of geography distance to initial assignment = 0.36 0.36 0.28 0.28 #> ## ------------------------------------- #> ## ------------------------------------- #>  #>  ## ------------------------------------- #>  ## ------------------------------------- #>  ## Parameter Values for Simulation 1  #> ## Edgecut probability = 0.1 #> ## Lambda = 0 #> ## No hard population constraint applied #> ## ------------------------------------- #> ## Diagnostics: #> ## Metropolis-Hastings Acceptance Ratio = 0.923 #> ## Mean population parity distance = 0.899 #> ## Median population parity distance = 0.893 #> ## Population parity range = 0.009 1.946 #> ## MCMC Iteration quantiles of population parity median = 0.875 0.891 0.912 0.889 #>  #> ## Mean share of geographies equal to initial assignment = 0.313 #> ## Median share of geographies equal to initial assignment = 0.28 #> ## Range of share of geographies equal to initial assignment = 0 0.96 #> ## MCMC Iteration quantiles of geography distance to initial assignment = 0.28 0.24 0.32 0.36 #> ## ------------------------------------- #> ## ------------------------------------- #>  #> $diagnostics #> [1] \" ## -------------------------------------\\n ## -------------------------------------\\n ## Parameter Values for Simulation 1 \\n## Edgecut probability = 0.01\\n## Lambda = 0\\n## No hard population constraint applied\\n## -------------------------------------\\n## Diagnostics:\\n## Metropolis-Hastings Acceptance Ratio = 0.993\\n## Mean population parity distance = 0.851\\n## Median population parity distance = 0.828\\n## Population parity range = 0.029 1.93\\n## MCMC Iteration quantiles of population parity median = 0.876 0.807 0.876 0.768\\n\\n## Mean share of geographies equal to initial assignment = 0.352\\n## Median share of geographies equal to initial assignment = 0.36\\n## Range of share of geographies equal to initial assignment = 0 0.96\\n## MCMC Iteration quantiles of geography distance to initial assignment = 0.4 0.4 0.32 0.24\\n## -------------------------------------\\n## -------------------------------------\\n\\n ## -------------------------------------\\n ## -------------------------------------\\n ## Parameter Values for Simulation 1 \\n## Edgecut probability = 0.05\\n## Lambda = 0\\n## No hard population constraint applied\\n## -------------------------------------\\n## Diagnostics:\\n## Metropolis-Hastings Acceptance Ratio = 0.96\\n## Mean population parity distance = 0.837\\n## Median population parity distance = 0.835\\n## Population parity range = 0.008 1.868\\n## MCMC Iteration quantiles of population parity median = 0.717 0.963 0.808 0.586\\n\\n## Mean share of geographies equal to initial assignment = 0.325\\n## Median share of geographies equal to initial assignment = 0.32\\n## Range of share of geographies equal to initial assignment = 0 0.96\\n## MCMC Iteration quantiles of geography distance to initial assignment = 0.36 0.36 0.28 0.28\\n## -------------------------------------\\n## -------------------------------------\\n\\n ## -------------------------------------\\n ## -------------------------------------\\n ## Parameter Values for Simulation 1 \\n## Edgecut probability = 0.1\\n## Lambda = 0\\n## No hard population constraint applied\\n## -------------------------------------\\n## Diagnostics:\\n## Metropolis-Hastings Acceptance Ratio = 0.923\\n## Mean population parity distance = 0.899\\n## Median population parity distance = 0.893\\n## Population parity range = 0.009 1.946\\n## MCMC Iteration quantiles of population parity median = 0.875 0.891 0.912 0.889\\n\\n## Mean share of geographies equal to initial assignment = 0.313\\n## Median share of geographies equal to initial assignment = 0.28\\n## Range of share of geographies equal to initial assignment = 0 0.96\\n## MCMC Iteration quantiles of geography distance to initial assignment = 0.28 0.24 0.32 0.36\\n## -------------------------------------\\n## -------------------------------------\\n\\n\" #>  #> $startvals #> $startvals[[1]] #>       [,1] #>  [1,]    3 #>  [2,]    1 #>  [3,]    2 #>  [4,]    1 #>  [5,]    1 #>  [6,]    2 #>  [7,]    1 #>  [8,]    1 #>  [9,]    2 #> [10,]    3 #> [11,]    2 #> [12,]    2 #> [13,]    2 #> [14,]    2 #> [15,]    2 #> [16,]    2 #> [17,]    2 #> [18,]    2 #> [19,]    1 #> [20,]    1 #> [21,]    2 #> [22,]    1 #> [23,]    2 #> [24,]    1 #> [25,]    1 #>  #> $startvals[[2]] #>       [,1] #>  [1,]    2 #>  [2,]    2 #>  [3,]    2 #>  [4,]    2 #>  [5,]    2 #>  [6,]    3 #>  [7,]    2 #>  [8,]    2 #>  [9,]    1 #> [10,]    2 #> [11,]    2 #> [12,]    2 #> [13,]    2 #> [14,]    2 #> [15,]    2 #> [16,]    2 #> [17,]    2 #> [18,]    2 #> [19,]    2 #> [20,]    2 #> [21,]    2 #> [22,]    2 #> [23,]    3 #> [24,]    2 #> [25,]    2 #>  #> $startvals[[3]] #>       [,1] #>  [1,]    1 #>  [2,]    3 #>  [3,]    3 #>  [4,]    3 #>  [5,]    1 #>  [6,]    1 #>  [7,]    1 #>  [8,]    1 #>  [9,]    1 #> [10,]    2 #> [11,]    2 #> [12,]    2 #> [13,]    2 #> [14,]    1 #> [15,]    2 #> [16,]    3 #> [17,]    3 #> [18,]    1 #> [19,]    3 #> [20,]    3 #> [21,]    1 #> [22,]    3 #> [23,]    1 #> [24,]    3 #> [25,]    3 #>  #>  # }"},{"path":"http://alarm-redist.org/redist/reference/redist.freeze.html","id":null,"dir":"Reference","previous_headings":"","what":"Freeze Parts of a Map — freeze","title":"Freeze Parts of a Map — freeze","text":"Freeze Parts Map","code":""},{"path":"http://alarm-redist.org/redist/reference/redist.freeze.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Freeze Parts of a Map — freeze","text":"","code":"freeze(freeze_row, plan, .data = cur_map())  redist.freeze(adj, freeze_row, plan = rep(1, length(adj)))"},{"path":"http://alarm-redist.org/redist/reference/redist.freeze.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Freeze Parts of a Map — freeze","text":"freeze_row Required, logical vector TRUE freezes FALSE lets precinct stay free vector indices freeze plan vector district assignments, provided create separate groups district. Recommended. freeze defaults existing plan, one exists. .data redist_map object adj Required, zero indexed adjacency list.","code":""},{"path":"http://alarm-redist.org/redist/reference/redist.freeze.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Freeze Parts of a Map — freeze","text":"integer vector group ","code":""},{"path":"http://alarm-redist.org/redist/reference/redist.freeze.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Freeze Parts of a Map — freeze","text":"","code":"library(redist) library(dplyr) #>  #> Attaching package: ‘dplyr’ #> The following object is masked from ‘package:redistmetrics’: #>  #>     tally #> The following objects are masked from ‘package:stats’: #>  #>     filter, lag #> The following objects are masked from ‘package:base’: #>  #>     intersect, setdiff, setequal, union data(fl25) data(fl25_enum) data(fl25_adj) plan <- fl25_enum$plans[, 5118] freeze_id <- redist.freeze(adj = fl25_adj, freeze_row = (plan == 2),     plan = plan)  data(iowa) map <- redist_map(iowa, existing_plan = cd_2010, pop_tol = 0.02) map <- map %>% merge_by(freeze(cd_2010 == 1, .data = .))"},{"path":"http://alarm-redist.org/redist/reference/redist.group.percent.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate Group Proportion by District — group_frac","title":"Calculate Group Proportion by District — group_frac","text":"redist.group.percent computes proportion group makes district across matrix maps.","code":""},{"path":"http://alarm-redist.org/redist/reference/redist.group.percent.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate Group Proportion by District — group_frac","text":"","code":"group_frac(   map,   group_pop,   total_pop = map[[attr(map, \"pop_col\")]],   .data = pl() )  redist.group.percent(plans, group_pop, total_pop, ncores = 1)"},{"path":"http://alarm-redist.org/redist/reference/redist.group.percent.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate Group Proportion by District — group_frac","text":"map redist_map object group_pop numeric vector population group every precinct. total_pop numeric vector population every precinct. .data redist_plans object matrix plans plans matrix one row precinct one column map. Required. ncores Number cores use parallel computing. Default 1.","code":""},{"path":"http://alarm-redist.org/redist/reference/redist.group.percent.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate Group Proportion by District — group_frac","text":"matrix percent district","code":""},{"path":"http://alarm-redist.org/redist/reference/redist.group.percent.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Calculate Group Proportion by District — group_frac","text":"","code":"data(fl25) data(fl25_enum)  cd <- fl25_enum$plans[, fl25_enum$pop_dev <= 0.05] fl25_map = redist_map(fl25, ndists=3, pop_tol=0.1) #> Projecting to CRS 3857 fl25_plans = redist_plans(cd, fl25_map, algorithm=\"enumpart\")  group_frac(fl25_map, BlackPop, TotPop, fl25_plans) #>   [1] 0.15569192 0.25247685 0.10955591 0.19637123 0.21074842 0.10955591 #>   [7] 0.17732012 0.25887112 0.08746585 0.17732012 0.25247685 0.08952607 #>  [13] 0.17266694 0.27654976 0.06984788 0.17266694 0.28437724 0.05692216 #>  [19] 0.16052788 0.24574396 0.10955591 0.16253870 0.28437724 0.07146703 #>  [25] 0.14297175 0.29852009 0.08746585 0.18279646 0.25183036 0.08746585 #>  [31] 0.18279646 0.24574396 0.08952607 0.15478911 0.25561232 0.10955591 #>  [37] 0.15158693 0.25893710 0.10955591 0.15870284 0.24922832 0.10955591 #>  [43] 0.19154617 0.07312233 0.25561232 0.19154617 0.07146703 0.26223776 #>  [49] 0.17591625 0.26223776 0.08746585 0.17591625 0.25561232 0.08952607 #>  [55] 0.06570103 0.26061010 0.19762807 0.06570103 0.25945093 0.19771356 #>  [61] 0.05523813 0.25945093 0.20492044 0.08193173 0.24184865 0.19864849 #>  [67] 0.08193173 0.24101964 0.19875178 0.05247875 0.25887112 0.20492044 #>  [73] 0.12111828 0.28437724 0.10955591 0.05150092 0.25893710 0.20492044 #>  [79] 0.07094517 0.24101964 0.20492044 0.13225866 0.27654976 0.10955591 #>  [85] 0.17176966 0.26223776 0.08952607 0.06767722 0.25016809 0.19762807 #>  [91] 0.06767722 0.24922832 0.19771356 0.15923106 0.25016809 0.10955591 #>  [97] 0.09042369 0.22431205 0.20492044 0.14201996 0.28437724 0.08952607 #> [103] 0.15672274 0.25183036 0.10955591 0.07296264 0.24184865 0.20492044 #> [109] 0.05909645 0.25016809 0.20492044 0.14373979 0.11921812 0.25702238 #> [115] 0.13578053 0.07000805 0.31352220 0.12701667 0.19185622 0.19864849 #> [121] 0.12701667 0.19186280 0.19875178 0.12302202 0.27470243 0.11921812 #> [127] 0.12302202 0.08258869 0.31352220 0.05748505 0.26061010 0.20492044 #> [133] 0.13420752 0.31352220 0.06984788 0.16715800 0.11921812 0.23657909 #> [139] 0.15016739 0.05423124 0.31352220 0.15872904 0.04707140 0.31352220 #> [145] 0.19547663 0.07000805 0.25702238 0.17841255 0.08097525 0.25702238 #> [151] 0.16994859 0.15058844 0.19864849 0.12785821 0.31352220 0.07404886 #> [157] 0.11581273 0.25506736 0.15058844 0.11581273 0.27470243 0.12657980 #> [163] 0.11581273 0.08741876 0.31352220 0.11962673 0.19875178 0.20417381 #> [169] 0.09913088 0.16369828 0.25702238 0.09913088 0.18606496 0.23657909 #> [175] 0.14476308 0.05569711 0.31352220 0.14255453 0.06248724 0.31352220 #> [181] 0.13401679 0.07146703 0.31352220 0.11729986 0.31352220 0.08746585 #> [187] 0.13335542 0.07119078 0.31352220 0.13531896 0.12657980 0.25702238 #> [193] 0.13531896 0.15058844 0.23657909 0.11023472 0.20417381 0.20492044 #> [199] 0.17060391 0.15058844 0.19762807 0.14524591 0.05692216 0.31352220 #> [205] 0.16092157 0.25702238 0.10279716 0.17031597 0.15058844 0.19875178 #> [211] 0.15804717 0.25702238 0.10457394 0.17371723 0.27470243 0.07146703 #> [217] 0.13074827 0.07312233 0.31352220 0.15591287 0.04784772 0.31352220 #> [223] 0.17096600 0.15058844 0.19771356 0.09477141 0.31352220 0.10955591 #> [229] 0.16251851 0.15058844 0.20492044 0.19196614 0.07119078 0.25702238 #> [235] 0.11445147 0.31352220 0.08952607 0.23829433 0.08097525 0.19762807 #> [241] 0.20837790 0.05423124 0.25702238 0.18383193 0.25702238 0.07404886 #> [247] 0.20134065 0.06248724 0.25702238 0.23663392 0.08097525 0.19864849 #> [253] 0.14753875 0.05514963 0.31352220 0.19234674 0.25702238 0.06984788 #> [259] 0.17713306 0.25702238 0.08746585 0.20207411 0.05692216 0.25702238 #> [265] 0.20461687 0.11921812 0.19875178 0.19351658 0.07146703 0.25702238 #> [271] 0.19325296 0.12657980 0.19762807 0.20055867 0.05569711 0.25702238 #> [277] 0.19227698 0.12657980 0.19864849 0.15700596 0.27470243 0.08746585 #> [283] 0.18373370 0.23657909 0.10279716 0.21729357 0.07000805 0.23657909 #> [289] 0.21758790 0.04707140 0.25702238 0.26053128 0.05569711 0.19762807 #> [295] 0.25467976 0.07119078 0.19762807 0.19227683 0.12657980 0.19875178 #> [301] 0.18873848 0.07312233 0.25702238 0.18028046 0.25506736 0.08746585 #> [307] 0.25270009 0.07119078 0.19864849 0.22159646 0.19875178 0.10279716 #> [313] 0.21531673 0.07146703 0.23657909 0.14906358 0.16369828 0.20492044 #> [319] 0.21349242 0.07119078 0.23657909 0.26120764 0.05692216 0.19864849 #> [325] 0.18550147 0.12657980 0.20492044 0.19949178 0.23657909 0.08746585 #> [331] 0.20471681 0.05514963 0.25702238 0.26915139 0.05423124 0.19864849 #> [337] 0.21369565 0.23657909 0.06984788 0.23592011 0.08097525 0.19875178 #> [343] 0.21801351 0.19864849 0.10457394 0.24156999 0.19864849 0.07404886 #> [349] 0.18053285 0.23657909 0.10457394 0.22205007 0.06914946 0.23657909 #> [355] 0.25523216 0.07146703 0.19864849 0.25634739 0.07000805 0.19875178 #> [361] 0.27931225 0.04707140 0.19864849 0.19323696 0.12657980 0.19771356 #> [367] 0.15309332 0.27470243 0.08952607 0.16938502 0.27470243 0.07312233 #> [373] 0.23852168 0.04707140 0.23657909 0.24328778 0.19762807 0.07404886 #> [379] 0.19641184 0.25506736 0.07146703 0.22933119 0.05423124 0.23657909 #> [385] 0.25259455 0.19864849 0.06984788 0.23754266 0.08097525 0.19771356 #> [391] 0.23977081 0.05237970 0.23657909 0.26325811 0.05692216 0.19762807 #> [397] 0.13196768 0.27470243 0.10955591 0.22270792 0.05692216 0.23657909 #> [403] 0.26252537 0.06248724 0.19864849 0.21944189 0.19762807 0.10457394 #> [409] 0.22268083 0.06248724 0.23657909 0.19520915 0.11902088 0.20492044 #> [415] 0.17275828 0.25702238 0.08952607 0.25855956 0.05569711 0.19864849 #> [421] 0.23069417 0.08097525 0.20492044 0.25455617 0.19762807 0.06984788 #> [427] 0.21371638 0.04784772 0.25702238 0.27138019 0.05423124 0.19762807 #> [433] 0.17588836 0.25506736 0.08952607 0.25159583 0.19875178 0.06984788 #> [439] 0.22540525 0.05514963 0.23657909 0.24246314 0.19771356 0.07404886 #> [445] 0.25416526 0.07146703 0.19875178 0.28020469 0.04707140 0.19771356 #> [451] 0.24078481 0.19875178 0.07404886 0.24239569 0.06934862 0.20492044 #> [457] 0.27650032 0.04784772 0.19762807 0.25942975 0.05569711 0.19771356 #> [463] 0.19162861 0.25506736 0.07312233 0.19468019 0.23657909 0.08952607 #> [469] 0.25169155 0.07119078 0.19875178 0.26787511 0.05423124 0.19875178 #> [475] 0.26343771 0.06248724 0.19771356 0.23438854 0.04784772 0.23657909 #> [481] 0.26134832 0.06248724 0.19875178 0.27004651 0.05423124 0.19771356 #> [487] 0.26429338 0.05514963 0.19864849 0.23578904 0.07404886 0.20492044 #> [493] 0.21012874 0.07312233 0.23657909 0.22480552 0.08741876 0.20492044 #> [499] 0.26009105 0.05692216 0.19875178 0.15461732 0.25506736 0.10955591 #> [505] 0.26209089 0.05692216 0.19771356 0.21758387 0.19875178 0.10457394 #> [511] 0.25362190 0.07119078 0.19771356 0.26367891 0.05423124 0.20492044 #> [517] 0.27420711 0.04784772 0.19864849 0.25350900 0.19771356 0.06984788 #> [523] 0.24872847 0.07312233 0.19864849 0.25750552 0.05569711 0.19875178 #> [529] 0.27784995 0.04707140 0.19875178 0.25311968 0.05569711 0.20492044 #> [535] 0.26640526 0.05514963 0.19762807 0.21898133 0.19771356 0.10457394 #> [541] 0.27508968 0.04784772 0.19771356 0.27285574 0.04784772 0.19875178 #> [547] 0.26517837 0.05514963 0.19771356 0.26887391 0.04784772 0.20492044 #> [553] 0.24779646 0.07312233 0.19875178 0.23143590 0.08156994 0.20492044 #> [559] 0.25882623 0.05514963 0.20492044 0.22288230 0.08929802 0.20492044 #> [565] 0.26311935 0.05514963 0.19875178 0.23311308 0.08105612 0.20492044 #> [571] 0.22728449 0.08302913 0.20492044 0.21891136 0.09091400 0.20492044"},{"path":"http://alarm-redist.org/redist/reference/redist.identify.cores.html","id":null,"dir":"Reference","previous_headings":"","what":"Identify Cores of a District (Heuristic) — make_cores","title":"Identify Cores of a District (Heuristic) — make_cores","text":"Creates grouping ID unite geographies perform analysis smaller set precincts. identifies precincts boundary edges district district boundary. contiguous group precincts boundary steps away another district gets group. districts may multiple, disconnected components make core, assigned separate grouping id call sf::st_union() produce connected pieces.","code":""},{"path":"http://alarm-redist.org/redist/reference/redist.identify.cores.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Identify Cores of a District (Heuristic) — make_cores","text":"","code":"make_cores(.data = cur_map(), boundary = 1, focus = NULL)  redist.identify.cores(adj, plan, boundary = 1, focus = NULL, simplify = TRUE)"},{"path":"http://alarm-redist.org/redist/reference/redist.identify.cores.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Identify Cores of a District (Heuristic) — make_cores","text":".data redist_map object boundary Number steps check . Defaults 1. focus Optional. Integer. single district focus . adj zero indexed adjacency list. plan integer vector matrix column district assignments. simplify Optional. Logical. Whether return extra information just grouping ID.","code":""},{"path":"http://alarm-redist.org/redist/reference/redist.identify.cores.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Identify Cores of a District (Heuristic) — make_cores","text":"integer vector (simplify false). Otherwise returns tibble grouping variable group_id additional information connected components.","code":""},{"path":"http://alarm-redist.org/redist/reference/redist.identify.cores.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Identify Cores of a District (Heuristic) — make_cores","text":"loose interpretation NCSL's summary redistricting criteria preserve cores prior districts. Using adjacency graph given plan, locate precincts boundary district, within boundary steps edge.  given group. remaining entry near boundary district given id can used group remainder district connected component. portion deemed core district.","code":""},{"path":[]},{"path":"http://alarm-redist.org/redist/reference/redist.identify.cores.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Identify Cores of a District (Heuristic) — make_cores","text":"","code":"data(fl250) fl250_map <- redist_map(fl250, ndists = 4, pop_tol = 0.01) #> Projecting to CRS 3857 plan <- as.matrix(redist_smc(fl250_map, 20, silent = TRUE)) core <- redist.identify.cores(adj = fl250_map$adj, plan = plan) redist.plot.cores(shp = fl250, plan = plan, core = core)"},{"path":"http://alarm-redist.org/redist/reference/redist.init.enumpart.html","id":null,"dir":"Reference","previous_headings":"","what":"Initialize enumpart — redist.init.enumpart","title":"Initialize enumpart — redist.init.enumpart","text":"ensures enumerate partitions programs prepared run. must run per install redist package.","code":""},{"path":"http://alarm-redist.org/redist/reference/redist.init.enumpart.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Initialize enumpart — redist.init.enumpart","text":"","code":"redist.init.enumpart()"},{"path":"http://alarm-redist.org/redist/reference/redist.init.enumpart.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Initialize enumpart — redist.init.enumpart","text":"0 success","code":""},{"path":"http://alarm-redist.org/redist/reference/redist.init.enumpart.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Initialize enumpart — redist.init.enumpart","text":"Benjamin Fifield, Kosuke Imai, Jun Kawahara, Christopher T Kenny. \"Essential Role Empirical Validation Legislative Redistricting Simulation.\" Forthcoming, Statistics Public Policy.","code":""},{"path":"http://alarm-redist.org/redist/reference/redist.init.enumpart.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Initialize enumpart — redist.init.enumpart","text":"","code":"if (FALSE) { # \\dontrun{ redist.init.enumpart() } # }"},{"path":"http://alarm-redist.org/redist/reference/redist.ipw.html","id":null,"dir":"Reference","previous_headings":"","what":"Inverse probability reweighting for MCMC Redistricting — redist.ipw","title":"Inverse probability reweighting for MCMC Redistricting — redist.ipw","text":"redist.ipw properly weights resamples simulated redistricting plans set simulated plans resemble random sample underlying distribution. redist.ipw used correct sample population parity, geographic compactness, constraints implemented.","code":""},{"path":"http://alarm-redist.org/redist/reference/redist.ipw.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Inverse probability reweighting for MCMC Redistricting — redist.ipw","text":"","code":"redist.ipw(   plans,   resampleconstraint = c(\"pop_dev\", \"edges_removed\", \"segregation\", \"status_quo\"),   targetbeta,   targetpop = NULL,   temper = 0 )"},{"path":"http://alarm-redist.org/redist/reference/redist.ipw.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Inverse probability reweighting for MCMC Redistricting — redist.ipw","text":"plans object class redist_plans redist_flip(). resampleconstraint constraint implemented simulations: one \"pop\", \"compact\", \"segregation\", \"similar\". targetbeta target value constraint. targetpop desired level population parity. targetpop = 0.01 means desired distance population parity 1%. default NULL. temper flag whether simulated tempering used improve mixing Markov Chain. default 1.","code":""},{"path":"http://alarm-redist.org/redist/reference/redist.ipw.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Inverse probability reweighting for MCMC Redistricting — redist.ipw","text":"redist.ipw returns object class \"redist\". object redist list contains following components (inclusion components dependent whether tempering techniques used): plans Matrix congressional district assignments generated algorithm. row corresponds geographic unit, column corresponds simulation. distance_parity Vector containing maximum distance parity particular simulated redistricting plan. mhdecisions vector specifying whether proposed redistricting plan accepted (1) rejected (0) given iteration. mhprob vector containing Metropolis-Hastings acceptance probability iteration algorithm. pparam vector containing draw p parameter simulation, dictates number swaps attempted. constraint_pop vector containing value population constraint accepted redistricting plan. constraint_compact vector containing value compactness constraint accepted redistricting plan. constraint_segregation vector containing value segregation constraint accepted redistricting plan. constraint_similar vector containing value similarity constraint accepted redistricting plan. constraint_vra vector containing value vra constraint accepted redistricting plan. constraint_partisan vector containing value partisan constraint accepted redistricting plan. constraint_minority vector containing value minority constraint accepted redistricting plan. constraint_hinge vector containing value hinge constraint accepted redistricting plan. constraint_qps vector containing value QPS constraint accepted redistricting plan. beta_sequence vector containing value beta iteration algorithm. Returned tempering used. mhdecisions_beta vector specifying whether proposed beta value accepted (1) rejected (0) given iteration algorithm. Returned tempering used. mhprob_beta vector containing Metropolis-Hastings acceptance probability iteration algorithm. Returned tempering used.","code":""},{"path":"http://alarm-redist.org/redist/reference/redist.ipw.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Inverse probability reweighting for MCMC Redistricting — redist.ipw","text":"function allows users resample redistricting plans using inverse probability weighting techniques described Rubin (1987). techniques reweights resamples redistricting plans resulting sample representative random sample uniform distribution.","code":""},{"path":"http://alarm-redist.org/redist/reference/redist.ipw.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Inverse probability reweighting for MCMC Redistricting — redist.ipw","text":"Fifield, Benjamin, Michael Higgins, Kosuke Imai Alexander Tarr. (2016) \"New Automated Redistricting Simulator Using Markov Chain Monte Carlo.\" Working Paper. Available http://imai.princeton.edu/research/files/redist.pdf. Rubin, Donald. (1987) \"Comment: Noniterative Sampling/Importance Resampling Alternative Data Augmentation Algorithm Creating Imputations Fractions Missing Information Modest: SIR Algorithm.\" Journal American Statistical Association.","code":""},{"path":"http://alarm-redist.org/redist/reference/redist.ipw.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Inverse probability reweighting for MCMC Redistricting — redist.ipw","text":"","code":"# \\donttest{ data(iowa) map_ia <- redist_map(iowa, existing_plan = cd_2010, pop_tol = 0.01) cons <- redist_constr(map_ia) cons <- add_constr_pop_dev(cons, strength = 5.4) alg <- redist_flip(map_ia, nsims = 500, constraints = cons) #>  #> ── redist_flip() ─────────────────────────────────────────────────────────────── #>  #> ── Automated Redistricting Simulation Using Markov Chain Monte Carlo ── #> ℹ Preprocessing data. #> ℹ Starting swMH(). #> ■                                  0% | ETA: 1s #> ■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■  100% | ETA:  0s | MH Acceptance: 0.96 #>   alg_ipw <- redist.ipw(plans = alg,     resampleconstraint = \"pop_dev\",     targetbeta = 1,     targetpop = 0.05) # }"},{"path":"http://alarm-redist.org/redist/reference/redist.mcmc.mpi.html","id":null,"dir":"Reference","previous_headings":"","what":"MCMC Redistricting Simulator using MPI — redist.mcmc.mpi","title":"MCMC Redistricting Simulator using MPI — redist.mcmc.mpi","text":"redist.mcmc.mpi used simulate Congressional redistricting plans using Markov Chain Monte Carlo methods.","code":""},{"path":"http://alarm-redist.org/redist/reference/redist.mcmc.mpi.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"MCMC Redistricting Simulator using MPI — redist.mcmc.mpi","text":"","code":"redist.mcmc.mpi(   adj,   total_pop,   nsims,   ndists = NA,   init_plan = NULL,   loopscompleted = 0,   nloop = 1,   nthin = 1,   eprob = 0.05,   lambda = 0,   pop_tol = NA,   group_pop = NA,   areasvec = NA,   counties = NA,   borderlength_mat = NA,   ssdmat = NA,   compactness_metric = \"fryer-holden\",   rngseed = NA,   constraint = NA,   constraintweights = NA,   betaseq = \"powerlaw\",   betaseqlength = 10,   adjswaps = TRUE,   freq = 100,   savename = NA,   maxiterrsg = 5000,   verbose = FALSE,   cities = NULL )"},{"path":"http://alarm-redist.org/redist/reference/redist.mcmc.mpi.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"MCMC Redistricting Simulator using MPI — redist.mcmc.mpi","text":"adj adjacency matrix, list, object class \"SpatialPolygonsDataFrame.\" total_pop vector containing populations geographic unit. nsims number simulations run save point. ndists number congressional districts. default NULL. init_plan vector containing congressional district labels geographic unit. default NULL. provided, random contiguous congressional district assignments generated using redist.rsg. loopscompleted Number save points reached algorithm. default 0. nloop total number save points algorithm. default 1. Note total number simulations run nsims * nloop. nthin amount thin Markov Chain. default 1. eprob probability keeping edge connected. default 0.05. lambda parameter determining number swaps attempt iteration algorithm. number swaps iteration equal Pois(lambda) + 1. default 0. pop_tol strength hard population constraint. pop_tol = 0.05 means proposed swap brings district 5\\ rejected. default NULL. group_pop vector populations sub-group interest. default NULL. areasvec vector precinct areas discrete Polsby-Popper. default NULL. counties vector county membership assignments. default NULL. borderlength_mat matrix border length distances, first two columns indices precincts sharing border third column distance. Default NULL. ssdmat matrix squared distances geographic units. default NULL. compactness_metric compactness metric use constraining compactness. Default fryer-holden, implemented option polsby-popper. rngseed Allows user set seed simulations. Default NULL. constraint constraint apply. Accepts combination compact, vra, population, similarity, none (constraint applied). default NULL. constraintweights weights apply constraint. vector length constraint. Default NULL. betaseq Sequence beta values tempering. default powerlaw (see Fifield et. al (2015) details). betaseqlength Length beta sequence desired tempering. default 10. adjswaps Flag restrict swaps beta values adjacent current constraint proposed. default TRUE. freq Frequency -chain swaps. Default every 100 iterations savename Filename save simulations. Default NULL. maxiterrsg Maximum number iterations random seed--grow algorithm generate starting values. Default 5000. verbose Whether print initialization statement. Default TRUE. cities integer vector cities QPS constraint.","code":""},{"path":"http://alarm-redist.org/redist/reference/redist.mcmc.mpi.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"MCMC Redistricting Simulator using MPI — redist.mcmc.mpi","text":"redist.mcmc.mpi returns object class \"redist\". object redist list contains following components (inclusion components dependent whether tempering techniques used): partitions Matrix congressional district assignments generated algorithm. row corresponds geographic unit, column corresponds simulation. distance_parity Vector containing maximum distance parity particular simulated redistricting plan. mhdecisions vector specifying whether proposed redistricting plan accepted (1) rejected (0) given iteration. mhprob vector containing Metropolis-Hastings acceptance probability iteration algorithm. pparam vector containing draw p parameter simulation, dictates number swaps attempted. constraint_pop vector containing value population constraint accepted redistricting plan. constraint_compact vector containing value compactness constraint accepted redistricting plan. constraint_vra vector containing value vra constraint accepted redistricting plan. constraint_similar vector containing value similarity constraint accepted redistricting plan. beta_sequence vector containing value beta iteration algorithm. Returned tempering used. mhdecisions_beta vector specifying whether proposed beta value accepted (1) rejected (0) given iteration algorithm. Returned tempering used. mhprob_beta vector containing Metropolis-Hastings acceptance probability iteration algorithm. Returned tempering used.","code":""},{"path":"http://alarm-redist.org/redist/reference/redist.mcmc.mpi.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"MCMC Redistricting Simulator using MPI — redist.mcmc.mpi","text":"function allows users simulate redistricting plans using Markov Chain Monte Carlo methods. Several constraints corresponding substantive requirements redistricting process implemented, including population parity geographic compactness. addition, function includes multiple-swap parallel tempering functionality MPI improve mixing Markov Chain.","code":""},{"path":"http://alarm-redist.org/redist/reference/redist.mcmc.mpi.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"MCMC Redistricting Simulator using MPI — redist.mcmc.mpi","text":"Fifield, Benjamin, Michael Higgins, Kosuke Imai Alexander Tarr. (2016) \"New Automated Redistricting Simulator Using Markov Chain Monte Carlo.\" Working Paper. Available http://imai.princeton.edu/research/files/redist.pdf.","code":""},{"path":"http://alarm-redist.org/redist/reference/redist.mcmc.mpi.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"MCMC Redistricting Simulator using MPI — redist.mcmc.mpi","text":"","code":"if (FALSE) { # \\dontrun{ # Cannot run on machines without Rmpi data(fl25) data(fl25_enum) data(fl25_adj)  ## Code to run the simulations in Figure 4 in Fifield, Higgins, Imai and ## Tarr (2015)  ## Get an initial partition init_plan <- fl25_enum$plans[, 5118]  ## Run the algorithm redist.mcmc.mpi(adj = fl25_adj, total_pop = fl25$pop,     init_plan = init_plan, nsims = 10000, savename = \"test\") } # }"},{"path":"http://alarm-redist.org/redist/reference/redist.metrics.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate gerrymandering metrics for a set of plans — partisan_metrics","title":"Calculate gerrymandering metrics for a set of plans — partisan_metrics","text":"redist.metrics used compute different gerrymandering metrics set maps.","code":""},{"path":"http://alarm-redist.org/redist/reference/redist.metrics.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate gerrymandering metrics for a set of plans — partisan_metrics","text":"","code":"partisan_metrics(map, measure, rvote, dvote, ..., .data = cur_plans())  redist.metrics(   plans,   measure = \"DSeats\",   rvote,   dvote,   tau = 1,   biasV = 0.5,   respV = 0.5,   bandwidth = 0.01,   draw = 1 )"},{"path":"http://alarm-redist.org/redist/reference/redist.metrics.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate gerrymandering metrics for a set of plans — partisan_metrics","text":"map redist_map object measure vector string measure desired list \"DSeats\", \"DVS\", \"EffGap\", \"EffGapEqPop\", \"TauGap\", \"MeanMedian\", \"Bias\", \"BiasV\", \"Declination\", \"Responsiveness\", \"LopsidedWins\", \"RankedMarginal\", \"SmoothedSeat\". Use \"\" get metrics. \"DSeats\" \"DVS\" always computed, recommended always return values. rvote numeric vector Republican vote precinct. dvote numeric vector Democratic vote precinct. ... passed redist.metrics .data redist_plans object plans numeric vector (one map) matrix one row precinct one column map. Required. tau non-negative number calculating Tau Gap. used option \"TauGap\". Defaults 1. biasV value 0 1 compute bias . used option \"BiasV\". Defaults 0.5. respV value 0 1 compute responsiveness . used option \"Responsiveness\". Defaults 0.5. bandwidth value 0 1 computing responsiveness. used option \"Responsiveness.\" Defaults 0.01. draw numeric specify draw number. Defaults 1 one map provided column number multiple maps given. Can also take factor input, become draw column output length matches number entries plans. plans input redist_plans object, extracts draw identifier.","code":""},{"path":"http://alarm-redist.org/redist/reference/redist.metrics.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate gerrymandering metrics for a set of plans — partisan_metrics","text":"tibble  column specified measure column specifies map number.","code":""},{"path":"http://alarm-redist.org/redist/reference/redist.metrics.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Calculate gerrymandering metrics for a set of plans — partisan_metrics","text":"function computes specified compactness scores map.  one precinct specified map, aggregates district level computes one score. DSeats computed expected number Democratic seats change votes. DVS Democratic Vote Share, two party vote share Democratic votes numerator. EffGap Efficiency Gap, calculated votes directly. EffGapEqPop Efficiency Gap Equal Population assumption, calculated DVS. TauGap Tau Gap, computed Equal Population assumption. MeanMedian Mean Median difference. Bias Partisan Bias computed 0.5. BiasV Partisan Bias computed value V. Declination value declination 0.5. Responsiveness responsiveness user-supplied value user-supplied bandwidth. LopsidedWins computed Lopsided Outcomes value, produce test statistic. RankedMarginal computes Ranked Marginal Deviation (0-1, smaller better). also known \"Gerrymandering Index\" sometimes presented value divided 10000. SmoothedSeat computes Smoothed Seat Count Deviation (0-1, smaller R Bias, bigger D Bias).","code":""},{"path":"http://alarm-redist.org/redist/reference/redist.metrics.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Calculate gerrymandering metrics for a set of plans — partisan_metrics","text":"Jonathan N. Katz, Gary King, Elizabeth Rosenblatt. 2020. Theoretical Foundations Empirical Evaluations Partisan Fairness District-Based Democracies. American Political Science Review, 114, 1, Pp. 164-178. Gregory S. Warrington. 2018. \"Quantifying Gerrymandering Using Vote Distribution.\" Election Law Journal: Rules, Politics, Policy. Pp. 39-57.http://doi.org/10.1089/elj.2017.0447 Samuel S.-H. Wang. 2016. \"Three Tests Practical Evaluation Partisan Gerrymandering.\" Stanford Law Review, 68, Pp. 1263 - 1321. Gregory Herschlag, Han Sung Kang, Justin Luo, Christy Vaughn Graves, Sachet Bangia, Robert Ravier & Jonathan C. Mattingly (2020) Quantifying Gerrymandering North Carolina, Statistics Public Policy, 7:1, 30-38, DOI: 10.1080/2330443X.2020.1796400","code":""},{"path":"http://alarm-redist.org/redist/reference/redist.metrics.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Calculate gerrymandering metrics for a set of plans — partisan_metrics","text":"","code":"data(fl25) data(fl25_enum) plans_05 <- fl25_enum$plans[, fl25_enum$pop_dev <= 0.05] # old: redist.metrics(plans_05, measure = \"DSeats\", rvote = fl25$mccain, dvote = fl25$obama) part_dseats(plans_05, fl25, mccain, obama) #>   [1] 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 2 2 2 3 3 3 2 2 2 2 2 2 3 3 3 3 3 3 3 3 3 2 #>  [38] 2 2 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 2 2 #>  [75] 2 2 2 2 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 2 2 2 3 3 3 3 3 3 3 3 3 #> [112] 2 2 2 2 2 2 3 3 3 3 3 3 2 2 2 2 2 2 3 3 3 2 2 2 3 3 3 2 2 2 2 2 2 2 2 2 2 #> [149] 2 2 3 3 3 2 2 2 2 2 2 2 2 2 2 2 2 3 3 3 2 2 2 3 3 3 2 2 2 2 2 2 2 2 2 2 2 #> [186] 2 2 2 2 2 2 2 3 3 3 3 3 3 3 3 3 2 2 2 2 2 2 3 3 3 2 2 2 2 2 2 2 2 2 2 2 2 #> [223] 3 3 3 2 2 2 3 3 3 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 #> [260] 2 2 2 2 2 3 3 3 2 2 2 3 3 3 2 2 2 3 3 3 2 2 2 3 3 3 3 3 3 2 2 2 3 3 3 3 3 #> [297] 3 3 3 3 2 2 2 2 2 2 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 2 2 2 #> [334] 2 2 2 3 3 3 2 2 2 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 2 2 2 3 3 3 2 2 2 2 #> [371] 2 2 3 3 3 3 3 3 2 2 2 3 3 3 3 3 3 2 2 2 3 3 3 3 3 3 2 2 2 3 3 3 3 3 3 3 3 #> [408] 3 3 3 3 3 3 3 2 2 2 3 3 3 2 2 2 3 3 3 2 2 2 2 2 2 2 2 2 3 3 3 3 3 3 3 3 3 #> [445] 3 3 3 2 2 2 3 3 3 2 2 2 2 2 2 3 3 3 2 2 2 3 3 3 3 3 3 2 2 2 3 3 3 3 3 3 3 #> [482] 3 3 2 2 2 3 3 3 3 3 3 3 3 3 2 2 2 3 3 3 2 2 2 3 3 3 3 3 3 3 3 3 2 2 2 2 2 #> [519] 2 3 3 3 3 3 3 3 3 3 2 2 2 3 3 3 2 2 2 3 3 3 2 2 2 2 2 2 2 2 2 2 2 2 3 3 3 #> [556] 3 3 3 2 2 2 3 3 3 2 2 2 3 3 3 3 3 3 3 3 3"},{"path":"http://alarm-redist.org/redist/reference/redist.multisplits.html","id":null,"dir":"Reference","previous_headings":"","what":"Counts the Number of Counties Split Between 3 or More Districts — redist.multisplits","title":"Counts the Number of Counties Split Between 3 or More Districts — redist.multisplits","text":"Counts total number counties split across 2 districts.","code":""},{"path":"http://alarm-redist.org/redist/reference/redist.multisplits.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Counts the Number of Counties Split Between 3 or More Districts — redist.multisplits","text":"","code":"redist.multisplits(plans, counties)"},{"path":"http://alarm-redist.org/redist/reference/redist.multisplits.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Counts the Number of Counties Split Between 3 or More Districts — redist.multisplits","text":"plans numeric vector (one map) matrix one row precinct one column map. Required. counties vector county names county ids.","code":""},{"path":"http://alarm-redist.org/redist/reference/redist.multisplits.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Counts the Number of Counties Split Between 3 or More Districts — redist.multisplits","text":"integer matrix district ","code":""},{"path":"http://alarm-redist.org/redist/reference/redist.multisplits.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Counts the Number of Counties Split Between 3 or More Districts — redist.multisplits","text":"","code":"data(iowa) ia <- redist_map(iowa, existing_plan = cd_2010, total_pop = pop, pop_tol = 0.01) plans <- redist_smc(ia, 50, silent = TRUE) #old redist.multisplits(plans, ia$region) splits_multi(plans, ia, region) #>   [1] 2 2 2 2 4 4 4 4 2 2 2 2 2 2 2 2 2 2 2 2 3 3 3 3 2 2 2 2 3 3 3 3 3 3 3 3 3 #>  [38] 3 3 3 3 3 3 3 2 2 2 2 2 2 2 2 3 3 3 3 2 2 2 2 2 2 2 2 2 2 2 2 3 3 3 3 3 3 #>  [75] 3 3 2 2 2 2 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 2 2 2 2 2 2 2 2 2 2 2 #> [112] 2 3 3 3 3 3 3 3 3 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 3 3 3 3 #> [149] 3 3 3 3 5 5 5 5 3 3 3 3 2 2 2 2 3 3 3 3 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 3 #> [186] 3 3 3 3 3 3 3 2 2 2 2 2 2 2 2 2 2 2 2"},{"path":"http://alarm-redist.org/redist/reference/redist.muni.splits.html","id":null,"dir":"Reference","previous_headings":"","what":"Counts the Number of Municipalities Split Between Districts — muni_splits","title":"Counts the Number of Municipalities Split Between Districts — muni_splits","text":"Counts total number municpalities split. Municipalities interpretation need cover entire state, differs counties.","code":""},{"path":"http://alarm-redist.org/redist/reference/redist.muni.splits.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Counts the Number of Municipalities Split Between Districts — muni_splits","text":"","code":"muni_splits(map, munis, .data = cur_plans())  redist.muni.splits(plans, munis)"},{"path":"http://alarm-redist.org/redist/reference/redist.muni.splits.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Counts the Number of Municipalities Split Between Districts — muni_splits","text":"map redist_map object munis vector municipality names ids. .data redist_plans object plans numeric vector (one map) matrix one row precinct one column map. Required.","code":""},{"path":"http://alarm-redist.org/redist/reference/redist.muni.splits.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Counts the Number of Municipalities Split Between Districts — muni_splits","text":"integer vector length ndist ncol(plans)","code":""},{"path":"http://alarm-redist.org/redist/reference/redist.muni.splits.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Counts the Number of Municipalities Split Between Districts — muni_splits","text":"","code":"data(iowa) ia <- redist_map(iowa, existing_plan = cd_2010, total_pop = pop, pop_tol = 0.01) plans <- redist_smc(ia, 50, silent = TRUE) ia$region[1:10] <- NA #old redist.muni.splits(plans, ia$region) splits_sub_admin(plans, ia, region) #>   [1] 5 5 5 5 4 4 4 4 4 4 4 4 5 5 5 5 4 4 4 4 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 #>  [38] 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 4 4 4 4 4 4 4 4 5 5 #>  [75] 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 4 4 4 4 5 5 5 #> [112] 5 4 4 4 4 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 #> [149] 5 5 5 5 5 5 5 5 4 4 4 4 5 5 5 5 4 4 4 4 4 4 4 4 5 5 5 5 4 4 4 4 4 4 4 4 5 #> [186] 5 5 5 4 4 4 4 4 4 4 4 4 4 4 4 5 5 5 5"},{"path":"http://alarm-redist.org/redist/reference/redist.parity.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculates Maximum Deviation from Population Parity — redist.parity","title":"Calculates Maximum Deviation from Population Parity — redist.parity","text":"Computes deviation population parity plan. Higher values indicate (least) single district map deviates population parity. See Details.","code":""},{"path":"http://alarm-redist.org/redist/reference/redist.parity.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculates Maximum Deviation from Population Parity — redist.parity","text":"","code":"redist.parity(plans, total_pop)  plan_parity(map, .data = pl(), ...)"},{"path":"http://alarm-redist.org/redist/reference/redist.parity.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculates Maximum Deviation from Population Parity — redist.parity","text":"plans matrix one row precinct one column map. Required. total_pop numeric vector population every precinct. map redist_map object .data redist_plans object ... passed redist.parity","code":""},{"path":"http://alarm-redist.org/redist/reference/redist.parity.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculates Maximum Deviation from Population Parity — redist.parity","text":"numeric vector population parity column","code":""},{"path":"http://alarm-redist.org/redist/reference/redist.parity.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Calculates Maximum Deviation from Population Parity — redist.parity","text":"map pop representing populations district, deviation population parity given max(abs(pop - parity) / parity) parity = sum(pop)/length(pop) population size average district. Therefore, metric can thought maximum percent deviation equal population. example, value 0.03 metric indicates districts within 3 percent population parity.","code":""},{"path":"http://alarm-redist.org/redist/reference/redist.plot.adj.html","id":null,"dir":"Reference","previous_headings":"","what":"Creates a Graph Overlay — redist.plot.adj","title":"Creates a Graph Overlay — redist.plot.adj","text":"Creates Graph Overlay","code":""},{"path":"http://alarm-redist.org/redist/reference/redist.plot.adj.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Creates a Graph Overlay — redist.plot.adj","text":"","code":"redist.plot.adj(   shp,   adj = NULL,   plan = NULL,   centroids = TRUE,   drop = FALSE,   plot_shp = TRUE,   zoom_to = NULL,   title = \"\" )"},{"path":"http://alarm-redist.org/redist/reference/redist.plot.adj.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Creates a Graph Overlay — redist.plot.adj","text":"shp SpatialPolygonsDataFrame sf object. Required. adj zero-indexed adjacency list. Created redist.adjacency supplied. Default NULL. plan numeric vector one entry precinct shp. Used remove edges cross boundaries. Default NULL.  Optional. centroids logical indicating centroids plotted. Default TRUE. drop logical indicating edges cross districts dropped. Default FALSE. plot_shp logical indicating shp plotted graph. Default TRUE. zoom_to <data-masking> indexing vector units zoom map . title string title plot. Defaults empty string. Optional.","code":""},{"path":"http://alarm-redist.org/redist/reference/redist.plot.adj.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Creates a Graph Overlay — redist.plot.adj","text":"ggplot map","code":""},{"path":"http://alarm-redist.org/redist/reference/redist.plot.adj.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Creates a Graph Overlay — redist.plot.adj","text":"","code":"data(iowa) redist.plot.adj(shp = iowa, plan = iowa$cd_2010)"},{"path":"http://alarm-redist.org/redist/reference/redist.plot.contr_pfdr.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot a Projective Contrast with positive False Discovery Rate (pFDR) Control — redist.plot.contr_pfdr","title":"Plot a Projective Contrast with positive False Discovery Rate (pFDR) Control — redist.plot.contr_pfdr","text":"Plot projective contrast map areas selected pFDR control procedure hatched.","code":""},{"path":"http://alarm-redist.org/redist/reference/redist.plot.contr_pfdr.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot a Projective Contrast with positive False Discovery Rate (pFDR) Control — redist.plot.contr_pfdr","text":"","code":"redist.plot.contr_pfdr(   map,   contr,   level = 0.05,   density = 0.2,   spacing = 0.015 )"},{"path":"http://alarm-redist.org/redist/reference/redist.plot.contr_pfdr.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot a Projective Contrast with positive False Discovery Rate (pFDR) Control — redist.plot.contr_pfdr","text":"map redist_map object contr output proj_contr() pfdr=TRUE: vector containing contrast attribute \"q\" containing q-values. level positive false discovery rate level control. density density hatching (roughly portion shaded). spacing spacing hatches.","code":""},{"path":"http://alarm-redist.org/redist/reference/redist.plot.contr_pfdr.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot a Projective Contrast with positive False Discovery Rate (pFDR) Control — redist.plot.contr_pfdr","text":"ggplot.","code":""},{"path":"http://alarm-redist.org/redist/reference/redist.plot.contr_pfdr.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Plot a Projective Contrast with positive False Discovery Rate (pFDR) Control — redist.plot.contr_pfdr","text":"","code":"# example code set.seed(1812) data(iowa) map <- redist_map(iowa, existing_plan = cd_2010, pop_tol = 0.01) plans <- redist_smc(map, 50, silent = TRUE) plans$dem <- group_frac(map, dem_08, tot_08, plans)  pc = proj_contr(plans, dem, pfdr=TRUE) redist.plot.contr_pfdr(map, pc, level=0.4) # high `level` just to demonstrate"},{"path":"http://alarm-redist.org/redist/reference/redist.plot.cores.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot Cores — redist.plot.cores","title":"Plot Cores — redist.plot.cores","text":"Plot Cores","code":""},{"path":"http://alarm-redist.org/redist/reference/redist.plot.cores.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot Cores — redist.plot.cores","text":"","code":"redist.plot.cores(shp, plan = NULL, core = NULL, lwd = 2)"},{"path":"http://alarm-redist.org/redist/reference/redist.plot.cores.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot Cores — redist.plot.cores","text":"shp SpatialPolygonsDataFrame sf object. Required. plan numeric vector one entry precinct shp. Used color districts. Required. core Required. integer vector produced redist.identify.cores(). lwd Line width. Defaults 2.","code":""},{"path":"http://alarm-redist.org/redist/reference/redist.plot.cores.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot Cores — redist.plot.cores","text":"ggplot","code":""},{"path":"http://alarm-redist.org/redist/reference/redist.plot.distr_qtys.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot quantities by district — redist.plot.distr_qtys","title":"Plot quantities by district — redist.plot.distr_qtys","text":"Plots boxplot quantity interest across districts, districts optionally sorted quantity. Adds reference points reference plan, applicable.","code":""},{"path":"http://alarm-redist.org/redist/reference/redist.plot.distr_qtys.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot quantities by district — redist.plot.distr_qtys","text":"","code":"redist.plot.distr_qtys(   plans,   qty,   sort = \"asc\",   geom = \"jitter\",   color_thresh = NULL,   size = 0.1,   ref_geom,   ref_label,   ... )"},{"path":"http://alarm-redist.org/redist/reference/redist.plot.distr_qtys.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot quantities by district — redist.plot.distr_qtys","text":"plans redist_plans object. qty <data-masking> quantity interest. sort set \"asc\" sort districts ascending order qty (default), \"desc\" descending order, FALSE \"none\" sorting. geom ggplot2 geom use plotting simulated districts: either \"jitter\" \"boxplot\". Can also take function, long function accepts .... color_thresh number, threshold use coloring points. Plans quantities interest threshold colored differently plans threshold. size dot size geom=\"jitter\". ref_geom reference plan geometry type. \"line\" \"point\" can passed reasonable defaults. Can also take function, long function accepts .... ref_label human-readable name reference plan. default name plan column used. can also take function returns call ggplot2::labs(). ... passed geom_boxplot","code":""},{"path":"http://alarm-redist.org/redist/reference/redist.plot.distr_qtys.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot quantities by district — redist.plot.distr_qtys","text":"ggplot","code":""},{"path":"http://alarm-redist.org/redist/reference/redist.plot.distr_qtys.html","id":"using-ggdist","dir":"Reference","previous_headings":"","what":"Using ggdist","title":"Plot quantities by district — redist.plot.distr_qtys","text":"custom functions geom, can also create complicated things like rainclouds using ggdist package. example:   functions can passed geom.","code":"raincloud <- function(...) { list(     ggdist::stat_slab(aes(thickness = ggplot2::after_stat(pdf*n)), scale = 0.7),    ggdist::stat_dotsinterval(side = \"bottom\", scale = 0.7,                              slab_size = NA, quantiles = 200) ) }"},{"path":"http://alarm-redist.org/redist/reference/redist.plot.distr_qtys.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Plot quantities by district — redist.plot.distr_qtys","text":"","code":"library(dplyr) data(iowa)  iowa <- redist_map(iowa, existing_plan = cd_2010, pop_tol = 0.05, total_pop = pop) plans <- redist_smc(iowa, nsims = 100, silent = TRUE) plans <- plans %>% mutate(pct_dem = group_frac(iowa, dem_08, tot_08)) redist.plot.distr_qtys(plans, pct_dem) #> Ignoring unknown labels: #> • shape : \"Plan\"   # It also takes custom functions: redist.plot.distr_qtys(plans, pct_dem, geom = ggplot2::geom_violin) #> Ignoring unknown labels: #> • shape : \"Plan\"   # With the raincloud example, if you have `ggdist`, you can run: # redist.plot.distr_qtys(plans, pct_dem, geom = raincloud)  # The reference geom can also be changed via `reg_geom` r_geom <- function(...) ggplot2::geom_segment(ggplot2::aes(as.integer(.data$.distr_no) - 0.5,                           xend = as.integer(.data$.distr_no) + 0.5,                           yend = pct_dem,                           color = .data$draw),                       linewidth = 1.2, ...)    # Finally, the `ref_label` argument can also be swapped for a function, like so: redist.plot.distr_qtys(plans, pct_dem, geom = ggplot2::geom_violin, ref_geom = r_geom,     ref_label = function() ggplot2::labs(color = 'Ref.'))"},{"path":"http://alarm-redist.org/redist/reference/redist.plot.hist.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot a histogram of a summary statistic — redist.plot.hist","title":"Plot a histogram of a summary statistic — redist.plot.hist","text":"Plots histogram statistic redist_plans object, reference line reference plan, applicable.","code":""},{"path":"http://alarm-redist.org/redist/reference/redist.plot.hist.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot a histogram of a summary statistic — redist.plot.hist","text":"","code":"redist.plot.hist(plans, qty, bins = NULL, ...)  # S3 method for class 'redist_plans' hist(x, qty, ...)"},{"path":"http://alarm-redist.org/redist/reference/redist.plot.hist.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot a histogram of a summary statistic — redist.plot.hist","text":"plans redist_plans object. qty <data-masking> statistic. bins number bins use histogram. Defaults Freedman-Diaconis rule. ... passed geom_histogram x <data-masking> statistic.","code":""},{"path":"http://alarm-redist.org/redist/reference/redist.plot.hist.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot a histogram of a summary statistic — redist.plot.hist","text":"ggplot","code":""},{"path":"http://alarm-redist.org/redist/reference/redist.plot.hist.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Plot a histogram of a summary statistic — redist.plot.hist","text":"","code":"library(dplyr) data(iowa)  iowa <- redist_map(iowa, existing_plan = cd_2010, pop_tol = 0.05) plans <- redist_smc(iowa, nsims = 100, silent = TRUE) group_by(plans, draw) %>%     summarize(pop_dev = max(abs(total_pop/mean(total_pop) - 1))) %>%     redist.plot.hist(pop_dev)"},{"path":"http://alarm-redist.org/redist/reference/redist.plot.majmin.html","id":null,"dir":"Reference","previous_headings":"","what":"Majority Minority Plots — redist.plot.majmin","title":"Majority Minority Plots — redist.plot.majmin","text":"Majority Minority Plots","code":""},{"path":"http://alarm-redist.org/redist/reference/redist.plot.majmin.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Majority Minority Plots — redist.plot.majmin","text":"","code":"redist.plot.majmin(grouppercent, type = \"hist\", title = \"\")"},{"path":"http://alarm-redist.org/redist/reference/redist.plot.majmin.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Majority Minority Plots — redist.plot.majmin","text":"grouppercent output redist.group.percent type string 'hist', 'toptwo', 'box' title ggplot title","code":""},{"path":"http://alarm-redist.org/redist/reference/redist.plot.majmin.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Majority Minority Plots — redist.plot.majmin","text":"ggplot","code":""},{"path":"http://alarm-redist.org/redist/reference/redist.plot.map.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot a Map — redist.plot.map","title":"Plot a Map — redist.plot.map","text":"Create ggplot map. fills plan argument fill. supplied, plan used color fill alpha parameter.","code":""},{"path":"http://alarm-redist.org/redist/reference/redist.plot.map.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot a Map — redist.plot.map","text":"","code":"redist.plot.map(   shp,   adj,   plan = NULL,   fill = NULL,   fill_label = \"\",   zoom_to = NULL,   boundaries = is.null(fill),   title = \"\" )"},{"path":"http://alarm-redist.org/redist/reference/redist.plot.map.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot a Map — redist.plot.map","text":"shp SpatialPolygonsDataFrame, sf object, redist_map. Required. adj zero-indexed adjacency list. Created redist.adjacency supplied needed coloring. Default NULL. plan <data-masking> numeric vector one entry precinct shp. Used color districts. Default NULL.  Optional. fill <data-masking> numeric/integer vector values color plot . Optional. fill_label string title plot. Defaults empty string zoom_to <data-masking> indexing vector units zoom map . boundaries logical indicating precinct boundaries plotted. title string title plot. Defaults empty string. Optional.","code":""},{"path":"http://alarm-redist.org/redist/reference/redist.plot.map.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot a Map — redist.plot.map","text":"ggplot map","code":""},{"path":"http://alarm-redist.org/redist/reference/redist.plot.map.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Plot a Map — redist.plot.map","text":"","code":"data(iowa) redist.plot.map(shp = iowa, plan = iowa$cd_2010)   iowa_map <- redist_map(iowa, existing_plan = cd_2010) #> `pop_tol` calculated from existing plan is ≤ 0.1% redist.plot.map(iowa_map, fill = dem_08/tot_08, zoom_to = (cd_2010 == 1))"},{"path":"http://alarm-redist.org/redist/reference/redist.plot.penalty.html","id":null,"dir":"Reference","previous_headings":"","what":"(Deprecated) Visualize Group Power Penalty — redist.plot.penalty","title":"(Deprecated) Visualize Group Power Penalty — redist.plot.penalty","text":"Plots shape add_constr_grp_pow() penalty.","code":""},{"path":"http://alarm-redist.org/redist/reference/redist.plot.penalty.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"(Deprecated) Visualize Group Power Penalty — redist.plot.penalty","text":"","code":"redist.plot.penalty(   tgt_min = 0.55,   tgt_other = 0.25,   strength_vra = 2500,   pow_vra = 1.5,   limits = TRUE )"},{"path":"http://alarm-redist.org/redist/reference/redist.plot.penalty.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"(Deprecated) Visualize Group Power Penalty — redist.plot.penalty","text":"tgt_min double, defaults 0.55. minority target percent. tgt_other double, defaults 0.25. group target percent. strength_vra double, strength VRA constraint. pow_vra double, exponent VRA constraint. limits Whether limit y axis 0,500. Default TRUE comparability across values.","code":""},{"path":"http://alarm-redist.org/redist/reference/redist.plot.penalty.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"(Deprecated) Visualize Group Power Penalty — redist.plot.penalty","text":"ggplot","code":""},{"path":"http://alarm-redist.org/redist/reference/redist.plot.penalty.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"(Deprecated) Visualize Group Power Penalty — redist.plot.penalty","text":"function allows plot un-exponentiated penalty implemented add_constr_grp_pow(). function takes two key inputs, tgt_min tgt_other center minimum penalty spots. higher y-value indicates higher penalty incentivizes moving towards spot lower y-value. x-axis indicates group population proportion given district.","code":""},{"path":"http://alarm-redist.org/redist/reference/redist.plot.plans.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot a district assignment — redist.plot.plans","title":"Plot a district assignment — redist.plot.plans","text":"Plot district assignment","code":""},{"path":"http://alarm-redist.org/redist/reference/redist.plot.plans.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot a district assignment — redist.plot.plans","text":"","code":"redist.plot.plans(   plans,   draws,   shp,   qty = NULL,   interactive = FALSE,   ...,   geom = NULL )"},{"path":"http://alarm-redist.org/redist/reference/redist.plot.plans.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot a district assignment — redist.plot.plans","text":"plans redist_plans object. draws plan(s) plot. match draw column x. qty quantity plot. Defaults district assignment. interactive TRUE, show interactive map viewer rather static map. uses first element draws ... additional arguments passed plotting functions. geom, shp redist_map geometry use (geom deprecated).","code":""},{"path":"http://alarm-redist.org/redist/reference/redist.plot.plans.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot a district assignment — redist.plot.plans","text":"ggplot","code":""},{"path":"http://alarm-redist.org/redist/reference/redist.plot.plans.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Plot a district assignment — redist.plot.plans","text":"","code":"library(dplyr) data(iowa)  iowa <- redist_map(iowa, existing_plan = cd_2010, pop_tol = 0.05, total_pop = pop) plans <- redist_smc(iowa, nsims = 100, silent = TRUE) redist.plot.plans(plans, c(1, 2, 3, 4), iowa)"},{"path":"http://alarm-redist.org/redist/reference/redist.plot.scatter.html","id":null,"dir":"Reference","previous_headings":"","what":"Scatter plot of plan summary statistics — redist.plot.scatter","title":"Scatter plot of plan summary statistics — redist.plot.scatter","text":"Makes scatterplot two quantities interest across districts plans.","code":""},{"path":"http://alarm-redist.org/redist/reference/redist.plot.scatter.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Scatter plot of plan summary statistics — redist.plot.scatter","text":"","code":"redist.plot.scatter(plans, x, y, ..., bigger = TRUE)"},{"path":"http://alarm-redist.org/redist/reference/redist.plot.scatter.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Scatter plot of plan summary statistics — redist.plot.scatter","text":"plans redist_plans object. x <data-masking> quantity plot horizontal axis. y <data-masking> quantity plot vertical axis. ... passed geom_point. bigger TRUE, make point corresponding reference plan larger.","code":""},{"path":"http://alarm-redist.org/redist/reference/redist.plot.scatter.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Scatter plot of plan summary statistics — redist.plot.scatter","text":"ggplot","code":""},{"path":"http://alarm-redist.org/redist/reference/redist.plot.scatter.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Scatter plot of plan summary statistics — redist.plot.scatter","text":"","code":"library(dplyr) data(iowa)  iowa <- redist_map(iowa, existing_plan = cd_2010, pop_tol = 0.05, total_pop = pop) plans <- redist_smc(iowa, nsims = 100, silent = TRUE) plans %>%     mutate(comp = distr_compactness(iowa)) %>%     group_by(draw) %>%     summarize(pop_dev = max(abs(total_pop/mean(total_pop) - 1)),         comp = comp[1]) %>%     redist.plot.scatter(pop_dev, comp) #> Warning: There were 2 warnings in `\"draw\" %in% names(data)`. #> The first warning was: #> ℹ In argument: `comp = distr_compactness(iowa)`. #> Caused by warning in `distr_compactness()`: #> ! 'distr_compactness' is deprecated. #> See help(\"Deprecated\") #> ℹ Run `dplyr::last_dplyr_warnings()` to see the 1 remaining warning."},{"path":"http://alarm-redist.org/redist/reference/redist.plot.trace.html","id":null,"dir":"Reference","previous_headings":"","what":"Make a traceplot for a summary statistic — redist.plot.trace","title":"Make a traceplot for a summary statistic — redist.plot.trace","text":"statistic redist_plans object, make traceplot showing evolution statistic MCMC iterations.","code":""},{"path":"http://alarm-redist.org/redist/reference/redist.plot.trace.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Make a traceplot for a summary statistic — redist.plot.trace","text":"","code":"redist.plot.trace(plans, qty, district = 1L, ...)"},{"path":"http://alarm-redist.org/redist/reference/redist.plot.trace.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Make a traceplot for a summary statistic — redist.plot.trace","text":"plans redist_plans object. qty <data-masking> statistic. district redist_plans objects multiple districts, district subset plotting. Set NULL perform subsetting. ... passed geom_line","code":""},{"path":"http://alarm-redist.org/redist/reference/redist.plot.trace.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Make a traceplot for a summary statistic — redist.plot.trace","text":"ggplot","code":""},{"path":"http://alarm-redist.org/redist/reference/redist.plot.trace.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Make a traceplot for a summary statistic — redist.plot.trace","text":"","code":"library(dplyr) data(iowa)  iowa_map <- redist_map(iowa, existing_plan = cd_2010, pop_tol = 0.05) plans <- redist_mergesplit_parallel(iowa_map, nsims = 200, chains = 2, silent = TRUE) %>%     mutate(dem = group_frac(iowa_map, dem_08, dem_08 + rep_08)) %>%     number_by(dem) redist.plot.trace(plans, dem, district = 1)"},{"path":"http://alarm-redist.org/redist/reference/redist.plot.varinfo.html","id":null,"dir":"Reference","previous_headings":"","what":"Static Variation of Information Plot — redist.plot.varinfo","title":"Static Variation of Information Plot — redist.plot.varinfo","text":"Static Variation Information Plot","code":""},{"path":"http://alarm-redist.org/redist/reference/redist.plot.varinfo.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Static Variation of Information Plot — redist.plot.varinfo","text":"","code":"redist.plot.varinfo(plans, group_pop, total_pop, shp)"},{"path":"http://alarm-redist.org/redist/reference/redist.plot.varinfo.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Static Variation of Information Plot — redist.plot.varinfo","text":"plans matrix district assignments group_pop Required Population subgroup studied precinct. total_pop Required. Population precinct. shp sf dataframe","code":""},{"path":"http://alarm-redist.org/redist/reference/redist.plot.varinfo.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Static Variation of Information Plot — redist.plot.varinfo","text":"patchworked ggplot","code":""},{"path":"http://alarm-redist.org/redist/reference/redist.plot.wted.adj.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot Weighted Border Adjacency — redist.plot.wted.adj","title":"Plot Weighted Border Adjacency — redist.plot.wted.adj","text":"Plots weighted adjacency graph often precincts coocur. argument counties provided, subsets edges plot cross county boundary.","code":""},{"path":"http://alarm-redist.org/redist/reference/redist.plot.wted.adj.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot Weighted Border Adjacency — redist.plot.wted.adj","text":"","code":"redist.plot.wted.adj(   shp,   plans,   counties = NULL,   ref = TRUE,   adj = NULL,   plot_shp = TRUE )"},{"path":"http://alarm-redist.org/redist/reference/redist.plot.wted.adj.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot Weighted Border Adjacency — redist.plot.wted.adj","text":"shp SpatialPolygonsDataFrame, sf object, redist_map. Required. plans redist_plans object matrix redistricting plans, column indicates plan counties unquoted name column shp vector county assignments. Subsets edges cross boundary supplied. ref Plot reference map? Defaults TRUE gets existing plan adj zero-indexed adjacency list. Extracted shp shp redist_map. Otherwise created redist.adjacency supplied. Default NULL. plot_shp shapes plotted? Default TRUE.","code":""},{"path":"http://alarm-redist.org/redist/reference/redist.plot.wted.adj.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot Weighted Border Adjacency — redist.plot.wted.adj","text":"ggplot","code":""},{"path":"http://alarm-redist.org/redist/reference/redist.plot.wted.adj.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Plot Weighted Border Adjacency — redist.plot.wted.adj","text":"","code":"data(iowa) shp <- redist_map(iowa, existing_plan = cd_2010, pop_tol = 0.01) plans <- redist_smc(shp, 100) #> SEQUENTIAL MONTE CARLO #> Sampling 100 99-unit maps with 4 districts and population between 753973 and 769205. #> Split [0/3] ■                                | ETA? #> Split [3/3] ■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■  | ETA 0s #>  redist.plot.wted.adj(shp, plans = plans, counties = region) #> Warning: Use of `nb$wt` is discouraged. #> ℹ Use `wt` instead."},{"path":"http://alarm-redist.org/redist/reference/redist.prec.pop.overlap.html","id":null,"dir":"Reference","previous_headings":"","what":"Compare the Population Overlap Across Plans at the Precinct Level — redist.prec.pop.overlap","title":"Compare the Population Overlap Across Plans at the Precinct Level — redist.prec.pop.overlap","text":"Compare Population Overlap Across Plans Precinct Level","code":""},{"path":"http://alarm-redist.org/redist/reference/redist.prec.pop.overlap.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compare the Population Overlap Across Plans at the Precinct Level — redist.prec.pop.overlap","text":"","code":"redist.prec.pop.overlap(   plan_old,   plan_new,   total_pop,   weighting = \"s\",   normalize = TRUE,   index_only = FALSE,   return_mat = FALSE )"},{"path":"http://alarm-redist.org/redist/reference/redist.prec.pop.overlap.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compare the Population Overlap Across Plans at the Precinct Level — redist.prec.pop.overlap","text":"plan_old reference plan compare plan_new new plan compare reference plan total_pop total population precinct can also take redist_map object use population object. nothing provided, weights entries plan equally. weighting weighting done sum populations 's', mean populations 'm', geometric mean populations 'g', none 'n' normalize entries normalized total population index_only Default FALSE. TRUE returns one numeric index, mean upper triangle matrix, weighting normalization chosen. return_mat Defaults FALSE, returns summary row. TRUE returns matrix length(plan_old) rows columns. Ignored index_only = TRUE.","code":""},{"path":"http://alarm-redist.org/redist/reference/redist.prec.pop.overlap.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Compare the Population Overlap Across Plans at the Precinct Level — redist.prec.pop.overlap","text":"numeric vector length(plan_old) entries","code":""},{"path":"http://alarm-redist.org/redist/reference/redist.prec.pop.overlap.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Compare the Population Overlap Across Plans at the Precinct Level — redist.prec.pop.overlap","text":"","code":"set.seed(5) data(iowa) iowa_map <- redist_map(iowa, total_pop = pop, pop_tol = 0.01, ndists = 4) plans <- redist_smc(iowa_map, 2, silent = TRUE) plans_mat <- get_plans_matrix(plans) ov_vec <- redist.prec.pop.overlap(plans_mat[, 1], plans_mat[, 2], iowa_map) redist.prec.pop.overlap(plans_mat[, 1], plans_mat[, 2], iowa_map,  weighting = \"s\",     normalize = FALSE, index_only = TRUE) #> [1] 14020.52"},{"path":"http://alarm-redist.org/redist/reference/redist.prep.enumpart.html","id":null,"dir":"Reference","previous_headings":"","what":"Prepares a run of the enumpart algorithm by ordering edges — redist.prep.enumpart","title":"Prepares a run of the enumpart algorithm by ordering edges — redist.prep.enumpart","text":"Prepares run enumpart algorithm ordering edges","code":""},{"path":"http://alarm-redist.org/redist/reference/redist.prep.enumpart.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Prepares a run of the enumpart algorithm by ordering edges — redist.prep.enumpart","text":"","code":"redist.prep.enumpart(   adj,   unordered_path,   ordered_path,   weight_path = NULL,   total_pop = NULL )"},{"path":"http://alarm-redist.org/redist/reference/redist.prep.enumpart.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Prepares a run of the enumpart algorithm by ordering edges — redist.prep.enumpart","text":"adj zero indexed adjacency list unordered_path valid path output unordered adjacency map ordered_path valid path output ordered adjacency map weight_path path (including \".dat\") store space-delimited file containing vector vertex weights. supply total_pop. total_pop vector precinct populations. supply weight_path","code":""},{"path":"http://alarm-redist.org/redist/reference/redist.prep.enumpart.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Prepares a run of the enumpart algorithm by ordering edges — redist.prep.enumpart","text":"0 success","code":""},{"path":"http://alarm-redist.org/redist/reference/redist.prep.enumpart.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Prepares a run of the enumpart algorithm by ordering edges — redist.prep.enumpart","text":"Benjamin Fifield, Kosuke Imai, Jun Kawahara, Christopher T Kenny. \"Essential Role Empirical Validation Legislative Redistricting Simulation.\" Forthcoming, Statistics Public Policy.","code":""},{"path":"http://alarm-redist.org/redist/reference/redist.prep.enumpart.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Prepares a run of the enumpart algorithm by ordering edges — redist.prep.enumpart","text":"","code":"if (FALSE) { # \\dontrun{ temp <- tempdir() data(fl25) adj <- redist.adjacency(fl25) redist.prep.enumpart(adj = adj, unordered_path = paste0(temp, \"/unordered\"),     ordered_path = paste0(temp, \"/ordered\")) } # }"},{"path":"http://alarm-redist.org/redist/reference/redist.random.subgraph.html","id":null,"dir":"Reference","previous_headings":"","what":"Return a random subgraph of a shape — redist.random.subgraph","title":"Return a random subgraph of a shape — redist.random.subgraph","text":"random.subgraph returns random subset shp provided","code":""},{"path":"http://alarm-redist.org/redist/reference/redist.random.subgraph.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Return a random subgraph of a shape — redist.random.subgraph","text":"","code":"redist.random.subgraph(shp, n, adj = NULL)"},{"path":"http://alarm-redist.org/redist/reference/redist.random.subgraph.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Return a random subgraph of a shape — redist.random.subgraph","text":"shp sf object SpatialPolygonsDataFrame n number edges sample. n must positive integer. adj Optional. zero indexed adjacency list.","code":""},{"path":"http://alarm-redist.org/redist/reference/redist.random.subgraph.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Return a random subgraph of a shape — redist.random.subgraph","text":"sf dataframe n rows","code":""},{"path":"http://alarm-redist.org/redist/reference/redist.random.subgraph.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Return a random subgraph of a shape — redist.random.subgraph","text":"Snowball sampling backtracking","code":""},{"path":"http://alarm-redist.org/redist/reference/redist.read.enumpart.html","id":null,"dir":"Reference","previous_headings":"","what":"Read Results from enumpart — redist.read.enumpart","title":"Read Results from enumpart — redist.read.enumpart","text":"Read Results enumpart","code":""},{"path":"http://alarm-redist.org/redist/reference/redist.read.enumpart.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Read Results from enumpart — redist.read.enumpart","text":"","code":"redist.read.enumpart(out_path, skip = 0, n_max = -1L)"},{"path":"http://alarm-redist.org/redist/reference/redist.read.enumpart.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Read Results from enumpart — redist.read.enumpart","text":"out_path out_path specified redist.run.enumpart skip number lines skip n_max max number lines read","code":""},{"path":"http://alarm-redist.org/redist/reference/redist.read.enumpart.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Read Results from enumpart — redist.read.enumpart","text":"district_membership matrix","code":""},{"path":"http://alarm-redist.org/redist/reference/redist.read.enumpart.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Read Results from enumpart — redist.read.enumpart","text":"Benjamin Fifield, Kosuke Imai, Jun Kawahara, Christopher T Kenny. \"Essential Role Empirical Validation Legislative Redistricting Simulation.\" Forthcoming, Statistics Public Policy.","code":""},{"path":"http://alarm-redist.org/redist/reference/redist.read.enumpart.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Read Results from enumpart — redist.read.enumpart","text":"","code":"if (FALSE) { # \\dontrun{ temp <- tempdir() cds <- redist.read.enumpart(out_path = paste0(temp, \"/enumerated\")) } # }"},{"path":"http://alarm-redist.org/redist/reference/redist.reduce.adjacency.html","id":null,"dir":"Reference","previous_headings":"","what":"Reduce Adjacency List — redist.reduce.adjacency","title":"Reduce Adjacency List — redist.reduce.adjacency","text":"Tool help reduce adjacency lists analyzing subsets maps.","code":""},{"path":"http://alarm-redist.org/redist/reference/redist.reduce.adjacency.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Reduce Adjacency List — redist.reduce.adjacency","text":"","code":"redist.reduce.adjacency(adj, keep_rows)"},{"path":"http://alarm-redist.org/redist/reference/redist.reduce.adjacency.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Reduce Adjacency List — redist.reduce.adjacency","text":"adj zero-indexed adjacency list. Required. keep_rows row numbers precincts keep","code":""},{"path":"http://alarm-redist.org/redist/reference/redist.reduce.adjacency.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Reduce Adjacency List — redist.reduce.adjacency","text":"zero indexed adjacency list max value length(keep_rows) - 1","code":""},{"path":"http://alarm-redist.org/redist/reference/redist.reduce.adjacency.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Reduce Adjacency List — redist.reduce.adjacency","text":"","code":"data(fl25_adj) redist.reduce.adjacency(fl25_adj, c(2, 3, 4, 6, 21)) #> [[1]] #> [1] 2 4 #>  #> [[2]] #> [1] 2 3 4 #>  #> [[3]] #> [1] 0 1 4 #>  #> [[4]] #> [1] 1 #>  #> [[5]] #> [1] 0 1 2 #>"},{"path":"http://alarm-redist.org/redist/reference/redist.reorder.html","id":null,"dir":"Reference","previous_headings":"","what":"Reorders district numbers — redist.reorder","title":"Reorders district numbers — redist.reorder","text":"Ensures column plans object, first district listed 1, second 2, n districts. Assumes columns number districts first.","code":""},{"path":"http://alarm-redist.org/redist/reference/redist.reorder.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Reorders district numbers — redist.reorder","text":"","code":"redist.reorder(plans)"},{"path":"http://alarm-redist.org/redist/reference/redist.reorder.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Reorders district numbers — redist.reorder","text":"plans numeric vector (one map) matrix one row precinct one column map.","code":""},{"path":"http://alarm-redist.org/redist/reference/redist.reorder.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Reorders district numbers — redist.reorder","text":"integer matrix","code":""},{"path":"http://alarm-redist.org/redist/reference/redist.reorder.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Reorders district numbers — redist.reorder","text":"","code":"cds <- matrix(c(rep(c(4L, 5L, 2L, 1L, 3L), 5),     rep(c(5L, 4L, 3L, 2L, 1L), 2), rep(c(4L, 5L, 2L, 1L, 3L), 3)), nrow = 25) redist.reorder(cds) #>       [,1] [,2] #>  [1,]    1    1 #>  [2,]    2    2 #>  [3,]    3    3 #>  [4,]    4    4 #>  [5,]    5    5 #>  [6,]    1    1 #>  [7,]    2    2 #>  [8,]    3    3 #>  [9,]    4    4 #> [10,]    5    5 #> [11,]    1    2 #> [12,]    2    1 #> [13,]    3    4 #> [14,]    4    5 #> [15,]    5    3 #> [16,]    1    2 #> [17,]    2    1 #> [18,]    3    4 #> [19,]    4    5 #> [20,]    5    3 #> [21,]    1    2 #> [22,]    2    1 #> [23,]    3    4 #> [24,]    4    5 #> [25,]    5    3"},{"path":"http://alarm-redist.org/redist/reference/redist.rsg.html","id":null,"dir":"Reference","previous_headings":"","what":"Redistricting via Random Seed and Grow Algorithm — redist.rsg","title":"Redistricting via Random Seed and Grow Algorithm — redist.rsg","text":"redist.rsg generates redistricting plans using random seed grow algorithm.  non-compact districting algorithm described Chen Rodden (2013).  algorithm can provide start values redistricting routines package.","code":""},{"path":"http://alarm-redist.org/redist/reference/redist.rsg.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Redistricting via Random Seed and Grow Algorithm — redist.rsg","text":"","code":"redist.rsg(adj, total_pop, ndists, pop_tol, verbose = TRUE, maxiter = 5000)"},{"path":"http://alarm-redist.org/redist/reference/redist.rsg.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Redistricting via Random Seed and Grow Algorithm — redist.rsg","text":"adj List length N, N number precincts. list element integer vector indicating precincts precinct adjacent .  assumed precinct numbers start 0. total_pop numeric vector length N, N number precincts. element lists population total corresponding precinct, used enforce population constraints. ndists integer, number districts want partition precincts . pop_tol numeric, indicating close district population targets target population algorithm converges.  thresh=0.05 example means districts must 0.95 1.05 times size target.pop population size. verbose boolean, indicating whether time run algorithm printed. maxiter integer, indicating maximum number iterations attempt convergence population constraint fails.  fails , use different set start values try .  fails , redist.rsg() returns object NAs, indicating use iterations may advised.","code":""},{"path":"http://alarm-redist.org/redist/reference/redist.rsg.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Redistricting via Random Seed and Grow Algorithm — redist.rsg","text":"list, containing three objects containing completed redistricting plan. plan:  vector length N, indicating district membership precinct. district_list  list length Ndistrict.  list contains vector precincts respective district. district_pop  vector length Ndistrict, containing population totals respective districts.","code":""},{"path":"http://alarm-redist.org/redist/reference/redist.rsg.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Redistricting via Random Seed and Grow Algorithm — redist.rsg","text":"Jowei Chen Jonathan Rodden (2013) “Unintentional Gerrymandering: Political Geography Electoral Bias Legislatures.” Quarterly Journal Political Science. 8(3): 239-269.","code":""},{"path":"http://alarm-redist.org/redist/reference/redist.rsg.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Redistricting via Random Seed and Grow Algorithm — redist.rsg","text":"Benjamin Fifield, Department Politics, Princeton University benfifield@gmail.com, https://www.benfifield.com/ Michael Higgins, Department Statistics, Kansas State University mikehiggins@k-state.edu, https://www.k-state.edu/stats//people/HigginsMichael.html Kosuke Imai, Department Politics, Princeton University imai@harvard.edu, https://imai.fas.harvard.edu James Lo, jameslo@princeton.edu Alexander Tarr, Department Electrical Engineering, Princeton University atarr@princeton.edu","code":""},{"path":"http://alarm-redist.org/redist/reference/redist.rsg.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Redistricting via Random Seed and Grow Algorithm — redist.rsg","text":"","code":"### Real data example from test set data(fl25) data(fl25_adj)  res <- redist.rsg(adj = fl25_adj, total_pop = fl25$pop,     ndists = 3, pop_tol = 0.05) #>  #> ====================  #> redist.rsg(): Automated Redistricting Starts #>  #>  #> \t3 districts built using 25 precincts in 0 seconds... #>"},{"path":"http://alarm-redist.org/redist/reference/redist.run.enumpart.html","id":null,"dir":"Reference","previous_headings":"","what":"Runs the enumpart algorithm — redist.run.enumpart","title":"Runs the enumpart algorithm — redist.run.enumpart","text":"Runs enumpart algorithm","code":""},{"path":"http://alarm-redist.org/redist/reference/redist.run.enumpart.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Runs the enumpart algorithm — redist.run.enumpart","text":"","code":"redist.run.enumpart(   ordered_path,   out_path,   ndists = 2,   all = TRUE,   n = NULL,   weight_path = NULL,   lower = NULL,   upper = NULL,   options = NULL )"},{"path":"http://alarm-redist.org/redist/reference/redist.run.enumpart.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Runs the enumpart algorithm — redist.run.enumpart","text":"ordered_path Path used redist.prep.enumpart (including \".dat\") out_path Valid path output enumerated districts ndists number districts enumerate boolean. TRUE outputs districts. FALSE samples n districts. n integer. Number districts output FALSE. Returns districts selected uniform random distribution. weight_path path (including \".dat\") space-delimited file containing vector vertex weights, used along lower upper. lower lower bound partition's total weight, implemented rejection sampling. upper upper bound partition's total weight. options Additional enumpart arguments. recommended use.","code":""},{"path":"http://alarm-redist.org/redist/reference/redist.run.enumpart.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Runs the enumpart algorithm — redist.run.enumpart","text":"0 success","code":""},{"path":"http://alarm-redist.org/redist/reference/redist.run.enumpart.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Runs the enumpart algorithm — redist.run.enumpart","text":"Benjamin Fifield, Kosuke Imai, Jun Kawahara, Christopher T Kenny. \"Essential Role Empirical Validation Legislative Redistricting Simulation.\" Forthcoming, Statistics Public Policy.","code":""},{"path":"http://alarm-redist.org/redist/reference/redist.run.enumpart.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Runs the enumpart algorithm — redist.run.enumpart","text":"","code":"if (FALSE) { # \\dontrun{ temp <- tempdir() redist.run.enumpart(ordered_path = paste0(temp, \"/ordered\"),     out_path = paste0(temp, \"/enumerated\")) } # }"},{"path":"http://alarm-redist.org/redist/reference/redist.segcalc.html","id":null,"dir":"Reference","previous_headings":"","what":"Segregation index calculation for MCMC redistricting. — segregation_index","title":"Segregation index calculation for MCMC redistricting. — segregation_index","text":"redist.segcalc calculates dissimilarity index segregation (see Massey & Denton 1987 details) specified subgroup redistricting plan.","code":""},{"path":"http://alarm-redist.org/redist/reference/redist.segcalc.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Segregation index calculation for MCMC redistricting. — segregation_index","text":"","code":"segregation_index(   map,   group_pop,   total_pop = map[[attr(map, \"pop_col\")]],   .data = cur_plans() )  redist.segcalc(plans, group_pop, total_pop)"},{"path":"http://alarm-redist.org/redist/reference/redist.segcalc.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Segregation index calculation for MCMC redistricting. — segregation_index","text":"map redist_map object group_pop vector populations subgroup interest. total_pop vector containing populations geographic unit. .data redist_plans object plans matrix congressional district assignments redist object.","code":""},{"path":"http://alarm-redist.org/redist/reference/redist.segcalc.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Segregation index calculation for MCMC redistricting. — segregation_index","text":"redist.segcalc returns vector entry dissimilarity index segregation (Massey & Denton 1987) redistricting plan algout.","code":""},{"path":"http://alarm-redist.org/redist/reference/redist.segcalc.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Segregation index calculation for MCMC redistricting. — segregation_index","text":"Fifield, Benjamin, Michael Higgins, Kosuke Imai Alexander Tarr. (2016) \"New Automated Redistricting Simulator Using Markov Chain Monte Carlo.\" Working Paper. Available http://imai.princeton.edu/research/files/redist.pdf. Massey, Douglas Nancy Denton. (1987) \"Dimensions Social Segregation\". Social Forces.","code":""},{"path":"http://alarm-redist.org/redist/reference/redist.segcalc.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Segregation index calculation for MCMC redistricting. — segregation_index","text":"","code":"# \\donttest{ data(fl25) data(fl25_enum) data(fl25_adj)  ## Get an initial partition init_plan <- fl25_enum$plans[, 5118] fl25$init_plan <- init_plan  ## 25 precinct, three districts - no pop constraint ## fl_map <- redist_map(fl25, existing_plan = 'init_plan', adj = fl25_adj) #> Projecting to CRS 3857 alg_253 <- redist_flip(fl_map, nsims = 10000) #>  #> ── redist_flip() ─────────────────────────────────────────────────────────────── #>  #> ── Automated Redistricting Simulation Using Markov Chain Monte Carlo ── #> ℹ Preprocessing data. #> ℹ Starting swMH(). #> ■                                  0% | ETA: 9s #> ■■■■■■■■■■■■■■                    43% | ETA:  1s | MH Acceptance: 0.79 #> ■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■  100% | ETA:  0s | MH Acceptance: 0.78 #>    ## Get Republican Dissimilarity Index from simulations # old: rep_dmi_253 <- redist.segcalc(alg_253, fl25$mccain, fl25$pop) rep_dmi_253 <- seg_dissim(alg_253, fl25, mccain, pop)  |>     redistmetrics::by_plan(ndists = 3) # }"},{"path":"http://alarm-redist.org/redist/reference/redist.sink.plan.html","id":null,"dir":"Reference","previous_headings":"","what":"Sink Plans to 1:ndists — redist.sink.plan","title":"Sink Plans to 1:ndists — redist.sink.plan","text":"Takes plan renumbers 1:ndists","code":""},{"path":"http://alarm-redist.org/redist/reference/redist.sink.plan.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Sink Plans to 1:ndists — redist.sink.plan","text":"","code":"redist.sink.plan(plan)"},{"path":"http://alarm-redist.org/redist/reference/redist.sink.plan.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Sink Plans to 1:ndists — redist.sink.plan","text":"plan vector assignments, required.","code":""},{"path":"http://alarm-redist.org/redist/reference/redist.sink.plan.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Sink Plans to 1:ndists — redist.sink.plan","text":"vector ID corresponds 1:ndists, attribute n indicating number districts.","code":""},{"path":"http://alarm-redist.org/redist/reference/redist.sink.plan.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Sink Plans to 1:ndists — redist.sink.plan","text":"","code":"data(fl25_enum) plan <- fl25_enum$plans[, 5118] # Subset based on something: plan <- plan[plan != 2] plan <- vctrs::vec_group_id(plan) # Now plan can be used with redist_flip() plan #>  [1] 1 2 1 2 2 1 2 2 2 2 2 2 #> attr(,\"n\") #> [1] 2"},{"path":"http://alarm-redist.org/redist/reference/redist.smc_is_ci.html","id":null,"dir":"Reference","previous_headings":"","what":"(Deprecated) Confidence Intervals for Importance Sampling Estimates — redist.smc_is_ci","title":"(Deprecated) Confidence Intervals for Importance Sampling Estimates — redist.smc_is_ci","text":"Builds confidence interval quantity interest, given importance sampling weights.","code":""},{"path":"http://alarm-redist.org/redist/reference/redist.smc_is_ci.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"(Deprecated) Confidence Intervals for Importance Sampling Estimates — redist.smc_is_ci","text":"","code":"redist.smc_is_ci(x, wgt, conf = 0.99)"},{"path":"http://alarm-redist.org/redist/reference/redist.smc_is_ci.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"(Deprecated) Confidence Intervals for Importance Sampling Estimates — redist.smc_is_ci","text":"x numeric vector containing quantity interest wgt numeric vector containing nonnegative importance weights. normalized automatically. conf confidence level interval.","code":""},{"path":"http://alarm-redist.org/redist/reference/redist.smc_is_ci.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"(Deprecated) Confidence Intervals for Importance Sampling Estimates — redist.smc_is_ci","text":"two-element vector form [lower, upper] containing importance sampling confidence interval.","code":""},{"path":"http://alarm-redist.org/redist/reference/redist.splits.html","id":null,"dir":"Reference","previous_headings":"","what":"Count County Splits — county_splits","title":"Count County Splits — county_splits","text":"Count County Splits","code":""},{"path":"http://alarm-redist.org/redist/reference/redist.splits.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Count County Splits — county_splits","text":"","code":"county_splits(map, counties, .data = cur_plans())  redist.splits(plans, counties)"},{"path":"http://alarm-redist.org/redist/reference/redist.splits.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Count County Splits — county_splits","text":"map redist_map object counties vector county names county ids. .data redist_plans object plans numeric vector (one map) matrix one row precinct one column map. Required.","code":""},{"path":"http://alarm-redist.org/redist/reference/redist.splits.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Count County Splits — county_splits","text":"integer vector one number map","code":""},{"path":"http://alarm-redist.org/redist/reference/redist.subset.html","id":null,"dir":"Reference","previous_headings":"","what":"Subset a shp — redist.subset","title":"Subset a shp — redist.subset","text":"Subsets shp object along adjacency. Useful running smaller analyses pairs districts. Provide population, ndists, pop_tol, sub_ndists get proper population parity constraints subsets.","code":""},{"path":"http://alarm-redist.org/redist/reference/redist.subset.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Subset a shp — redist.subset","text":"","code":"redist.subset(shp, adj, keep_rows, total_pop, ndists, pop_tol, sub_ndists)"},{"path":"http://alarm-redist.org/redist/reference/redist.subset.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Subset a shp — redist.subset","text":"shp sf object adj zero-indexed adjacency list. Created redist.adjacency supplied. keep_rows row numbers precincts keep. Random submap selected supplied. total_pop numeric vector one entry population precinct. ndists integer, number districts whole map pop_tol strength hard population constraint. sub_ndists integer, number districts subset map","code":""},{"path":"http://alarm-redist.org/redist/reference/redist.subset.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Subset a shp — redist.subset","text":"list containing following components: shp subsetted shp object adj subsetted adjacency list shp keep_rows indices rows kept. sub_ndists number districts subset. sub_pop_tol new parity constraint subset.","code":""},{"path":"http://alarm-redist.org/redist/reference/redist.uncoarsen.html","id":null,"dir":"Reference","previous_headings":"","what":"Uncoarsen a District Matrix — redist.uncoarsen","title":"Uncoarsen a District Matrix — redist.uncoarsen","text":"cores analysis form coarsening, sometimes need original geography level comparable. takes coarsened matrix uncoarsens original level","code":""},{"path":"http://alarm-redist.org/redist/reference/redist.uncoarsen.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Uncoarsen a District Matrix — redist.uncoarsen","text":"","code":"redist.uncoarsen(plans, group_index)"},{"path":"http://alarm-redist.org/redist/reference/redist.uncoarsen.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Uncoarsen a District Matrix — redist.uncoarsen","text":"plans coarsened matrix plans. group_index index used coarsen shape.","code":""},{"path":"http://alarm-redist.org/redist/reference/redist.uncoarsen.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Uncoarsen a District Matrix — redist.uncoarsen","text":"matrix","code":""},{"path":"http://alarm-redist.org/redist/reference/redist.wted.adj.html","id":null,"dir":"Reference","previous_headings":"","what":"Create Weighted Adjacency Data — redist.wted.adj","title":"Create Weighted Adjacency Data — redist.wted.adj","text":"Create Weighted Adjacency Data","code":""},{"path":"http://alarm-redist.org/redist/reference/redist.wted.adj.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create Weighted Adjacency Data — redist.wted.adj","text":"","code":"redist.wted.adj(map = NULL, plans = NULL)"},{"path":"http://alarm-redist.org/redist/reference/redist.wted.adj.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create Weighted Adjacency Data — redist.wted.adj","text":"map redist_map plans redist_plans","code":""},{"path":"http://alarm-redist.org/redist/reference/redist.wted.adj.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create Weighted Adjacency Data — redist.wted.adj","text":"tibble","code":""},{"path":"http://alarm-redist.org/redist/reference/redist.wted.adj.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create Weighted Adjacency Data — redist.wted.adj","text":"","code":"data(iowa) shp <- redist_map(iowa, existing_plan = cd_2010, pop_tol = 0.01) plans <- redist_smc(shp, 100) #> SEQUENTIAL MONTE CARLO #> Sampling 100 99-unit maps with 4 districts and population between 753973 and 769205. redist.wted.adj(shp, plans = plans) #> Simple feature collection with 222 features and 3 fields #> Geometry type: LINESTRING #> Dimension:     XY #> Bounding box:  xmin: 4192376 ymin: 2974708 xmax: 5729102 ymax: 3978011 #> Projected CRS: NAD83(HARN) / Iowa North (ftUS) #> # A tibble: 222 × 4 #> # Rowwise:  #>        i     j                           geometry    wt #>  * <int> <int>      <LINESTRING [US_survey_foot]> <dbl> #>  1     1     2 (4654501 3220689, 4590239 3111565)  0.94 #>  2     1    15 (4654501 3220689, 4529015 3222722)  0.96 #>  3     1    39 (4654501 3220689, 4647780 3349436)  0.8  #>  4     1    61 (4654501 3220689, 4779626 3219592)  0.77 #>  5     1    88 (4654501 3220689, 4716357 3109639)  0.82 #>  6     2    15 (4590239 3111565, 4529015 3222722)  0.94 #>  7     2    69 (4590239 3111565, 4464101 3114115)  0.94 #>  8     2    87 (4590239 3111565, 4589159 3005137)  0.95 #>  9     2    88 (4590239 3111565, 4716357 3109639)  0.88 #> 10     3    22 (5486111 3937993, 5500145 3778167)  0.96 #> # ℹ 212 more rows"},{"path":"http://alarm-redist.org/redist/reference/redist_ci.html","id":null,"dir":"Reference","previous_headings":"","what":"Confidence Intervals for SMC and MCMC Estimates — redist_ci","title":"Confidence Intervals for SMC and MCMC Estimates — redist_ci","text":"Builds confidence interval quantity interest. multiple runs available, uses -run variation estimate standard error. one run available, uses information SMC particle/plan genealogy estimate standard error, using variant method Olson & Douc (2019). multiple-run estimator reliable, especially situations many districts, used parallelism available.  reference plans ignored.","code":""},{"path":"http://alarm-redist.org/redist/reference/redist_ci.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Confidence Intervals for SMC and MCMC Estimates — redist_ci","text":"","code":"redist_ci(plans, x, district = 1L, conf = 0.9, by_chain = FALSE)  redist_smc_ci(plans, x, district = 1L, conf = 0.9, by_chain = FALSE)  redist_mcmc_ci(plans, x, district = 1L, conf = 0.9, by_chain = FALSE)"},{"path":"http://alarm-redist.org/redist/reference/redist_ci.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Confidence Intervals for SMC and MCMC Estimates — redist_ci","text":"plans redist_plans object. x quantity build interval . Tidy-evaluated within plans. district redist_plans objects multiple districts, district subset . Set NULL perform subsetting. conf desired confidence level. by_chain Whether confidence interval indicate overall sampling uncertainty (FALSE) per-chain sampling uncertainty (TRUE). latter case intervals wider factor sqrt(runs).","code":""},{"path":"http://alarm-redist.org/redist/reference/redist_ci.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Confidence Intervals for SMC and MCMC Estimates — redist_ci","text":"tibble three columns: X, X_lower, X_upper, X name vector interest, containing mean confidence interval. used inside summarize() create three columns output data.","code":""},{"path":"http://alarm-redist.org/redist/reference/redist_ci.html","id":"functions","dir":"Reference","previous_headings":"","what":"Functions","title":"Confidence Intervals for SMC and MCMC Estimates — redist_ci","text":"redist_smc_ci(): Compute confidence intervals SMC output. redist_mcmc_ci(): Compute confidence intervals MCMC output.","code":""},{"path":"http://alarm-redist.org/redist/reference/redist_ci.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Confidence Intervals for SMC and MCMC Estimates — redist_ci","text":"Lee, ., & Whiteley, N. (2018). Variance estimation particle filter. Biometrika, 105(3), 609-625. Olsson, J., & Douc, R. (2019). Numerically stable online estimation variance particle filters. Bernoulli, 25(2), 1504-1535. H. P. Chan T. L. Lai. general theory particle filters hidden Markov models applications. Ann. Statist., 41(6):2877–2904, 2013.","code":""},{"path":"http://alarm-redist.org/redist/reference/redist_ci.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Confidence Intervals for SMC and MCMC Estimates — redist_ci","text":"","code":"library(dplyr) data(iowa)  iowa_map <- redist_map(iowa, existing_plan = cd_2010, pop_tol = 0.05) plans <- redist_mergesplit_parallel(iowa_map, nsims = 200, chains = 2, silent = TRUE) %>%     mutate(dem = group_frac(iowa_map, dem_08, dem_08 + rep_08)) %>%     number_by(dem) redist_smc_ci(plans, dem) #> Warning: Runs have not converged for this statistic. #> ℹ R-hat is 2.292 #> → Increase the number of samples. #> # A tibble: 1 × 3 #>     dem dem_lower dem_upper #>   <dbl>     <dbl>     <dbl> #> 1 0.478     0.467     0.490"},{"path":"http://alarm-redist.org/redist/reference/redist_constr.html","id":null,"dir":"Reference","previous_headings":"","what":"Set up constraints for sampling — redist_constr","title":"Set up constraints for sampling — redist_constr","text":"redist_constr objects used specify constraints sampling redistricting plans redist_smc() redist_mergesplit(). constraint specified function scores given plan. Higher scores penalized sampled less frequently.","code":""},{"path":"http://alarm-redist.org/redist/reference/redist_constr.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Set up constraints for sampling — redist_constr","text":"","code":"redist_constr(map = tibble())"},{"path":"http://alarm-redist.org/redist/reference/redist_constr.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Set up constraints for sampling — redist_constr","text":"map redist_map() object; map used sampling","code":""},{"path":"http://alarm-redist.org/redist/reference/redist_constr.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Set up constraints for sampling — redist_constr","text":"redist_constr object, just list certain nested structure.","code":""},{"path":"http://alarm-redist.org/redist/reference/redist_constr.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Set up constraints for sampling — redist_constr","text":"redist_constr object keeps track sampling constraints nested list. can view exact structure list calling str(). Constraints may added using one following functions: add_constr_compet() add_constr_custom() add_constr_edges_rem() add_constr_fry_hold() add_constr_grp_hinge() add_constr_grp_inv_hinge() add_constr_grp_pow() add_constr_incumbency() add_constr_log_st() add_constr_multisplits() add_constr_polsby() add_constr_pop_dev() add_constr_segregation() add_constr_splits() add_constr_status_quo() add_constr_total_splits() information constraint can found relevant constraint page.","code":""},{"path":"http://alarm-redist.org/redist/reference/redist_constr.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Set up constraints for sampling — redist_constr","text":"","code":"data(iowa) map_ia <- redist_map(iowa, existing_plan = cd_2010, pop_tol = 0.01) constr <- redist_constr(map_ia) constr <- add_constr_splits(constr, strength = 1.5, admin = region) print(constr) #> A <redist_constr> with 1 constraint #> • A splits constraint of strength 1.5"},{"path":"http://alarm-redist.org/redist/reference/redist_flip.html","id":null,"dir":"Reference","previous_headings":"","what":"'Flip' Markov Chain Monte Carlo Redistricting Simulation (Fifield et al. 2020) — redist_flip","title":"'Flip' Markov Chain Monte Carlo Redistricting Simulation (Fifield et al. 2020) — redist_flip","text":"function allows users simulate redistricting plans using Markov Chain Monte Carlo algorithm (Fifield, Higgins, Imai, Tarr 2020). Several constraints corresponding substantive requirements redistricting process implemented, including population parity geographic compactness. addition, function includes multiple-swap simulated tempering functionality improve mixing Markov Chain.","code":""},{"path":"http://alarm-redist.org/redist/reference/redist_flip.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"'Flip' Markov Chain Monte Carlo Redistricting Simulation (Fifield et al. 2020) — redist_flip","text":"","code":"redist_flip(   map,   nsims,   warmup = 0,   init_plan,   constraints = add_constr_edges_rem(redist_constr(map), 0.4),   thin = 1,   eprob = 0.05,   lambda = 0,   temper = FALSE,   betaseq = \"powerlaw\",   betaseqlength = 10,   betaweights = NULL,   adapt_lambda = FALSE,   adapt_eprob = FALSE,   exact_mh = FALSE,   adjswaps = TRUE,   init_name = NULL,   verbose = TRUE,   nthin )"},{"path":"http://alarm-redist.org/redist/reference/redist_flip.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"'Flip' Markov Chain Monte Carlo Redistricting Simulation (Fifield et al. 2020) — redist_flip","text":"map redist_map object. nsims number samples draw, including warmup. warmup number warmup samples discard. init_plan vector containing congressional district labels geographic unit. default NULL. provided, random initial plan generated using redist_smc. can also request initialize using redist.rsg supplying 'rsg', though recommended behavior. constraints redist_constr object. thin amount thin Markov Chain. default 1. eprob probability keeping edge connected. default 0.05. lambda lambda parameter determining number swaps attempt iteration algorithm. number swaps iteration equal Pois(lambda) + 1. default 0. temper Whether use simulated tempering algorithm. Default FALSE. betaseq Sequence beta values tempering. default powerlaw (see Fifield et. al (2020) details). betaseqlength Length beta sequence desired tempering. default 10. betaweights betaweights Sequence weights different values beta. Allows user upweight certain values beta others. default NULL (equal weighting). adapt_lambda adapt_lambda Whether adaptively tune lambda parameter Metropolis-Hastings acceptance probability falls 20% 40%. Default FALSE. adapt_eprob eprob Whether adaptively tune edgecut probability parameter Metropolis-Hastings acceptance probability falls 20% 40%. Default FALSE. exact_mh Whether use approximate (FALSE) exact (TRUE) Metropolis-Hastings ratio calculation accept-reject rule. Default FALSE. adjswaps Flag restrict swaps beta values adjacent current constraint proposed. default TRUE. init_name name initial plan, FALSE include initial plan output.  Defaults column name existing plan, \"<init>\" initial plan sampled. verbose Whether print initialization statement. Default TRUE. nthin Deprecated. Use thin.","code":""},{"path":"http://alarm-redist.org/redist/reference/redist_flip.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"'Flip' Markov Chain Monte Carlo Redistricting Simulation (Fifield et al. 2020) — redist_flip","text":"redist_plans object containing simulated plans.","code":""},{"path":"http://alarm-redist.org/redist/reference/redist_flip.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"'Flip' Markov Chain Monte Carlo Redistricting Simulation (Fifield et al. 2020) — redist_flip","text":"redist_flip allows Gibbs constraints supplied via list object passed constraints. redist_flip uses small compactness constraint default, improves realism maps greatly also leads large speed improvements. (One time consuming aspects flip MCMC backend checking district shattering, slowed even non-compact districts. , recommended flip simulations use least minimal compactness constraint, even weaken default settings.) default compact constraint using edges-removed metric weight 0.6. small maps (< 100 precincts), likely want weaken (lower) constraint, large maps (> 5000 precincts), likely want strengthen (increase) constraint. Otherwise, maps, default constraint good starting place. redist_flip samples known target distribution can described using constraints. following describes constraints available. general advice set weights way gets 20% 40% acceptance average, though tuning advice available vignette using MCMC methods.small acceptance rate indicates weights within constraints large impact sampling efficiency. Metropolis Hastings acceptance rate large, may impact target distribution, may fine general exploration possible maps. currently 9 implemented constraint types, though `compact partisan sub-types specified via character metric within respective list objects. constraints follows: compact - biases algorithm towards drawing compact districts. weight - coefficient put Gibbs constraint metric - metric use. Must one edges-removed (default), polsby-popper, fryer-holden, log-st. Using Polsby Popper generally recommended, edges-removed faster highly correlated. log-st can used match target distribution redist_smc redist_mergesplit. areas - used polsby-popper - vector precinct areas. borderlength_mat - used polsby-popper - matrix precinct border lengths. ssdmat - used fryer-holden - matrix squared distances precinct centroids. ssd_denom - used fryer-holden - positive integer use normalizing constant Relative Proximity Index. population - Gibbs constraint complement hard population constraint set pop_tol. penalizes moves move away smaller population parity deviations. useful init_plan sits outside desired pop_tol substantive reasons use plan. constraint uses input total_pop. weight - coefficient put Gibbs constraint countysplit Gibbs constraint minimize county splits. Unlike SMC's county constraint, allows ndists - 1 splits require counties contiguous. weight - coefficient put Gibbs constraint hinge uses proportion group district matches nearest target proportion, creates penalty \\(\\sqrt{max(0, nearest.target - group.pct)}\\). weight - coefficient put Gibbs constraint minorityprop - numeric vector minority proportions (0 1) districts aim vra takes two target proportions presence minority group within district. \\((|target.min - group.pct||target.- group.pct|)^{1.5})\\) weight - coefficient put Gibbs constraint target_min - target minority percentage. Often, set 0.55 encourage minority majority districts. target_other - target minority percentage non majority minority districts. minority constraint sorts districts proportion group district compares highest districts entries minorityprop. takes form \\(\\sum_{=1}^{n} \\sqrt{|group.pct() - minorityprop()| }\\) n length minorityprop input. weight - coefficient put Gibbs constraint minorityprop - numeric vector minority proportions (0 1) districts aim similarity status-quo constraint penalizes plans different starting place. useful local exploration. weight - coefficient put Gibbs constraint partisan constraint minimizes partisan bias, either measured difference proportional representation magnitude efficiency gap. weight - coefficient put Gibbs constraint rvote - integer vector votes Republicans party dvote - integer vector votes Democrats party metric - metric use. Must one proportional-representation efficiency-gap. segregation constraint attempts minimize degree dissimilarity districts group population. weight - coefficient put Gibbs constraint","code":""},{"path":"http://alarm-redist.org/redist/reference/redist_flip.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"'Flip' Markov Chain Monte Carlo Redistricting Simulation (Fifield et al. 2020) — redist_flip","text":"Fifield, B., Higgins, M., Imai, K., & Tarr, . (2020). Automated redistricting simulation using Markov chain Monte Carlo. Journal Computational Graphical Statistics, 29(4), 715-728.","code":""},{"path":"http://alarm-redist.org/redist/reference/redist_flip.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"'Flip' Markov Chain Monte Carlo Redistricting Simulation (Fifield et al. 2020) — redist_flip","text":"","code":"data(iowa) iowa_map <- redist_map(iowa, ndists = 4, existing_plan = cd_2010, total_pop = pop,     pop_tol = 0.05) sims <- redist_flip(map = iowa_map, nsims = 100) #>  #> ── redist_flip() ─────────────────────────────────────────────────────────────── #>  #> ── Automated Redistricting Simulation Using Markov Chain Monte Carlo ── #> ℹ Preprocessing data. #> ℹ Starting swMH(). #> ■                                  1% | ETA: 0s #> ■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■  100% | ETA:  0s | MH Acceptance: 0.68 #>"},{"path":"http://alarm-redist.org/redist/reference/redist_flip_anneal.html","id":null,"dir":"Reference","previous_headings":"","what":"Flip MCMC Redistricting Simulator using Simulated Annealing — redist_flip_anneal","title":"Flip MCMC Redistricting Simulator using Simulated Annealing — redist_flip_anneal","text":"redist_flip_anneal simulates congressional redistricting plans using Markov chain Monte Carlo methods coupled simulated annealing.","code":""},{"path":"http://alarm-redist.org/redist/reference/redist_flip_anneal.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Flip MCMC Redistricting Simulator using Simulated Annealing — redist_flip_anneal","text":"","code":"redist_flip_anneal(   map,   nsims,   warmup = 0,   init_plan = NULL,   constraints = redist_constr(),   num_hot_steps = 40000,   num_annealing_steps = 60000,   num_cold_steps = 20000,   eprob = 0.05,   lambda = 0,   adapt_lambda = FALSE,   adapt_eprob = FALSE,   exact_mh = FALSE,   maxiterrsg = 5000,   verbose = TRUE )"},{"path":"http://alarm-redist.org/redist/reference/redist_flip_anneal.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Flip MCMC Redistricting Simulator using Simulated Annealing — redist_flip_anneal","text":"map redist_map object. nsims number samples draw, including warmup. warmup number warmup samples discard. init_plan vector containing congressional district labels geographic unit. default NULL. provided, random initial plan generated using redist_smc. can also request initialize using redist.rsg supplying 'rsg', though recommended behavior. constraints redist_constr object. num_hot_steps number steps run simulator beta = 0. Default 40000. num_annealing_steps number steps run simulator linearly changing beta schedule. Default 60000 num_cold_steps number steps run simulator beta = 1. Default 20000. eprob probability keeping edge connected. default 0.05. lambda parameter determining number swaps attempt iteration algorithm. number swaps iteration equal Pois(lambda) + 1. default 0. adapt_lambda Whether adaptively tune lambda parameter Metropolis-Hastings acceptance probability falls 20% 40%. Default FALSE. adapt_eprob Whether adaptively tune edgecut probability parameter Metropolis-Hastings acceptance probability falls 20% 40%. Default FALSE. exact_mh Whether use approximate (0) exact (1) Metropolis-Hastings ratio calculation accept-reject rule. Default FALSE. maxiterrsg Maximum number iterations random seed--grow algorithm generate starting values. Default 5000. verbose Whether print initialization statement. Default TRUE.","code":""},{"path":"http://alarm-redist.org/redist/reference/redist_flip_anneal.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Flip MCMC Redistricting Simulator using Simulated Annealing — redist_flip_anneal","text":"redist_plans","code":""},{"path":"http://alarm-redist.org/redist/reference/redist_map.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a redist_map object. — redist_map","title":"Create a redist_map object. — redist_map","text":"Sets redistricting problem.","code":""},{"path":"http://alarm-redist.org/redist/reference/redist_map.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a redist_map object. — redist_map","text":"","code":"redist_map(   ...,   existing_plan = NULL,   pop_tol = NULL,   total_pop = c(\"pop\", \"population\", \"total_pop\", \"POP100\"),   ndists = NULL,   pop_bounds = NULL,   adj = NULL,   adj_col = \"adj\",   planarize = 3857 )  as_redist_map(x)"},{"path":"http://alarm-redist.org/redist/reference/redist_map.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a redist_map object. — redist_map","text":"... column elements bound redist_map object single list data.frame.  passed tibble::tibble constructor. existing_plan <tidy-select> existing district assignment. Must numeric convertible numeric. pop_tol <data-masking> population tolerance. percentage deviation average population constrained number. existing_plan provided, defaults parity plan; otherwise, defaults 0.01. total_pop <tidy-select> vector precinct populations. Defaults pop, population, total_pop columns, one exists. ndists <data-masking> integer number districts partition map . Must specified existing_plan supplied. pop_bounds <data-masking> specific population bounds, form c(lower, target, upper). adj adjacency graph object. Defaults computed data coercible shapefile. adj_col name adjacency graph column planarize number, indicating CRS project shapefile latitude-longitude based. Set NULL FALSE avoid planarizing. x object coerced","code":""},{"path":"http://alarm-redist.org/redist/reference/redist_map.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create a redist_map object. — redist_map","text":"redist_map object","code":""},{"path":"http://alarm-redist.org/redist/reference/redist_map.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Create a redist_map object. — redist_map","text":"redist_map object tibble::tibble contains adjacency list additional information number districts population bounds.  supports dplyr generics, adjust adjacency list attributes according functions; .e., filter subset units, graph change subset units, population bounds adjust accordingly.  existing map also attached object, number districts also adjust.  Subsetting `[` `[[` recompute graphs attributes. useful methods redist_map objects: merge_by get_adj plot.redist_map","code":""},{"path":"http://alarm-redist.org/redist/reference/redist_map.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create a redist_map object. — redist_map","text":"","code":"data(fl25) d <- redist_map(fl25, ndists = 3, pop_tol = 0.05, total_pop = pop) #> Projecting to CRS 3857 dplyr::filter(d, pop >= 10e3) #> Warning: Your subset was not based on districts. #> → Please use `set_pop_tol()` to update your <redist_map> or create a new #>   <redist_map> with the correct number of districts. #> A <redist_map> with 5 units and 13 fields #> To be partitioned into 3 districts with population between 58,347.67 - 5.0% and 58,347.67 + 5.0% #> With geometry: #>     bbox:           xmin: -9107951 ymin: 3047341 xmax: -9065127 ymax: 3085829 #>     projected CRS:  WGS 84 / Pseudo-Mercator #> # A tibble: 5 × 13 #>   geoid10    pop   vap obama mccain TotPop BlackPop HispPop   VAP BlackVAP #> * <chr>    <dbl> <dbl> <dbl>  <dbl>  <dbl>    <dbl>   <dbl> <dbl>    <dbl> #> 1 2519.0_0 15993 12379   647   1522  15993      863    1980 12379      582 #> 2 2396.0_0 12853  8965   640   1027  12853     2368    3860  8965     1468 #> 3 2515.0_0 22218 14513   506    641  22218     5911    8800 14513     3417 #> 4 2525.0_0 16734 14720   826   1414  16734      197     791 14720      155 #> 5 1246.0_0 12289  7734   366    271  12289     1693    9773  7734     1062 #> # ℹ 3 more variables: HispVAP <dbl>, geometry <POLYGON [m]>, adj <list>"},{"path":"http://alarm-redist.org/redist/reference/redist_mergesplit.html","id":null,"dir":"Reference","previous_headings":"","what":"Merge-Split/Recombination MCMC Redistricting Sampler (Carter et al. 2019) — redist_mergesplit","title":"Merge-Split/Recombination MCMC Redistricting Sampler (Carter et al. 2019) — redist_mergesplit","text":"redist_mergesplit uses Markov Chain Monte Carlo algorithm (Carter et al. 2019; based DeFord et. al 2019) generate congressional legislative redistricting plans according contiguity, population, compactness, administrative boundary constraints. MCMC proposal used SMC sampler (McCartan Imai 2023); similar identical used references.  1-level hierarchical Merge-split supported counties parameter; unlike SMC algorithm, guarantee maximum number county splits.","code":""},{"path":"http://alarm-redist.org/redist/reference/redist_mergesplit.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Merge-Split/Recombination MCMC Redistricting Sampler (Carter et al. 2019) — redist_mergesplit","text":"","code":"redist_mergesplit(   map,   nsims,   warmup = if (is.null(init_plan)) 10 else max(100, nsims%/%5),   thin = 1L,   init_plan = NULL,   counties = NULL,   compactness = 1,   constraints = list(),   constraint_fn = function(m) rep(0, ncol(m)),   adapt_k_thresh = 0.99,   k = NULL,   init_name = NULL,   silly_adj_fix = FALSE,   verbose = FALSE,   silent = FALSE )"},{"path":"http://alarm-redist.org/redist/reference/redist_mergesplit.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Merge-Split/Recombination MCMC Redistricting Sampler (Carter et al. 2019) — redist_mergesplit","text":"map redist_map object. nsims number samples draw, including warmup. warmup number warmup samples discard. Recommended least first 20% samples, case less around 100 samples, unless initializing random plan. thin Save every thin-th sample. Defaults thinning (1). init_plan initial state map. provided, default reference map map object, none exists, sample random initial state using redist_smc. can also request random initial state setting init_plan=\"sample\". counties vector containing county (administrative geographic unit) labels unit, may integers ranging 1 number counties, factor character vector.  provided, algorithm generate maps tend follow county lines. strength parameter associated constraint. adjust number county splits , constrain second type administrative split, consider using add_constr_splits(), add_constr_multisplits(), add_constr_total_splits(). compactness Controls compactness generated districts, higher values preferring compact districts. Must nonnegative. See 'Details' section information, computational considerations. constraints list containing information constraints implement. See 'Details' section information. constraint_fn function takes matrix column redistricting plan outputs vector log-weights, added final weights. adapt_k_thresh threshold value used heuristic select value k_i splitting iteration. Set 0.9999 1 algorithm appear sampling target distribution. Must 0 1. k number edges consider cutting drawing spanning tree. selected automatically nearly cases. init_name name initial plan, FALSE include initial plan output.  Defaults column name existing plan, \"<init>\" initial plan sampled. silly_adj_fix Heuristic fixing weird inputs. verbose Whether print intermediate information sampling. Recommended. silent Whether suppress diagnostic information.","code":""},{"path":"http://alarm-redist.org/redist/reference/redist_mergesplit.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Merge-Split/Recombination MCMC Redistricting Sampler (Carter et al. 2019) — redist_mergesplit","text":"redist_mergesplit returns object class redist_plans containing simulated plans.","code":""},{"path":"http://alarm-redist.org/redist/reference/redist_mergesplit.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Merge-Split/Recombination MCMC Redistricting Sampler (Carter et al. 2019) — redist_mergesplit","text":"function draws samples specific target measure, controlled map, compactness, constraints parameters. Key ensuring good performance monitoring acceptance rate, reported sample level output. Users also check diagnostics sample running summary.redist_plans(). Higher values compactness sample compact districts; setting parameter 1 computationally efficient generates nicely compact districts.","code":""},{"path":"http://alarm-redist.org/redist/reference/redist_mergesplit.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Merge-Split/Recombination MCMC Redistricting Sampler (Carter et al. 2019) — redist_mergesplit","text":"Carter, D., Herschlag, G., Hunter, Z., Mattingly, J. (2019). merge-split proposal reversible Monte Carlo Markov chain sampling redistricting plans. arXiv preprint arXiv:1911.01503. McCartan, C., & Imai, K. (2023). Sequential Monte Carlo Sampling Balanced Compact Redistricting Plans. Annals Applied Statistics 17(4). Available doi:10.1214/23-AOAS1763 . DeFord, D., Duchin, M., Solomon, J. (2019). Recombination: family Markov chains redistricting. arXiv preprint arXiv:1911.05725.","code":""},{"path":"http://alarm-redist.org/redist/reference/redist_mergesplit.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Merge-Split/Recombination MCMC Redistricting Sampler (Carter et al. 2019) — redist_mergesplit","text":"","code":"# \\donttest{ data(fl25)  fl_map <- redist_map(fl25, ndists = 3, pop_tol = 0.1) #> Projecting to CRS 3857  sampled_basic <- redist_mergesplit(fl_map, 10000) #> MARKOV CHAIN MONTE CARLO #> Sampling 10000 25-unit maps with 3 districts and population between 52513 and 64182. #> Acceptance rate: 3.37%  sampled_constr <- redist_mergesplit(fl_map, 10000, constraints = list(     incumbency = list(strength = 1000, incumbents = c(3, 6, 25)) )) #> MARKOV CHAIN MONTE CARLO #> Sampling 10000 25-unit maps with 3 districts and population between 52513 and 64182. #> Acceptance rate: 2.08% # }"},{"path":"http://alarm-redist.org/redist/reference/redist_mergesplit_parallel.html","id":null,"dir":"Reference","previous_headings":"","what":"Parallel Merge-Split/Recombination MCMC Redistricting Sampler — redist_mergesplit_parallel","title":"Parallel Merge-Split/Recombination MCMC Redistricting Sampler — redist_mergesplit_parallel","text":"redist_mergesplit_parallel() runs redist_mergesplit() several chains parallel.","code":""},{"path":"http://alarm-redist.org/redist/reference/redist_mergesplit_parallel.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Parallel Merge-Split/Recombination MCMC Redistricting Sampler — redist_mergesplit_parallel","text":"","code":"redist_mergesplit_parallel(   map,   nsims,   chains = 1,   warmup = if (is.null(init_plan)) 10 else max(100, nsims%/%5),   thin = 1L,   init_plan = NULL,   counties = NULL,   compactness = 1,   constraints = list(),   constraint_fn = function(m) rep(0, ncol(m)),   adapt_k_thresh = 0.99,   k = NULL,   ncores = NULL,   cl_type = \"PSOCK\",   return_all = TRUE,   init_name = NULL,   silly_adj_fix = FALSE,   verbose = FALSE,   silent = FALSE )"},{"path":"http://alarm-redist.org/redist/reference/redist_mergesplit_parallel.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Parallel Merge-Split/Recombination MCMC Redistricting Sampler — redist_mergesplit_parallel","text":"map redist_map object. nsims number samples draw, including warmup. chains number parallel chains run. chain nsims draws. init_plan sampled, chain initialized sampled plan. warmup number warmup samples discard. Recommended least first 20% samples, case less around 100 samples, unless initializing random plan. thin Save every thin-th sample. Defaults thinning (1). init_plan initial state map, provided single vector shared across chains, matrix chains columns. provided, default reference map map object, none exists, sample random initial state using redist_smc. can also request random initial state chain setting init_plan=\"sample\". counties vector containing county (administrative geographic unit) labels unit, may integers ranging 1 number counties, factor character vector.  provided, algorithm generate maps tend follow county lines. strength parameter associated constraint. adjust number county splits , constrain second type administrative split, consider using add_constr_splits(), add_constr_multisplits(), add_constr_total_splits(). compactness Controls compactness generated districts, higher values preferring compact districts. Must nonnegative. See 'Details' section information, computational considerations. constraints list containing information constraints implement. See 'Details' section information. constraint_fn function takes matrix column redistricting plan outputs vector log-weights, added final weights. adapt_k_thresh threshold value used heuristic select value k_i splitting iteration. Set 0.9999 1 algorithm appear sampling target distribution. Must 0 1. k number edges consider cutting drawing spanning tree. selected automatically nearly cases. ncores number parallel processes run. Defaults maximum available. cl_type cluster type (see makeCluster()). Safest \"PSOCK\", \"FORK\" may appropriate settings. return_all TRUE return sampled plans; otherwise, just return final plan chain. init_name name initial plan, FALSE include initial plan output.  Defaults column name existing plan, \"<init>\" initial plan sampled. silly_adj_fix Heuristic fixing weird inputs. verbose Whether print intermediate information sampling. Recommended. silent Whether suppress diagnostic information.","code":""},{"path":"http://alarm-redist.org/redist/reference/redist_mergesplit_parallel.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Parallel Merge-Split/Recombination MCMC Redistricting Sampler — redist_mergesplit_parallel","text":"redist_plans object simulated plans, additional chain column indicating chain plan drawn .","code":""},{"path":"http://alarm-redist.org/redist/reference/redist_mergesplit_parallel.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Parallel Merge-Split/Recombination MCMC Redistricting Sampler — redist_mergesplit_parallel","text":"function draws samples specific target measure, controlled map, compactness, constraints parameters. Key ensuring good performance monitoring acceptance rate, reported sample level output. Users also check diagnostics sample running summary.redist_plans(). Higher values compactness sample compact districts; setting parameter 1 computationally efficient generates nicely compact districts.","code":""},{"path":"http://alarm-redist.org/redist/reference/redist_mergesplit_parallel.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Parallel Merge-Split/Recombination MCMC Redistricting Sampler — redist_mergesplit_parallel","text":"Carter, D., Herschlag, G., Hunter, Z., Mattingly, J. (2019). merge-split proposal reversible Monte Carlo Markov chain sampling redistricting plans. arXiv preprint arXiv:1911.01503. McCartan, C., & Imai, K. (2023). Sequential Monte Carlo Sampling Balanced Compact Redistricting Plans. Annals Applied Statistics 17(4). Available doi:10.1214/23-AOAS1763 . DeFord, D., Duchin, M., Solomon, J. (2019). Recombination: family Markov chains redistricting. arXiv preprint arXiv:1911.05725.","code":""},{"path":"http://alarm-redist.org/redist/reference/redist_mergesplit_parallel.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Parallel Merge-Split/Recombination MCMC Redistricting Sampler — redist_mergesplit_parallel","text":"","code":"if (FALSE) { # \\dontrun{ data(fl25) fl_map <- redist_map(fl25, ndists = 3, pop_tol = 0.1) sampled <- redist_mergesplit_parallel(fl_map, nsims = 100, chains = 100) } # }"},{"path":"http://alarm-redist.org/redist/reference/redist_plans.html","id":null,"dir":"Reference","previous_headings":"","what":"A set of redistricting plans — redist_plans","title":"A set of redistricting plans — redist_plans","text":"redist_plans object essentially data frame summary information district plan, along matrix district assignments information simulation process used generate plans.","code":""},{"path":"http://alarm-redist.org/redist/reference/redist_plans.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"A set of redistricting plans — redist_plans","text":"","code":"redist_plans(plans, map, algorithm, wgt = NULL, ...)"},{"path":"http://alarm-redist.org/redist/reference/redist_plans.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"A set of redistricting plans — redist_plans","text":"plans matrix n_precinct columns n_sims rows, single vector precinct assignments. map redist_map object algorithm algorithm used generate plans (usually \"smc\" \"mcmc\") wgt weights use, . ... named attributes set","code":""},{"path":"http://alarm-redist.org/redist/reference/redist_plans.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"A set of redistricting plans — redist_plans","text":"new redist_plans object.","code":""},{"path":"http://alarm-redist.org/redist/reference/redist_plans.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"A set of redistricting plans — redist_plans","text":"first two columns data frame draw, factor indexing simulation draw, district, integer indexing districts within plan. data frame therefore n_sims*ndists rows. data frame, usual dplyr methods work. useful methods redist_plans objects: summary.redist_plans add_reference subset_sampled subset_ref pullback number_by match_numbers is_county_split prec_assignment plan_distances get_plans_matrix get_plans_weights get_sampling_info .matrix.redist_plans plot.redist_plans","code":""},{"path":"http://alarm-redist.org/redist/reference/redist_plans.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"A set of redistricting plans — redist_plans","text":"","code":"data(iowa)  iowa <- redist_map(iowa, existing_plan = cd_2010, pop_tol = 0.05, total_pop = pop) rsg_plan <- redist.rsg(iowa$adj, iowa$pop, ndists = 4, pop_tol = 0.05)$plan #>  #> ====================  #> redist.rsg(): Automated Redistricting Starts #>  #>  #> \t4 districts built using 99 precincts in 0.05 seconds... #>  redist_plans(rsg_plan, iowa, \"rsg\") #> A <redist_plans> containing 1 sampled plan #> Plans have 4 districts from a 99-unit map, and were drawn using random #> seed-and-grow. #> Plans matrix: int [1:99, 1] 1 1 2 3 4 2 2 1 2 2 ... #> # A tibble: 4 × 3 #>   draw  district total_pop #> * <fct>    <int>     <dbl> #> 1 1            1    735276 #> 2 1            2    777906 #> 3 1            3    763285 #> 4 1            4    769888"},{"path":"http://alarm-redist.org/redist/reference/redist_quantile_trunc.html","id":null,"dir":"Reference","previous_headings":"","what":"Helper function to truncate importance weights — redist_quantile_trunc","title":"Helper function to truncate importance weights — redist_quantile_trunc","text":"Defined pmin(x, quantile(x, 1 - length(x)^(-0.5)))","code":""},{"path":"http://alarm-redist.org/redist/reference/redist_quantile_trunc.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Helper function to truncate importance weights — redist_quantile_trunc","text":"","code":"redist_quantile_trunc(x)"},{"path":"http://alarm-redist.org/redist/reference/redist_quantile_trunc.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Helper function to truncate importance weights — redist_quantile_trunc","text":"x weights","code":""},{"path":"http://alarm-redist.org/redist/reference/redist_quantile_trunc.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Helper function to truncate importance weights — redist_quantile_trunc","text":"numeric vector","code":""},{"path":"http://alarm-redist.org/redist/reference/redist_quantile_trunc.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Helper function to truncate importance weights — redist_quantile_trunc","text":"","code":"redist_quantile_trunc(c(1, 2, 3, 4)) #> [1] 1.0 2.0 2.5 2.5"},{"path":"http://alarm-redist.org/redist/reference/redist_shortburst.html","id":null,"dir":"Reference","previous_headings":"","what":"Redistricting Optimization through Short Bursts — redist_shortburst","title":"Redistricting Optimization through Short Bursts — redist_shortburst","text":"function uses redist_mergesplit() redist_flip() optimize redistrict plan according user-provided criteria. running Markov chain \"short bursts\" usually 10 iterations, starting chain anew best plan burst, according criteria. implements ideas -referenced paper, \"Voting Rights, Markov Chains, Optimization Short Bursts.\"","code":""},{"path":"http://alarm-redist.org/redist/reference/redist_shortburst.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Redistricting Optimization through Short Bursts — redist_shortburst","text":"","code":"redist_shortburst(   map,   score_fn = NULL,   stop_at = NULL,   burst_size = ifelse(backend == \"mergesplit\", 10L, 50L),   max_bursts = 500L,   maximize = TRUE,   init_plan = NULL,   counties = NULL,   constraints = redist_constr(map),   compactness = 1,   adapt_k_thresh = 0.95,   reversible = TRUE,   fixed_k = NULL,   return_all = TRUE,   thin = 1L,   backend = \"mergesplit\",   flip_lambda = 0,   flip_eprob = 0.05,   verbose = TRUE )"},{"path":"http://alarm-redist.org/redist/reference/redist_shortburst.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Redistricting Optimization through Short Bursts — redist_shortburst","text":"map redist_map object. score_fn function takes matrix plans returns score (, generally, row vector) plan. Can also purrr-style anonymous function. See ?scorers function factories common scoring rules. stop_at threshold stop optimization . score_fn returns row vector per plan, maximize can equal-length vector specifying threshold dimension, must met algorithm stop. burst_size size burst. 10 recommended mergesplit backend 50 flip backend. Can also provide burst schedule function takes current iteration (integer) returns desired burst size. can random function. max_bursts maximum number bursts run returning. maximize TRUE, try maximize score; otherwise, try minimize . score_fn returns row vector per plan, maximize can equal-length vector specifying whether dimension maximized minimized. init_plan initial state map. provided, default reference map map object, none exists, sample random initial state using redist_smc(). can also request random initial state setting init_plan=\"sample\". counties vector containing county (administrative geographic unit) labels unit, may integers ranging 1 number counties, factor character vector.  provided, algorithm generate maps split ndists-1 counties. county-split constraint desired, parameter left blank. constraints redist_constr Gibbs constraints. compactness Controls compactness generated districts, higher values preferring compact districts. Must non-negative. See redist_mergesplit information. adapt_k_thresh threshold value used heuristic select value k_i splitting iteration. reversible FALSE backend=\"mergesplit\", Markov chain used reversible. may speed optimization. fixed_k NULL, used set k parameter mergesplit backend. e.g. k=1 best edge spanning tree used.  Lower values may speed optimization cost Markov chain longer targeting known distribution. Recommended conjunction reversible=FALSE. return_all Whether return burst results just best one (generally, Pareto frontier). Recommended monitoring purposes. thin Save every thin-th sample. Defaults thinning (1). Ignored return_all=TRUE. backend MCMC algorithm use within burst, either \"mergesplit\" \"flip\". flip_lambda parameter determining number swaps attempt iteration flip mcmc. number swaps iteration equal Pois(lambda) + 1. default 0. flip_eprob probability keeping edge connected flip mcmc. default 0.05. verbose Whether print intermediate information sampling. Recommended monitoring purposes.","code":""},{"path":"http://alarm-redist.org/redist/reference/redist_shortburst.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Redistricting Optimization through Short Bursts — redist_shortburst","text":"redist_plans object containing final best plan (best plans burst, return_all=TRUE.","code":""},{"path":"http://alarm-redist.org/redist/reference/redist_shortburst.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Redistricting Optimization through Short Bursts — redist_shortburst","text":"Cannon, S., Goldbloom-Helzner, ., Gupta, V., Matthews, J. N., & Suwal, B. (2020). Voting Rights, Markov Chains, Optimization Short Bursts. arXiv preprint arXiv:2011.02288.","code":""},{"path":"http://alarm-redist.org/redist/reference/redist_shortburst.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Redistricting Optimization through Short Bursts — redist_shortburst","text":"","code":"# \\donttest{ data(iowa)  iowa_map <- redist_map(iowa, existing_plan = cd_2010, pop_tol = 0.01) redist_shortburst(iowa_map, scorer_frac_kept(iowa_map), max_bursts = 50) #> MERGE-SPLIT SHORT BURSTS #> Sampling up to 50 bursts of 10 iterations each. #> Burst  Improve?    score  #>     5            0.788288 #>    10            0.788288 #>    15     🥳     0.810811 #>    20            0.810811 #>    25            0.810811 #>    30            0.810811 #>    35            0.810811 #>    36     🙂     0.819820 #>    40            0.819820 #>    44     😀     0.824324 #>    45            0.824324 #>    46     🎇     0.828829 #>    50            0.828829 #> A <redist_plans> containing 50 sampled plans and 1 reference plan #> Plans have 4 districts from a 99-unit map, and were drawn using short bursts. #> Plans matrix: int [1:99, 1:51] 1 1 2 3 4 2 2 4 2 2 ... #> # A tibble: 204 × 5 #>    draw   district total_pop score burst_size #>    <fct>     <int>     <dbl> <dbl>      <int> #>  1 <init>        1    761612 0.788         NA #>  2 <init>        2    761548 0.788         NA #>  3 <init>        3    761624 0.788         NA #>  4 <init>        4    761571 0.788         NA #>  5 1             1    761612 0.788         10 #>  6 1             2    761548 0.788         10 #>  7 1             3    761624 0.788         10 #>  8 1             4    761571 0.788         10 #>  9 2             1    761612 0.788         10 #> 10 2             2    761548 0.788         10 #> # ℹ 194 more rows redist_shortburst(iowa_map, ~ 1 - scorer_frac_kept(iowa_map)(.), max_bursts = 50) #> MERGE-SPLIT SHORT BURSTS #> Sampling up to 50 bursts of 10 iterations each. #> Burst  Improve?    score  #>     5            0.211712 #>     7     🎆     0.216216 #>    10            0.216216 #>    15            0.216216 #>    19     🌈     0.265766 #>    20            0.265766 #>    23     🙂     0.274775 #>    25            0.274775 #>    30            0.274775 #>    35            0.274775 #>    37     😎     0.279279 #>    38     🎉     0.288288 #>    40            0.288288 #>    45            0.288288 #>    50            0.288288 #> A <redist_plans> containing 50 sampled plans and 1 reference plan #> Plans have 4 districts from a 99-unit map, and were drawn using short bursts. #> Plans matrix: int [1:99, 1:51] 1 1 2 3 4 2 2 4 2 2 ... #> # A tibble: 204 × 5 #>    draw   district total_pop score burst_size #>    <fct>     <int>     <dbl> <dbl>      <int> #>  1 <init>        1    761612 0.212         NA #>  2 <init>        2    761548 0.212         NA #>  3 <init>        3    761624 0.212         NA #>  4 <init>        4    761571 0.212         NA #>  5 1             1    761612 0.212         10 #>  6 1             2    761548 0.212         10 #>  7 1             3    761624 0.212         10 #>  8 1             4    761571 0.212         10 #>  9 2             1    761612 0.212         10 #> 10 2             2    761548 0.212         10 #> # ℹ 194 more rows # }"},{"path":"http://alarm-redist.org/redist/reference/redist_smc.html","id":null,"dir":"Reference","previous_headings":"","what":"SMC Redistricting Sampler (McCartan and Imai 2023) — redist_smc","title":"SMC Redistricting Sampler (McCartan and Imai 2023) — redist_smc","text":"redist_smc uses Sequential Monte Carlo algorithm (McCartan Imai 2023) generate representative samples congressional legislative redistricting plans according contiguity, population, compactness, administrative boundary constraints.","code":""},{"path":"http://alarm-redist.org/redist/reference/redist_smc.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"SMC Redistricting Sampler (McCartan and Imai 2023) — redist_smc","text":"","code":"redist_smc(   map,   nsims,   counties = NULL,   compactness = 1,   constraints = list(),   resample = TRUE,   runs = 1L,   ncores = 0L,   init_particles = NULL,   n_steps = NULL,   adapt_k_thresh = 0.99,   seq_alpha = 0.5,   truncate = (compactness != 1),   trunc_fn = redist_quantile_trunc,   pop_temper = 0,   final_infl = 1,   ref_name = NULL,   verbose = FALSE,   silent = FALSE )"},{"path":"http://alarm-redist.org/redist/reference/redist_smc.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"SMC Redistricting Sampler (McCartan and Imai 2023) — redist_smc","text":"map redist_map() object. nsims number samples draw. counties vector containing county (administrative geographic unit) labels unit, may integers ranging 1 number counties, factor character vector.  provided, algorithm generate maps split ndists-1 counties. Even fewer counties ndists - 1, spanning trees change results simulations. strength parameter associated constraint. adjust number county splits , constrain second type administrative split, consider using add_constr_splits(), add_constr_multisplits(), add_constr_total_splits(). compactness Controls compactness generated districts, higher values preferring compact districts. Must nonnegative. See 'Details' section information, computational considerations. constraints redist_constr() object list containing information sampling constraints. See constraints information. resample Whether perform final resampling step generated plans can used immediately.  Set FALSE perform direct importance sampling estimates, adjust weights manually. runs many independent parallel runs conduct. run nsims simulations. Multiple runs allows estimation simulation standard errors. Output shown first run. compatibility MCMC methods, runs identified chain column output. ncores many cores use parallelize plan generation within run. default, 0, use number available cores machine long nsims number units large enough. runs>1 need set manually. one core used, sampler output fully reproducible set.seed(). full reproducibility desired, set ncores=1. init_particles matrix partial plans begin sampling . advanced use .  matrix must nsims columns row every precinct. important ensure existing districts meet contiguity population constraints, may major issues sampling. n_steps many steps run SMC algorithm . step splits new district. Defaults remaining districts. fewer number remaining splits, reference plans disabled. adapt_k_thresh threshold value used heuristic select value k_i splitting iteration. Higher values accurate may require computation. Set 1 conservative sampling. Must 0 1. seq_alpha amount adjust weights resampling step; higher values prefer exploitation, lower values prefer exploration. Must 0 1. truncate Whether truncate importance sampling weights final step trunc_fn.  Recommended compactness 1. Truncation applied resample=TRUE. trunc_fn function takes vector weights returns truncated vector. loo package installed (strongly recommended), default Pareto-smoothed Importance Sampling (PSIS) rather naive truncation. pop_temper strength automatic population tempering. Try values 0.01-0.05 start algorithm gets stuck final splits. final_infl multiplier population constraint final iteration. Used loosen constraint sampler getting stuck final split. pop_temper tried first, since using final_infl actually change target distribution. ref_name name existing plan, added reference plan, FALSE include initial plan output. Defaults column name existing plan. verbose Whether print intermediate information sampling. Recommended. silent Whether suppress diagnostic information.","code":""},{"path":"http://alarm-redist.org/redist/reference/redist_smc.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"SMC Redistricting Sampler (McCartan and Imai 2023) — redist_smc","text":"redist_smc returns redist_plans object containing simulated plans.","code":""},{"path":"http://alarm-redist.org/redist/reference/redist_smc.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"SMC Redistricting Sampler (McCartan and Imai 2023) — redist_smc","text":"function draws samples specific target measure controlled map, compactness, constraints parameters. Key ensuring good performance monitoring efficiency resampling process SMC stage.  Unless silent=FALSE, function print effective sample size resampling step allow user monitor efficiency.  verbose=TRUE function also print information \\(k_i\\) values automatically chosen acceptance rate (based population constraint) step. Users also check diagnostics sample running summary.redist_plans(). Higher values compactness sample compact districts; setting parameter 1 computationally efficient generates nicely compact districts.  Values 1 may lead highly variable importance sampling weights.  cases, weights default truncated using redist_quantile_trunc() stabilize resulting estimates, truncation used, specific truncation function probably chosen user.","code":""},{"path":"http://alarm-redist.org/redist/reference/redist_smc.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"SMC Redistricting Sampler (McCartan and Imai 2023) — redist_smc","text":"McCartan, C., & Imai, K. (2023). Sequential Monte Carlo Sampling Balanced Compact Redistricting Plans. Annals Applied Statistics 17(4). Available doi:10.1214/23-AOAS1763 .","code":""},{"path":"http://alarm-redist.org/redist/reference/redist_smc.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"SMC Redistricting Sampler (McCartan and Imai 2023) — redist_smc","text":"","code":"# \\donttest{ data(fl25)  fl_map <- redist_map(fl25, ndists = 3, pop_tol = 0.1) #> Projecting to CRS 3857  sampled_basic <- redist_smc(fl_map, 5000) #> SEQUENTIAL MONTE CARLO #> Sampling 5000 25-unit maps with 3 districts and population between 52513 and 64182.  constr <- redist_constr(fl_map) constr <- add_constr_incumbency(constr, strength = 100, incumbents = c(3, 6, 25)) sampled_constr <- redist_smc(fl_map, 5000, constraints = constr) #> SEQUENTIAL MONTE CARLO #> Sampling 5000 25-unit maps with 3 districts and population between 52513 and 64182. #> Split [1/2] ■■■■■■■■■■■■■■■■                 | ETA 1s #> Split [2/2] ■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■  | ETA 0s #>   # Multiple parallel independent runs redist_smc(fl_map, 1000, runs = 2) #> A <redist_plans> containing 2,000 sampled plans #> Plans have 3 districts from a 25-unit map, and were drawn using Sequential #> Monte Carlo. #> With plans resampled from weights #> Plans matrix: int [1:25, 1:2000] 2 3 3 2 3 2 1 1 2 1 ... #> # A tibble: 6,000 × 4 #>    draw  chain district total_pop #>    <fct> <int>    <int>     <dbl> #>  1 1         1        1     61214 #>  2 1         1        2     58792 #>  3 1         1        3     55037 #>  4 2         1        1     57208 #>  5 2         1        2     56621 #>  6 2         1        3     61214 #>  7 3         1        1     55024 #>  8 3         1        2     57892 #>  9 3         1        3     62127 #> 10 4         1        1     58845 #> # ℹ 5,990 more rows  # One run with multiple cores redist_smc(fl_map, 1000, ncores = 2) #> SEQUENTIAL MONTE CARLO #> Sampling 1000 25-unit maps with 3 districts and population between 52513 and 64182. #> A <redist_plans> containing 1,000 sampled plans #> Plans have 3 districts from a 25-unit map, and were drawn using Sequential #> Monte Carlo. #> With plans resampled from weights #> Plans matrix: int [1:25, 1:1000] 2 1 1 1 1 2 3 3 2 3 ... #> # A tibble: 3,000 × 3 #>    draw  district total_pop #>  * <fct>    <int>     <dbl> #>  1 1            1     57349 #>  2 1            2     56480 #>  3 1            3     61214 #>  4 2            1     57236 #>  5 2            2     58683 #>  6 2            3     59124 #>  7 3            1     53863 #>  8 3            2     58905 #>  9 3            3     62275 #> 10 4            1     55024 #> # ℹ 2,990 more rows # }"},{"path":"http://alarm-redist.org/redist/reference/reexports.html","id":null,"dir":"Reference","previous_headings":"","what":"Objects exported from other packages — reexports","title":"Objects exported from other packages — reexports","text":"objects imported packages. Follow links see documentation. dplyr filter","code":""},{"path":"http://alarm-redist.org/redist/reference/scorer-arith.html","id":null,"dir":"Reference","previous_headings":"","what":"Scoring function arithmetic — scorer-arith","title":"Scoring function arithmetic — scorer-arith","text":"redist_scorer functions may multiplied constants /added together form linear combinations.","code":""},{"path":"http://alarm-redist.org/redist/reference/scorer-arith.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Scoring function arithmetic — scorer-arith","text":"","code":"# S3 method for class 'redist_scorer' x * fn2  # S3 method for class 'redist_scorer' fn1 + fn2  # S3 method for class 'redist_scorer' fn1 - fn2"},{"path":"http://alarm-redist.org/redist/reference/scorer-arith.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Scoring function arithmetic — scorer-arith","text":"x numeric redist_scorer function, scorers fn2 redist_scorer function, scorers fn1 redist_scorer function, scorers","code":""},{"path":"http://alarm-redist.org/redist/reference/scorer-arith.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Scoring function arithmetic — scorer-arith","text":"function class redist_scorer","code":""},{"path":"http://alarm-redist.org/redist/reference/scorer-combine.html","id":null,"dir":"Reference","previous_headings":"","what":"Combine scoring functions — scorer-combine","title":"Combine scoring functions — scorer-combine","text":"redist_scorer functions may combined together optimize along multiple dimensions. Rather linearly combining multiple scorers form single objective scorer-arith, functions allow analysts approximate Pareto frontier set scorers.","code":""},{"path":"http://alarm-redist.org/redist/reference/scorer-combine.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Combine scoring functions — scorer-combine","text":"","code":"combine_scorers(...)  # S3 method for class 'redist_scorer' cbind(..., deparse.level = 1)"},{"path":"http://alarm-redist.org/redist/reference/scorer-combine.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Combine scoring functions — scorer-combine","text":"... numeric redist_scorer function, scorers deparse.level cbind().","code":""},{"path":"http://alarm-redist.org/redist/reference/scorer-combine.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Combine scoring functions — scorer-combine","text":"function class redist_scorer. return matrix column containing every plan's scores particular scoring function.","code":""},{"path":"http://alarm-redist.org/redist/reference/scorers.html","id":null,"dir":"Reference","previous_headings":"","what":"Scoring functions for redist_shortburst — scorer_group_pct","title":"Scoring functions for redist_shortburst — scorer_group_pct","text":"output functions may passed redist_shortburst() score_fn.  Scoring functions type redist_scorer may combined together using basic arithmetic operations.","code":""},{"path":"http://alarm-redist.org/redist/reference/scorers.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Scoring functions for redist_shortburst — scorer_group_pct","text":"","code":"scorer_group_pct(map, group_pop, total_pop, k = 1)  scorer_pop_dev(map)  scorer_splits(map, counties)  scorer_multisplits(map, counties)  scorer_frac_kept(map)  scorer_polsby_popper(map, perim_df = NULL, areas = NULL, m = 1)  scorer_status_quo(map, existing_plan = get_existing(map))"},{"path":"http://alarm-redist.org/redist/reference/scorers.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Scoring functions for redist_shortburst — scorer_group_pct","text":"map redist_map object. group_pop numeric vector population group every precinct. total_pop numeric vector population every precinct. k k-th top group fraction return score. counties numeric vector integer 1:n_counties perim_df perimeter distance dataframe redistmetrics::prep_perims() areas area precinct (ie st_area(map)) m m-th bottom Polsby Popper return score. Defaults 1, minimum Polsby Popper score existing_plan vector containing current plan.","code":""},{"path":"http://alarm-redist.org/redist/reference/scorers.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Scoring functions for redist_shortburst — scorer_group_pct","text":"scoring function class redist_scorer returns single numeric value per plan. Larger values generally better frac_kept, group_pct, polsby_popper smaller values better splits pop_dev.","code":""},{"path":"http://alarm-redist.org/redist/reference/scorers.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Scoring functions for redist_shortburst — scorer_group_pct","text":"Function details: scorer_group_pct returns k-th top group percentage across districts. example, group Democratic voters k=3, function returns 3rd-highest fraction Democratic voters across districts. Can used target k VRA districts partisan gerrymanders. scorer_pop_dev returns maximum population deviation within plan. Smaller values closer population parity, use maximize=FALSE scorer. scorer_splits returns fraction counties split within plan. Higher values county splits, use maximize=FALSE scorer. scorer_frac_kept returns fraction edges kept district. Higher values mean compactness. scorer_polsby_popper returns m-th Polsby Popper score within plan. Higher scores correspond compact districts.  Use m=ndists/2 target median compactness, m=1 target minimum compactness. scorer_status_quo returns 1 - rescaled variation information distance plan existing_plan. Larger values indicate plan closer existing plan.","code":""},{"path":"http://alarm-redist.org/redist/reference/scorers.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Scoring functions for redist_shortburst — scorer_group_pct","text":"","code":"# \\donttest{ data(iowa) iowa_map <- redist_map(iowa, existing_plan = cd_2010, pop_tol = 0.05, total_pop = pop)  scorer_frac_kept(iowa_map) #> function (plans)  #> { #>     (edges - n_removed(adj, plans, ndists))/edges #> } #> <bytecode: 0x55661ee35e40> #> <environment: 0x556615a39388> #> attr(,\"class\") #> [1] \"redist_scorer\" \"function\"      scorer_status_quo(iowa_map) #> function (plans)  #> { #>     1 - 0.5 * var_info_vec(plans, existing_plan, pop)/log(ndists) #> } #> <bytecode: 0x5566156b5278> #> <environment: 0x5566156b5a90> #> attr(,\"class\") #> [1] \"redist_scorer\" \"function\"      scorer_group_pct(iowa_map, dem_08, tot_08, k = 2) #> function (plans)  #> { #>     group_pct_top_k(plans, group_pop, total_pop, k, ndists) #> } #> <bytecode: 0x5566153a1240> #> <environment: 0x55661539a318> #> attr(,\"class\") #> [1] \"redist_scorer\" \"function\"      1.5*scorer_frac_kept(iowa_map) + 0.4*scorer_status_quo(iowa_map) #> function (plans)  #> { #>     fn1(plans) + fn2(plans) #> } #> <bytecode: 0x55661504fde8> #> <environment: 0x5566150505c8> #> attr(,\"class\") #> [1] \"redist_scorer\" \"function\"      1.5*scorer_frac_kept(iowa_map) + scorer_frac_kept(iowa_map)*scorer_status_quo(iowa_map) #> function (plans)  #> { #>     fn1(plans) + fn2(plans) #> } #> <bytecode: 0x55661504fde8> #> <environment: 0x556614e43068> #> attr(,\"class\") #> [1] \"redist_scorer\" \"function\"      cbind(     comp = scorer_frac_kept(iowa_map),     sq = scorer_status_quo(iowa_map) ) #> function (plans)  #> { #>     do.call(cbind, c(lapply(fns, function(fn) { #>         fn(plans) #>     }), list(deparse.level = deparse.level))) #> } #> <bytecode: 0x556614d1d990> #> <environment: 0x556614d1ab58> #> attr(,\"class\") #> [1] \"redist_scorer\" \"function\"      # }"},{"path":"http://alarm-redist.org/redist/reference/subset_sampled.html","id":null,"dir":"Reference","previous_headings":"","what":"Subset to sampled or reference draws — subset_sampled","title":"Subset to sampled or reference draws — subset_sampled","text":"Subset sampled reference draws","code":""},{"path":"http://alarm-redist.org/redist/reference/subset_sampled.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Subset to sampled or reference draws — subset_sampled","text":"","code":"subset_sampled(plans, matrix = TRUE)  subset_ref(plans, matrix = TRUE)"},{"path":"http://alarm-redist.org/redist/reference/subset_sampled.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Subset to sampled or reference draws — subset_sampled","text":"plans redist_plans object matrix TRUE, default, also subset plans matrix. plans matrix needed, turning may save time.","code":""},{"path":"http://alarm-redist.org/redist/reference/subset_sampled.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Subset to sampled or reference draws — subset_sampled","text":"redist_plans object, rows corresponding simulated (reference) draws remaining.","code":""},{"path":"http://alarm-redist.org/redist/reference/summary.redist_plans.html","id":null,"dir":"Reference","previous_headings":"","what":"Diagnostic information on sampled plans — summary.redist_plans","title":"Diagnostic information on sampled plans — summary.redist_plans","text":"Prints diagnostic information, varies algorithm. algorithms compute plans_diversity() samples.","code":""},{"path":"http://alarm-redist.org/redist/reference/summary.redist_plans.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Diagnostic information on sampled plans — summary.redist_plans","text":"","code":"# S3 method for class 'redist_plans' summary(object, district = 1L, all_runs = TRUE, vi_max = 100, ...)"},{"path":"http://alarm-redist.org/redist/reference/summary.redist_plans.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Diagnostic information on sampled plans — summary.redist_plans","text":"object redist_plans object district R-hat values, district use district-level summary statistics. strongly recommend calling match_numbers() number_by() examining district-level statistics. all_runs multiple SMC runs, show detailed summary statistics runs (default), first run? vi_max maximum number plans sample computing pairwise variation information distance (sample diversity). ... additional arguments (ignored)","code":""},{"path":"http://alarm-redist.org/redist/reference/summary.redist_plans.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Diagnostic information on sampled plans — summary.redist_plans","text":"data frame containing diagnostic information, invisibly.","code":""},{"path":"http://alarm-redist.org/redist/reference/summary.redist_plans.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Diagnostic information on sampled plans — summary.redist_plans","text":"SMC MCMC, multiple runs/chains, R-hat values computed summary statistic. values close 1. , much -chain variation, indicating enough samples. R-hat values calculated rank-normalization folding.  MCMC chains split half R-hat computed. summary statistics vary across districts, R-hat calculated first district . SMC, diagnostics statistics include: Effective samples: effective sample size iteration, computed using SMC weights. Larger better. percentage parentheses ratio effective samples total samples. Acceptance rate: fraction drawn spanning trees yield valid redistricting plan within population tolerance. small values (< 1%) can indicate bottleneck may lead lack diversity. Standard deviation log weights: variable weights (larger s.d.) indicate less efficient sampling. Values greater 3 likely problematic. Maximum unique plans: upper bound number unique redistricting plans survive stage. percentage parentheses ratio number total number samples. Small values (< 100) indicate bottleneck, leads loss sample diversity higher variance. Estimated k parameter: many spanning tree edges considered cutting split. Mostly informational, though large jumps may indicate need increase adapt_k_thresh. Bottleneck: asterisk appear right column bottleneck appears likely, based values statistics. event problematic diagnostics, function provide suggestions improvement.","code":""},{"path":"http://alarm-redist.org/redist/reference/summary.redist_plans.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Diagnostic information on sampled plans — summary.redist_plans","text":"","code":"data(iowa) iowa_map <- redist_map(iowa, ndists = 4, pop_tol = 0.1) plans <- redist_smc(iowa_map, 100) #> SEQUENTIAL MONTE CARLO #> Sampling 100 99-unit maps with 4 districts and population between 685430 and 837748. #> Split [0/3] ■                                | ETA? #> Split [3/3] ■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■  | ETA 0s #>  summary(plans) #> SMC: 100 sampled plans of 4 districts on 99 units #> `adapt_k_thresh`=0.99 • `seq_alpha`=0.5 #> `pop_temper`=0 #>  #> Plan diversity 80% range: 0.48 to 0.82 #>  #> Sampling diagnostics for SMC run 1 of 1 (100 samples) #>          Eff. samples (%) Acc. rate Log wgt. sd  Max. unique Est. k  #> Split 1        98 (97.9%)     19.5%        0.28    62 ( 98%)     16  #> Split 2        97 (96.7%)     28.2%        0.35    60 ( 95%)     10  #> Split 3        96 (95.7%)      9.5%        0.41    56 ( 89%)      8  #> Resample       84 (83.6%)       NA%        0.41    82 (130%)     NA  #>  #> •  Watch out for low effective samples, very low acceptance rates (less than #> 1%), large std. devs. of the log weights (more than 3 or so), and low numbers #> of unique plans. R-hat values for summary statistics should be between 1 and #> 1.05."},{"path":"http://alarm-redist.org/redist/reference/tally_var.html","id":null,"dir":"Reference","previous_headings":"","what":"Tally a variable by district — tally_var","title":"Tally a variable by district — tally_var","text":"Tally variable district","code":""},{"path":"http://alarm-redist.org/redist/reference/tally_var.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Tally a variable by district — tally_var","text":"","code":"tally_var(map, x, .data = pl())"},{"path":"http://alarm-redist.org/redist/reference/tally_var.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Tally a variable by district — tally_var","text":"map redist_map object x variable tally. Tidy-evaluated. .data redist_plans object matrix plans","code":""},{"path":"http://alarm-redist.org/redist/reference/tally_var.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Tally a variable by district — tally_var","text":"vector containing tallied values district plan (column-major)","code":""},{"path":"http://alarm-redist.org/redist/news/index.html","id":"redist-430","dir":"Changelog","previous_headings":"","what":"redist 4.3.0","title":"redist 4.3.0","text":"Improves SMC performance pre-allocating memory drawing spanning trees. Replaces SMC label-counting adjustments (exact importance-sampling-based) new backward kernel eliminates approximation error requires far less computation returned redist_plans object store wrong score ‘’ input. issue impacted returned object correct score used shortburst process. (#180) function return immediately stop_at specified minimize = FALSE. (#181) Add summary() support plans sampled flip algorithm. replace full flip diagnostic suite, provides easy way compute r-hats.","code":""},{"path":"http://alarm-redist.org/redist/news/index.html","id":"redist-420","dir":"Changelog","previous_headings":"","what":"redist 4.2.0","title":"redist 4.2.0","text":"Deprecate functionality provided redistmetrics package. Improve contiguity checking speed drastically. Support multiple independent scoring functions redist_shortburst(). multiple scorers, algorithm stochastically explore try find largest Pareto frontier scores. frontier can accessed attr(<plans obj>, \"pareto_score\"). Removes MPI vignette relied older implementations redist.mcmc(), replaced redist.flip() years ago, finally redist_flip().","code":""},{"path":"http://alarm-redist.org/redist/news/index.html","id":"redist-411","dir":"Changelog","previous_headings":"","what":"redist 4.1.1","title":"redist 4.1.1","text":"Resolves sanitizer error CRAN","code":""},{"path":"http://alarm-redist.org/redist/news/index.html","id":"redist-410","dir":"Changelog","previous_headings":"","what":"redist 4.1.0","title":"redist 4.1.0","text":"Improved diagnostic output New redist_ci interface confidence interval calculation Improved plotting options redist.plot.distr_qtys() custom geometry types. Improved resampling efficiency final SMC stage Faster implementation loop-erased random walk C++ Faster random number generation C++ Updated citation information","code":""},{"path":"http://alarm-redist.org/redist/news/index.html","id":"redist-400","dir":"Changelog","previous_headings":"","what":"redist 4.0.0","title":"redist 4.0.0","text":"new constraint interface flexible, user friendly, consistent across algorithms (see redist_constr() ?constraints). first time, user-defined custom constraints supported integrated within three algorithms. New diagnostic-checking function, summary.redist_plans() Summary statistics broken new redistmetrics package speed compilation time also provides cleaner, extensible interface implementation additional metrics. Parallel computing support SMC algorithm, within across sampling runs Reproducible across-run parallelism throughout package, via doRNG Much faster match_numbers() using Hungarian method min_move_parity() calculates much population needs moved districts order completely balance redistricting plan. Support partial SMC simulations, fewer districts drawn total number. Allows advanced users manually combine partial runs form complete maps. Improved algorithm reporting, including new progress bars cli errors warnings throughout package Update SMC algorithm include missing correction factor number ways sequentially label districts. factor effect substantive conclusions summary statistics. Remove deprecated functions Many bug fixes (see https://github.com/alarm-redist/redist/issues)","code":""},{"path":"http://alarm-redist.org/redist/news/index.html","id":"redist-316","dir":"Changelog","previous_headings":"","what":"redist 3.1.6","title":"redist 3.1.6","text":"Utilities using municipalities well counties split calculations","code":""},{"path":"http://alarm-redist.org/redist/news/index.html","id":"redist-315","dir":"Changelog","previous_headings":"","what":"redist 3.1.5","title":"redist 3.1.5","text":"skip SMC test Linux","code":""},{"path":"http://alarm-redist.org/redist/news/index.html","id":"redist-314","dir":"Changelog","previous_headings":"","what":"redist 3.1.4","title":"redist 3.1.4","text":"skip SMC test Solaris","code":""},{"path":"http://alarm-redist.org/redist/news/index.html","id":"redist-312","dir":"Changelog","previous_headings":"","what":"redist 3.1.2","title":"redist 3.1.2","text":"Fixes crash caused redist.splits()","code":""},{"path":"http://alarm-redist.org/redist/news/index.html","id":"redist-311","dir":"Changelog","previous_headings":"","what":"redist 3.1.1","title":"redist 3.1.1","text":"Fixes printing bug color_graph()","code":""},{"path":"http://alarm-redist.org/redist/news/index.html","id":"redist-310","dir":"Changelog","previous_headings":"","what":"redist 3.1.0","title":"redist 3.1.0","text":"Removes prior deprecated functions arguments Fix bugs (#78, #81, #86) Introduces redist_mergesplit_parallel() Adds rbind() generic redist_plans objects Improves sampling speed SMC Merge-split county constraint Adds county split measures. Adds population overlap measures plan comparisons. Deprecates redist.smc() favor redist_smc() redist.mergesplit() favor redist_mergesplit(). # redist 3.0.2 Fix bugs (#60, #61, #62, #70, #71, #72), including s2 compatibility, Solaris fixes, improved dplyr verb robustness.","code":""},{"path":"http://alarm-redist.org/redist/news/index.html","id":"redist-301","dir":"Changelog","previous_headings":"","what":"redist 3.0.1","title":"redist 3.0.1","text":"New tidy interface, including new redist_map redist_plans objects Merge-split MCMC now available redist_mergesplit() Short burst MCMC optimization now available redist_shortburst() along scoring functions (?scorers) Improved Flip MCMC interface performance improvements New support larger simulation size limits Functions freeze parts map extract district cores New VRA constraint Many new plotting functions Consistent function argument names New partisanship compactness metrics Performance improvements compactness calculations Plan comparison classification compare_plans() classify_plans() New iowa dataset cleaned-package data New vignettes redistricting analysis workflows Various bug fixes","code":""},{"path":"http://alarm-redist.org/redist/news/index.html","id":"redist-204","dir":"Changelog","previous_headings":"","what":"redist 2.0.4","title":"redist 2.0.4","text":"New redist.subset allows easy subsetting adjacency graph Added NEWS.md file track changes package","code":""}]
